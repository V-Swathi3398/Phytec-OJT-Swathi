
01 _uart_tx1_mul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004f4  080004f4  000104f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000504  08000504  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000504  08000504  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000504  08000504  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800050c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000510  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000510  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000158c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000654  00000000  00000000  000215c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014728  00000000  00000000  00021fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000213f  00000000  00000000  000366e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008334f  00000000  00000000  00038827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bbb76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005ec  00000000  00000000  000bbbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004dc 	.word	0x080004dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004dc 	.word	0x080004dc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <main>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);



int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	uart2_init();
 80001ec:	f000 f81c 	bl	8000228 <uart2_init>
	while(1)
	{
		uart2_write("Hello world\n");
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0x38>)
 80001f2:	f000 f885 	bl	8000300 <uart2_write>
		GPIOA->ODR |= 0x00000030;
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <main+0x3c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <main+0x3c>)
 80001fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000200:	6153      	str	r3, [r2, #20]
		systickDelayMs(500);
 8000202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000206:	f000 f8dd 	bl	80003c4 <systickDelayMs>
		GPIOA->ODR &= ~0x00000020;
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0x3c>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a05      	ldr	r2, [pc, #20]	; (8000224 <main+0x3c>)
 8000210:	f023 0320 	bic.w	r3, r3, #32
 8000214:	6153      	str	r3, [r2, #20]
		systickDelayMs(500);
 8000216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021a:	f000 f8d3 	bl	80003c4 <systickDelayMs>
		uart2_write("Hello world\n");
 800021e:	e7e7      	b.n	80001f0 <main+0x8>
 8000220:	080004f4 	.word	0x080004f4
 8000224:	40020000 	.word	0x40020000

08000228 <uart2_init>:
	return 0;
}


void uart2_init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	/*****Configure uart gpio pin******/
		/*Enable clock access to gpioa */
		RCC->AHB1ENR |= GPIOAEN;
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <uart2_init+0x7c>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <uart2_init+0x7c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <uart2_init+0x7c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <uart2_init+0x7c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER &= ~0x00000C00;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <uart2_init+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a17      	ldr	r2, [pc, #92]	; (80002a8 <uart2_init+0x80>)
 800024a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800024e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=0x00000400;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <uart2_init+0x80>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <uart2_init+0x80>)
 8000256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025a:	6013      	str	r3, [r2, #0]

		//Set PA2 mode to alternate function mode/
		GPIOA->MODER  |= PA2MOD;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <uart2_init+0x80>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <uart2_init+0x80>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6013      	str	r3, [r2, #0]

		//Set PA2 alternate function type to UART_TX (AF07)/
        GPIOA->AFR[0] |= PA2AF;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <uart2_init+0x80>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <uart2_init+0x80>)
 800026e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000272:	6213      	str	r3, [r2, #32]

		/*****Configure uart module ******/
		/*Enable clock access to uart2 */
         RCC->APB1ENR |= APB1EN;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <uart2_init+0x7c>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <uart2_init+0x7c>)
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40

		//Configure baudrate/
		uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000284:	4909      	ldr	r1, [pc, #36]	; (80002ac <uart2_init+0x84>)
 8000286:	480a      	ldr	r0, [pc, #40]	; (80002b0 <uart2_init+0x88>)
 8000288:	f000 f814 	bl	80002b4 <uart_set_baudrate>
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		//Configure the transfer direction/
		USART2->CR1 = USART2_TX;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <uart2_init+0x88>)
 800028e:	2208      	movs	r2, #8
 8000290:	60da      	str	r2, [r3, #12]

		//Enable uart module/
        USART2->CR1 |= USART2EN;
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <uart2_init+0x88>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <uart2_init+0x88>)
 8000298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029c:	60d3      	str	r3, [r2, #12]

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	00f42400 	.word	0x00f42400
 80002b0:	40004400 	.word	0x40004400

080002b4 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80002c0:	6879      	ldr	r1, [r7, #4]
 80002c2:	68b8      	ldr	r0, [r7, #8]
 80002c4:	f000 f808 	bl	80002d8 <compute_uart_bd>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	609a      	str	r2, [r3, #8]
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	085a      	lsrs	r2, r3, #1
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	441a      	add	r2, r3
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f0:	b29b      	uxth	r3, r3
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <uart2_write>:


void uart2_write(const char* str)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    //Loop through the string, sending each character one by one/
    for(int i = 0; i < strlen(str); i++)
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e00f      	b.n	800032e <uart2_write+0x2e>
    {


        //Make sure the transmit data register is empty/
        while(!(USART2->SR & SR_TXE)){}
 800030e:	bf00      	nop
 8000310:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <uart2_write+0x48>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <uart2_write+0x10>

        //Write to transmit data register/
        USART2->DR  =  (str[i] & 0xFF);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <uart2_write+0x48>)
 8000326:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < strlen(str); i++)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ff52 	bl	80001d8 <strlen>
 8000334:	4602      	mov	r2, r0
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	429a      	cmp	r2, r3
 800033a:	d8e8      	bhi.n	800030e <uart2_write+0xe>
    }
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40004400 	.word	0x40004400

0800034c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <NMI_Handler+0x4>

08000352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <HardFault_Handler+0x4>

08000358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <MemManage_Handler+0x4>

0800035e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000362:	e7fe      	b.n	8000362 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <UsageFault_Handler+0x4>

0800036a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000398:	f000 f868 	bl	800046c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <SystemInit+0x20>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003aa:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <SystemInit+0x20>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <systickDelayMs>:
#define CTRL_CLKSRC					(1U<<2)
#define CTRL_COUNTFLAG				(1U<<16)


void systickDelayMs(int delay)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	//Reload with number of clocks per millisecond/
	SysTick->LOAD	= SYSTICK_LOAD_VAL;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <systickDelayMs+0x50>)
 80003ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80003d2:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <systickDelayMs+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]

	//Enable systick and select internal clk src/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <systickDelayMs+0x50>)
 80003dc:	2205      	movs	r2, #5
 80003de:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay ; i++){
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e009      	b.n	80003fa <systickDelayMs+0x36>

		//Wait until the COUNTFLAG is set/

		while((SysTick->CTRL &  CTRL_COUNTFLAG) == 0){}
 80003e6:	bf00      	nop
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <systickDelayMs+0x50>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0f9      	beq.n	80003e8 <systickDelayMs+0x24>
	for(int i=0; i<delay ; i++){
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	429a      	cmp	r2, r3
 8000400:	dbf1      	blt.n	80003e6 <systickDelayMs+0x22>

	}

	SysTick->CTRL = 0;
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <systickDelayMs+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]

}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	e000e010 	.word	0xe000e010

08000418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800041e:	490e      	ldr	r1, [pc, #56]	; (8000458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0b      	ldr	r2, [pc, #44]	; (8000460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000434:	4c0b      	ldr	r4, [pc, #44]	; (8000464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000442:	f7ff ffad 	bl	80003a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000446:	f000 f825 	bl	8000494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800044a:	f7ff fecd 	bl	80001e8 <main>
  bx  lr    
 800044e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800045c:	0800050c 	.word	0x0800050c
  ldr r2, =_sbss
 8000460:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000464:	20000024 	.word	0x20000024

08000468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_IncTick+0x20>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_IncTick+0x24>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4413      	add	r3, r2
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_IncTick+0x24>)
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000000 	.word	0x20000000
 8000490:	20000020 	.word	0x20000020

08000494 <__libc_init_array>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	4d0d      	ldr	r5, [pc, #52]	; (80004cc <__libc_init_array+0x38>)
 8000498:	4c0d      	ldr	r4, [pc, #52]	; (80004d0 <__libc_init_array+0x3c>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	2600      	movs	r6, #0
 80004a0:	42a6      	cmp	r6, r4
 80004a2:	d109      	bne.n	80004b8 <__libc_init_array+0x24>
 80004a4:	4d0b      	ldr	r5, [pc, #44]	; (80004d4 <__libc_init_array+0x40>)
 80004a6:	4c0c      	ldr	r4, [pc, #48]	; (80004d8 <__libc_init_array+0x44>)
 80004a8:	f000 f818 	bl	80004dc <_init>
 80004ac:	1b64      	subs	r4, r4, r5
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	2600      	movs	r6, #0
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d105      	bne.n	80004c2 <__libc_init_array+0x2e>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004bc:	4798      	blx	r3
 80004be:	3601      	adds	r6, #1
 80004c0:	e7ee      	b.n	80004a0 <__libc_init_array+0xc>
 80004c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c6:	4798      	blx	r3
 80004c8:	3601      	adds	r6, #1
 80004ca:	e7f2      	b.n	80004b2 <__libc_init_array+0x1e>
 80004cc:	08000504 	.word	0x08000504
 80004d0:	08000504 	.word	0x08000504
 80004d4:	08000504 	.word	0x08000504
 80004d8:	08000508 	.word	0x08000508

080004dc <_init>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr

080004e8 <_fini>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr
