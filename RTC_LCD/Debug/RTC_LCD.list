
RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003c68  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a272  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0f  00000000  00000000  0002a312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ae5  00000000  00000000  0002d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2fd  00000000  00000000  00043b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bed8  00000000  00000000  0004fe7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbd52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000dbda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b44 	.word	0x08003b44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b44 	.word	0x08003b44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time (void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x03;
 800058a:	2303      	movs	r3, #3
 800058c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x33;
 800058e:	2333      	movs	r3, #51	; 0x33
 8000590:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000592:	2330      	movs	r3, #48	; 0x30
 8000594:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <set_time+0x6c>)
 80005a6:	f002 f905 	bl	80027b4 <HAL_RTC_SetTime>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <set_time+0x30>
  {
    Error_Handler();
 80005b0:	f000 fa2e 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80005b4:	2304      	movs	r3, #4
 80005b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80005b8:	2304      	movs	r3, #4
 80005ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 80005bc:	2327      	movs	r3, #39	; 0x27
 80005be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80005c0:	2323      	movs	r3, #35	; 0x23
 80005c2:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <set_time+0x6c>)
 80005cc:	f002 f9ea 	bl	80029a4 <HAL_RTC_SetDate>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <set_time+0x56>
  {
    Error_Handler();
 80005d6:	f000 fa1b 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 80005da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80005de:	2101      	movs	r1, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <set_time+0x6c>)
 80005e2:	f002 fddc 	bl	800319e <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 80005e6:	bf00      	nop
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000e0 	.word	0x200000e0

080005f4 <set_alarm>:

void set_alarm (void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
  sAlarm.AlarmTime.Hours = 0x10;
 80005fa:	2310      	movs	r3, #16
 80005fc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x21;
 80005fe:	2321      	movs	r3, #33	; 0x21
 8000600:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 800061e:	2312      	movs	r3, #18
 8000620:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2201      	movs	r2, #1
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <set_alarm+0x54>)
 8000632:	f002 fbb5 	bl	8002da0 <HAL_RTC_SetAlarm_IT>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <set_alarm+0x4c>
  {
   Error_Handler();
 800063c:	f000 f9e8 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000e0 	.word	0x200000e0

0800064c <get_time>:

void get_time(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	4619      	mov	r1, r3
 8000658:	4812      	ldr	r0, [pc, #72]	; (80006a4 <get_time+0x58>)
 800065a:	f002 f945 	bl	80028e8 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	4619      	mov	r1, r3
 8000666:	480f      	ldr	r0, [pc, #60]	; (80006a4 <get_time+0x58>)
 8000668:	f002 fa20 	bl	8002aac <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800066c:	783b      	ldrb	r3, [r7, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	787b      	ldrb	r3, [r7, #1]
 8000672:	4619      	mov	r1, r3
 8000674:	78bb      	ldrb	r3, [r7, #2]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	460b      	mov	r3, r1
 800067a:	490b      	ldr	r1, [pc, #44]	; (80006a8 <get_time+0x5c>)
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <get_time+0x60>)
 800067e:	f002 fdf3 	bl	8003268 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8000682:	7dbb      	ldrb	r3, [r7, #22]
 8000684:	461a      	mov	r2, r3
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	4619      	mov	r1, r3
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <get_time+0x64>)
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <get_time+0x68>)
 8000698:	f002 fde6 	bl	8003268 <siprintf>
}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000e0 	.word	0x200000e0
 80006a8:	08003b5c 	.word	0x08003b5c
 80006ac:	20000100 	.word	0x20000100
 80006b0:	08003b6c 	.word	0x08003b6c
 80006b4:	2000010c 	.word	0x2000010c

080006b8 <display_time>:

//Let's display the time and date on lcd

void display_time (void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80006bc:	2080      	movs	r0, #128	; 0x80
 80006be:	f000 f9ab 	bl	8000a18 <lcd_send_cmd>
	lcd_send_string (time);
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <display_time+0x20>)
 80006c4:	f000 fa18 	bl	8000af8 <lcd_send_string>
	lcd_send_cmd (0xc0);
 80006c8:	20c0      	movs	r0, #192	; 0xc0
 80006ca:	f000 f9a5 	bl	8000a18 <lcd_send_cmd>
	lcd_send_string (date);
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <display_time+0x24>)
 80006d0:	f000 fa12 	bl	8000af8 <lcd_send_string>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000100 	.word	0x20000100
 80006dc:	2000010c 	.word	0x2000010c

080006e0 <to_do_on_alarm>:
{
	alarm = 1;
}

void to_do_on_alarm (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // set led ON
 80006e6:	2201      	movs	r2, #1
 80006e8:	2120      	movs	r1, #32
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <to_do_on_alarm+0x58>)
 80006ec:	f000 fe52 	bl	8001394 <HAL_GPIO_WritePin>
	lcd_send_cmd (0x80);
 80006f0:	2080      	movs	r0, #128	; 0x80
 80006f2:	f000 f991 	bl	8000a18 <lcd_send_cmd>
	lcd_send_string ("SUBSCRIBE TO");
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <to_do_on_alarm+0x5c>)
 80006f8:	f000 f9fe 	bl	8000af8 <lcd_send_string>
	lcd_send_cmd (0xc0);
 80006fc:	20c0      	movs	r0, #192	; 0xc0
 80006fe:	f000 f98b 	bl	8000a18 <lcd_send_cmd>
	lcd_send_string ("this CHANNEL");
 8000702:	480f      	ldr	r0, [pc, #60]	; (8000740 <to_do_on_alarm+0x60>)
 8000704:	f000 f9f8 	bl	8000af8 <lcd_send_string>
	HAL_Delay (3000);
 8000708:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800070c:	f000 fbb4 	bl	8000e78 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	f000 f981 	bl	8000a18 <lcd_send_cmd>
	for (int i=0;i<60;i++)
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e005      	b.n	8000728 <to_do_on_alarm+0x48>
	{
		lcd_send_data (' ');  // clear lcd
 800071c:	2020      	movs	r0, #32
 800071e:	f000 f9ab 	bl	8000a78 <lcd_send_data>
	for (int i=0;i<60;i++)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3301      	adds	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b3b      	cmp	r3, #59	; 0x3b
 800072c:	ddf6      	ble.n	800071c <to_do_on_alarm+0x3c>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40020000 	.word	0x40020000
 800073c:	08003b7c 	.word	0x08003b7c
 8000740:	08003b8c 	.word	0x08003b8c

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fb24 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f82c 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f944 	bl	80009dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000754:	f000 f888 	bl	8000868 <MX_I2C1_Init>
  MX_RTC_Init();
 8000758:	f000 f8b4 	bl	80008c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  lcd_init ();
 800075c:	f000 f9bc 	bl	8000ad8 <lcd_init>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 8000760:	2101      	movs	r1, #1
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <main+0x5c>)
 8000764:	f002 fd35 	bl	80031d2 <HAL_RTCEx_BKUPRead>
 8000768:	4603      	mov	r3, r0
 800076a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800076e:	4293      	cmp	r3, r2
 8000770:	d001      	beq.n	8000776 <main+0x32>
      {
      //   Set the time
        set_time();
 8000772:	f7ff ff07 	bl	8000584 <set_time>
      }

  set_alarm ();
 8000776:	f7ff ff3d 	bl	80005f4 <set_alarm>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  get_time();
 800077a:	f7ff ff67 	bl	800064c <get_time>
	  display_time();
 800077e:	f7ff ff9b 	bl	80006b8 <display_time>
	  HAL_Delay(500);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f000 fb77 	bl	8000e78 <HAL_Delay>

	  if (alarm)
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <main+0x60>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f3      	beq.n	800077a <main+0x36>
	  {
		  to_do_on_alarm();
 8000792:	f7ff ffa5 	bl	80006e0 <to_do_on_alarm>
		  alarm =0;
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <main+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
	  get_time();
 800079c:	e7ed      	b.n	800077a <main+0x36>
 800079e:	bf00      	nop
 80007a0:	200000e0 	.word	0x200000e0
 80007a4:	20000116 	.word	0x20000116

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fd4e 	bl	8003258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <SystemClock_Config+0xb8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <SystemClock_Config+0xb8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <SystemClock_Config+0xbc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <SystemClock_Config+0xbc>)
 80007f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <SystemClock_Config+0xbc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000804:	230a      	movs	r3, #10
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2310      	movs	r3, #16
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fa1f 	bl	8001c60 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000828:	f000 f8f2 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fc82 	bl	8002150 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000852:	f000 f8dd 	bl	8000a10 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C1_Init+0x50>)
 800086e:	4a13      	ldr	r2, [pc, #76]	; (80008bc <MX_I2C1_Init+0x54>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000874:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x58>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_I2C1_Init+0x50>)
 80008a6:	f000 fd8f 	bl	80013c8 <HAL_I2C_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b0:	f000 f8ae 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	40005400 	.word	0x40005400
 80008c0:	000186a0 	.word	0x000186a0

080008c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	; 0x40
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2228      	movs	r2, #40	; 0x28
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fcb7 	bl	8003258 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_RTC_Init+0x110>)
 80008ec:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <MX_RTC_Init+0x114>)
 80008ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_RTC_Init+0x110>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <MX_RTC_Init+0x110>)
 80008f8:	227f      	movs	r2, #127	; 0x7f
 80008fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_RTC_Init+0x110>)
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_RTC_Init+0x110>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <MX_RTC_Init+0x110>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_RTC_Init+0x110>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000914:	482f      	ldr	r0, [pc, #188]	; (80009d4 <MX_RTC_Init+0x110>)
 8000916:	f001 fed7 	bl	80026c8 <HAL_RTC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f876 	bl	8000a10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800093e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	4823      	ldr	r0, [pc, #140]	; (80009d4 <MX_RTC_Init+0x110>)
 8000948:	f001 ff34 	bl	80027b4 <HAL_RTC_SetTime>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000952:	f000 f85d 	bl	8000a10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000956:	2301      	movs	r3, #1
 8000958:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800095c:	2301      	movs	r3, #1
 800095e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000962:	2301      	movs	r3, #1
 8000964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	2201      	movs	r2, #1
 8000974:	4619      	mov	r1, r3
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <MX_RTC_Init+0x110>)
 8000978:	f002 f814 	bl	80029a4 <HAL_RTC_SetDate>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000982:	f000 f845 	bl	8000a10 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000986:	2300      	movs	r3, #0
 8000988:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800098a:	2300      	movs	r3, #0
 800098c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800098e:	2300      	movs	r3, #0
 8000990:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2201      	movs	r2, #1
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_RTC_Init+0x110>)
 80009be:	f002 f8c4 	bl	8002b4a <HAL_RTC_SetAlarm>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80009c8:	f000 f822 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3740      	adds	r7, #64	; 0x40
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000e0 	.word	0x200000e0
 80009d8:	40002800 	.word	0x40002800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_GPIO_Init+0x30>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <MX_GPIO_Init+0x30>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_GPIO_Init+0x30>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x4>
	...

08000a18 <lcd_send_cmd>:


#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f023 030f 	bic.w	r3, r3, #15
 8000a28:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	f043 030c 	orr.w	r3, r3, #12
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	f043 030c 	orr.w	r3, r3, #12
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a58:	f107 0208 	add.w	r2, r7, #8
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2304      	movs	r3, #4
 8000a62:	214e      	movs	r1, #78	; 0x4e
 8000a64:	4803      	ldr	r0, [pc, #12]	; (8000a74 <lcd_send_cmd+0x5c>)
 8000a66:	f000 fdf3 	bl	8001650 <HAL_I2C_Master_Transmit>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000008c 	.word	0x2000008c

08000a78 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f023 030f 	bic.w	r3, r3, #15
 8000a88:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	f043 030d 	orr.w	r3, r3, #13
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f043 0309 	orr.w	r3, r3, #9
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	f043 030d 	orr.w	r3, r3, #13
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	f043 0309 	orr.w	r3, r3, #9
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ab8:	f107 0208 	add.w	r2, r7, #8
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	214e      	movs	r1, #78	; 0x4e
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <lcd_send_data+0x5c>)
 8000ac6:	f000 fdc3 	bl	8001650 <HAL_I2C_Master_Transmit>
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000008c 	.word	0x2000008c

08000ad8 <lcd_init>:

void lcd_init (void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000adc:	2002      	movs	r0, #2
 8000ade:	f7ff ff9b 	bl	8000a18 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000ae2:	2028      	movs	r0, #40	; 0x28
 8000ae4:	f7ff ff98 	bl	8000a18 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f7ff ff95 	bl	8000a18 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000aee:	2080      	movs	r0, #128	; 0x80
 8000af0:	f7ff ff92 	bl	8000a18 <lcd_send_cmd>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000b00:	e006      	b.n	8000b10 <lcd_send_string+0x18>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffb4 	bl	8000a78 <lcd_send_data>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f4      	bne.n	8000b02 <lcd_send_string+0xa>
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_I2C_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <HAL_I2C_MspInit+0x8c>)
 8000bd0:	f000 fa5c 	bl	800108c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_I2C_MspInit+0x88>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400

08000c04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <HAL_RTC_MspInit+0x50>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d111      	bne.n	8000c4c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fc56 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c42:	f7ff fee5 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_RTC_MspInit+0x54>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40002800 	.word	0x40002800
 8000c58:	42470e3c 	.word	0x42470e3c

08000c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <NMI_Handler+0x4>

08000c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <MemManage_Handler+0x4>

08000c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f8c6 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f002 fa90 	bl	8003204 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20020000 	.word	0x20020000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	20000118 	.word	0x20000118
 8000d18:	20000130 	.word	0x20000130

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f002 fa4f 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fce7 	bl	8000744 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d84:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000d88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d8c:	20000130 	.word	0x20000130

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f931 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff feac 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f93b 	bl	8001072 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e14:	f000 f911 	bl	800103a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	2000011c 	.word	0x2000011c

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	2000011c 	.word	0x2000011c

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff0:	d301      	bcc.n	8000ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00f      	b.n	8001016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <SysTick_Config+0x40>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffe:	210f      	movs	r1, #15
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	f7ff ff8e 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x40>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x40>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff47 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5c 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff8e 	bl	8000f78 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb0 	bl	8000fe0 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
 80010a6:	e159      	b.n	800135c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8148 	bne.w	8001356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d130      	bne.n	8001140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 0201 	and.w	r2, r3, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b03      	cmp	r3, #3
 800114a:	d017      	beq.n	800117c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d123      	bne.n	80011d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0203 	and.w	r2, r3, #3
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a2 	beq.w	8001356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122e:	4a52      	ldr	r2, [pc, #328]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a49      	ldr	r2, [pc, #292]	; (800137c <HAL_GPIO_Init+0x2f0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x202>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a48      	ldr	r2, [pc, #288]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x1fe>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x1fa>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a46      	ldr	r2, [pc, #280]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x1f6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a45      	ldr	r2, [pc, #276]	; (800138c <HAL_GPIO_Init+0x300>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x1f2>
 800127a:	2304      	movs	r3, #4
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800127e:	2307      	movs	r3, #7
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x204>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x204>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a24      	ldr	r2, [pc, #144]	; (8001390 <HAL_GPIO_Init+0x304>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_GPIO_Init+0x304>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f aea2 	bls.w	80010a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e12b      	b.n	8001632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fbc0 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800141a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142c:	f001 f848 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a81      	ldr	r2, [pc, #516]	; (800163c <HAL_I2C_Init+0x274>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d807      	bhi.n	800144c <HAL_I2C_Init+0x84>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a80      	ldr	r2, [pc, #512]	; (8001640 <HAL_I2C_Init+0x278>)
 8001440:	4293      	cmp	r3, r2
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e006      	b.n	800145a <HAL_I2C_Init+0x92>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a7d      	ldr	r2, [pc, #500]	; (8001644 <HAL_I2C_Init+0x27c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e7      	b.n	8001632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a78      	ldr	r2, [pc, #480]	; (8001648 <HAL_I2C_Init+0x280>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a6a      	ldr	r2, [pc, #424]	; (800163c <HAL_I2C_Init+0x274>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d802      	bhi.n	800149c <HAL_I2C_Init+0xd4>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	e009      	b.n	80014b0 <HAL_I2C_Init+0xe8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_I2C_Init+0x284>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	3301      	adds	r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	495c      	ldr	r1, [pc, #368]	; (800163c <HAL_I2C_Init+0x274>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d819      	bhi.n	8001504 <HAL_I2C_Init+0x13c>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e59      	subs	r1, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fbb1 f3f3 	udiv	r3, r1, r3
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <HAL_I2C_Init+0x138>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e59      	subs	r1, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	e051      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001500:	2304      	movs	r3, #4
 8001502:	e04f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_I2C_Init+0x168>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e012      	b.n	8001556 <HAL_I2C_Init+0x18e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x196>
 800155a:	2301      	movs	r3, #1
 800155c:	e022      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10e      	bne.n	8001584 <HAL_I2C_Init+0x1bc>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1e58      	subs	r0, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	440b      	add	r3, r1
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	e00f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	0099      	lsls	r1, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6809      	ldr	r1, [r1, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6911      	ldr	r1, [r2, #16]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68d2      	ldr	r2, [r2, #12]
 80015de:	4311      	orrs	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000186a0 	.word	0x000186a0
 8001640:	001e847f 	.word	0x001e847f
 8001644:	003d08ff 	.word	0x003d08ff
 8001648:	431bde83 	.word	0x431bde83
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	817b      	strh	r3, [r7, #10]
 8001660:	4613      	mov	r3, r2
 8001662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff fbfc 	bl	8000e60 <HAL_GetTick>
 8001668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b20      	cmp	r3, #32
 8001674:	f040 80e0 	bne.w	8001838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2319      	movs	r3, #25
 800167e:	2201      	movs	r2, #1
 8001680:	4970      	ldr	r1, [pc, #448]	; (8001844 <HAL_I2C_Master_Transmit+0x1f4>)
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f964 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
 8001690:	e0d3      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_I2C_Master_Transmit+0x50>
 800169c:	2302      	movs	r3, #2
 800169e:	e0cc      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d007      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2221      	movs	r2, #33	; 0x21
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2210      	movs	r2, #16
 80016e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	893a      	ldrh	r2, [r7, #8]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_I2C_Master_Transmit+0x1f8>)
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001708:	8979      	ldrh	r1, [r7, #10]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f89c 	bl	800184c <I2C_MasterRequestWrite>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e08d      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001734:	e066      	b.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6a39      	ldr	r1, [r7, #32]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f9de 	bl	8001afc <I2C_WaitOnTXEFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00d      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b04      	cmp	r3, #4
 800174c:	d107      	bne.n	800175e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e06b      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	3b01      	subs	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b04      	cmp	r3, #4
 800179e:	d11b      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d017      	beq.n	80017d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	781a      	ldrb	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6a39      	ldr	r1, [r7, #32]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f9ce 	bl	8001b7e <I2C_WaitOnBTFFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00d      	beq.n	8001804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d107      	bne.n	8001800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01a      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b00      	cmp	r3, #0
 800180a:	d194      	bne.n	8001736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	00100002 	.word	0x00100002
 8001848:	ffff0000 	.word	0xffff0000

0800184c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	460b      	mov	r3, r1
 800185a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b08      	cmp	r3, #8
 8001866:	d006      	beq.n	8001876 <I2C_MasterRequestWrite+0x2a>
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d003      	beq.n	8001876 <I2C_MasterRequestWrite+0x2a>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001874:	d108      	bne.n	8001888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e00b      	b.n	80018a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	2b12      	cmp	r3, #18
 800188e:	d107      	bne.n	80018a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f84f 	bl	8001950 <I2C_WaitOnFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c6:	d103      	bne.n	80018d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e035      	b.n	8001940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018dc:	d108      	bne.n	80018f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	e01b      	b.n	8001928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018f0:	897b      	ldrh	r3, [r7, #10]
 80018f2:	11db      	asrs	r3, r3, #7
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f003 0306 	and.w	r3, r3, #6
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f063 030f 	orn	r3, r3, #15
 8001900:	b2da      	uxtb	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <I2C_MasterRequestWrite+0xfc>)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f875 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e010      	b.n	8001940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800191e:	897b      	ldrh	r3, [r7, #10]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <I2C_MasterRequestWrite+0x100>)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f865 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	00010008 	.word	0x00010008
 800194c:	00010002 	.word	0x00010002

08001950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	4613      	mov	r3, r2
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001960:	e025      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001968:	d021      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7ff fa79 	bl	8000e60 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d116      	bne.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e023      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10d      	bne.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4013      	ands	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf0c      	ite	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	2300      	movne	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	e00c      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4013      	ands	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0b6      	beq.n	8001962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a0c:	e051      	b.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d123      	bne.n	8001a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e046      	b.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a6c:	d021      	beq.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a6e:	f7ff f9f7 	bl	8000e60 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d302      	bcc.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d116      	bne.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0220 	orr.w	r2, r3, #32
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e020      	b.n	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d10c      	bne.n	8001ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e00b      	b.n	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d18d      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b08:	e02d      	b.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f878 	bl	8001c00 <I2C_IsAcknowledgeFailed>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e02d      	b.n	8001b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d021      	beq.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff f99d 	bl	8000e60 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d116      	bne.n	8001b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f043 0220 	orr.w	r2, r3, #32
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	2b80      	cmp	r3, #128	; 0x80
 8001b72:	d1ca      	bne.n	8001b0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b8a:	e02d      	b.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f837 	bl	8001c00 <I2C_IsAcknowledgeFailed>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e02d      	b.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba2:	d021      	beq.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f95c 	bl	8000e60 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d1ca      	bne.n	8001b8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d11b      	bne.n	8001c50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e267      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d075      	beq.n	8001d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d00c      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b85      	ldr	r3, [pc, #532]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d112      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca2:	d10b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d05b      	beq.n	8001d68 <HAL_RCC_OscConfig+0x108>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d157      	bne.n	8001d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e242      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x74>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e01d      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x98>
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6f      	ldr	r2, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a68      	ldr	r2, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f8a2 	bl	8000e60 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f89e 	bl	8000e60 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e207      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f88e 	bl	8000e60 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f88a 	bl	8000e60 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1f3      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0xe8>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d063      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00b      	beq.n	8001d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1c7      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	e03a      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f843 	bl	8000e60 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dde:	f7ff f83f 	bl	8000e60 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e1a8      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x244>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f822 	bl	8000e60 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff f81e 	bl	8000e60 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e187      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d036      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f802 	bl	8000e60 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7fe fffe 	bl	8000e60 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e167      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x200>
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0x248>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7fe ffeb 	bl	8000e60 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00e      	b.n	8001eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7fe ffe7 	bl	8000e60 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d907      	bls.n	8001eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e150      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ea      	bne.n	8001e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8097 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b74      	ldr	r3, [pc, #464]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a73      	ldr	r2, [pc, #460]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe ffa7 	bl	8000e60 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe ffa3 	bl	8000e60 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e10c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x474>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2ea>
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x30c>
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5e      	ldr	r2, [pc, #376]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a5b      	ldr	r2, [pc, #364]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0x324>
 8001f6c:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a57      	ldr	r2, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
 8001f78:	4b55      	ldr	r3, [pc, #340]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d015      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7fe ff68 	bl	8000e60 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f94:	f7fe ff64 	bl	8000e60 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0cb      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ee      	beq.n	8001f94 <HAL_RCC_OscConfig+0x334>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe ff52 	bl	8000e60 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc0:	f7fe ff4e 	bl	8000e60 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0b5      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ee      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe8:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a1 	beq.w	8002140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d05c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d141      	bne.n	8002096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe ff22 	bl	8000e60 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe ff1e 	bl	8000e60 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e087      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	019b      	lsls	r3, r3, #6
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	491b      	ldr	r1, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fef7 	bl	8000e60 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe fef3 	bl	8000e60 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e05c      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x416>
 8002094:	e054      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_OscConfig+0x478>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fee0 	bl	8000e60 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fedc 	bl	8000e60 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e045      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x444>
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e038      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4ec>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d028      	beq.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d121      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d11a      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0cc      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b68      	ldr	r3, [pc, #416]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d90c      	bls.n	800218c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d044      	beq.n	8002270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d119      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	2b03      	cmp	r3, #3
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e067      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f023 0203 	bic.w	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4934      	ldr	r1, [pc, #208]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002240:	f7fe fe0e 	bl	8000e60 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	e00a      	b.n	800225e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002248:	f7fe fe0a 	bl	8000e60 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	; 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e04f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 020c 	and.w	r2, r3, #12
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	429a      	cmp	r2, r3
 800226e:	d1eb      	bne.n	8002248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d20c      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	490a      	ldr	r1, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	5ccb      	ldrb	r3, [r1, r3]
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fd6e 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00
 800230c:	40023800 	.word	0x40023800
 8002310:	08003b9c 	.word	0x08003b9c
 8002314:	20000000 	.word	0x20000000
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002320:	b090      	sub	sp, #64	; 0x40
 8002322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d00d      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002340:	2b08      	cmp	r3, #8
 8002342:	f200 80a1 	bhi.w	8002488 <HAL_RCC_GetSysClockFreq+0x16c>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x34>
 800234a:	2b04      	cmp	r3, #4
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x3a>
 800234e:	e09b      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002354:	e09b      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002356:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800235a:	e098      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002364:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002366:	4b4d      	ldr	r3, [pc, #308]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d028      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	2200      	movs	r2, #0
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	627a      	str	r2, [r7, #36]	; 0x24
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002384:	2100      	movs	r1, #0
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002388:	fb03 f201 	mul.w	r2, r3, r1
 800238c:	2300      	movs	r3, #0
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	4413      	add	r3, r2
 8002394:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002396:	fba0 1202 	umull	r1, r2, r0, r2
 800239a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800239c:	460a      	mov	r2, r1
 800239e:	62ba      	str	r2, [r7, #40]	; 0x28
 80023a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a2:	4413      	add	r3, r2
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a8:	2200      	movs	r2, #0
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	61fa      	str	r2, [r7, #28]
 80023ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023b6:	f7fd ff63 	bl	8000280 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4613      	mov	r3, r2
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c2:	e053      	b.n	800246c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	2200      	movs	r2, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	617a      	str	r2, [r7, #20]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023d6:	f04f 0b00 	mov.w	fp, #0
 80023da:	4652      	mov	r2, sl
 80023dc:	465b      	mov	r3, fp
 80023de:	f04f 0000 	mov.w	r0, #0
 80023e2:	f04f 0100 	mov.w	r1, #0
 80023e6:	0159      	lsls	r1, r3, #5
 80023e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ec:	0150      	lsls	r0, r2, #5
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	ebb2 080a 	subs.w	r8, r2, sl
 80023f6:	eb63 090b 	sbc.w	r9, r3, fp
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002406:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800240a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800240e:	ebb2 0408 	subs.w	r4, r2, r8
 8002412:	eb63 0509 	sbc.w	r5, r3, r9
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	00eb      	lsls	r3, r5, #3
 8002420:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002424:	00e2      	lsls	r2, r4, #3
 8002426:	4614      	mov	r4, r2
 8002428:	461d      	mov	r5, r3
 800242a:	eb14 030a 	adds.w	r3, r4, sl
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	eb45 030b 	adc.w	r3, r5, fp
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002442:	4629      	mov	r1, r5
 8002444:	028b      	lsls	r3, r1, #10
 8002446:	4621      	mov	r1, r4
 8002448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800244c:	4621      	mov	r1, r4
 800244e:	028a      	lsls	r2, r1, #10
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	2200      	movs	r2, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002460:	f7fd ff0e 	bl	8000280 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	3301      	adds	r3, #1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800247c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002490:	4618      	mov	r0, r3
 8002492:	3740      	adds	r7, #64	; 0x40
 8002494:	46bd      	mov	sp, r7
 8002496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	017d7840 	.word	0x017d7840

080024a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a9b      	lsrs	r3, r3, #10
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08003bac 	.word	0x08003bac

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d038      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002516:	f7fe fca3 	bl	8000e60 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800251e:	f7fe fc9f 	bl	8000e60 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0bd      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002530:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	071b      	lsls	r3, r3, #28
 800254e:	495a      	ldr	r1, [pc, #360]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fc80 	bl	8000e60 <HAL_GetTick>
 8002560:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002564:	f7fe fc7c 	bl	8000e60 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e09a      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8083 	beq.w	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a42      	ldr	r2, [pc, #264]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fc52 	bl	8000e60 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025c0:	f7fe fc4e 	bl	8000e60 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e06c      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d02f      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d028      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002604:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002612:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d114      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fc1c 	bl	8000e60 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe fc18 	bl	8000e60 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e034      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ee      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800265a:	d10d      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	4911      	ldr	r1, [pc, #68]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
 8002676:	e005      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002682:	6093      	str	r3, [r2, #8]
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7d1a      	ldrb	r2, [r3, #20]
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	42470068 	.word	0x42470068
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42470e40 	.word	0x42470e40
 80026c4:	424711e0 	.word	0x424711e0

080026c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e066      	b.n	80027ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7f5b      	ldrb	r3, [r3, #29]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fa88 	bl	8000c04 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	22ca      	movs	r2, #202	; 0xca
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2253      	movs	r2, #83	; 0x53
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fcb2 	bl	8003074 <RTC_EnterInitMode>
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12c      	bne.n	8002774 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68d2      	ldr	r2, [r2, #12]
 8002754:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fcb9 	bl	80030e2 <RTC_ExitInitMode>
 8002770:	4603      	mov	r3, r0
 8002772:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22ff      	movs	r2, #255	; 0xff
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	7f1b      	ldrb	r3, [r3, #28]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_RTC_SetTime+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e087      	b.n	80028e0 <HAL_RTC_SetTime+0x12c>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2202      	movs	r2, #2
 80027da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d126      	bne.n	8002830 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fc96 	bl	800312c <RTC_ByteToBcd2>
 8002800:	4603      	mov	r3, r0
 8002802:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	785b      	ldrb	r3, [r3, #1]
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fc8f 	bl	800312c <RTC_ByteToBcd2>
 800280e:	4603      	mov	r3, r0
 8002810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002812:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	789b      	ldrb	r3, [r3, #2]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fc87 	bl	800312c <RTC_ByteToBcd2>
 800281e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002820:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	78db      	ldrb	r3, [r3, #3]
 8002828:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e018      	b.n	8002862 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002850:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002856:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	78db      	ldrb	r3, [r3, #3]
 800285c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	22ca      	movs	r2, #202	; 0xca
 8002868:	625a      	str	r2, [r3, #36]	; 0x24
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2253      	movs	r2, #83	; 0x53
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fbfe 	bl	8003074 <RTC_EnterInitMode>
 8002878:	4603      	mov	r3, r0
 800287a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d120      	bne.n	80028c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800288c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002890:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fc11 	bl	80030e2 <RTC_ExitInitMode>
 80028c0:	4603      	mov	r3, r0
 80028c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]

  return status;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd90      	pop	{r4, r7, pc}

080028e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800291a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800291e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	0d9b      	lsrs	r3, r3, #22
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11a      	bne.n	800299a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fbfc 	bl	8003166 <RTC_Bcd2ToByte>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fbf3 	bl	8003166 <RTC_Bcd2ToByte>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	789b      	ldrb	r3, [r3, #2]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fbea 	bl	8003166 <RTC_Bcd2ToByte>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	7f1b      	ldrb	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_RTC_SetDate+0x1c>
 80029bc:	2302      	movs	r3, #2
 80029be:	e071      	b.n	8002aa4 <HAL_RTC_SetDate+0x100>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_RTC_SetDate+0x4c>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	785b      	ldrb	r3, [r3, #1]
 80029e2:	f023 0310 	bic.w	r3, r3, #16
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	330a      	adds	r3, #10
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d11c      	bne.n	8002a30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	78db      	ldrb	r3, [r3, #3]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fb96 	bl	800312c <RTC_ByteToBcd2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fb8f 	bl	800312c <RTC_ByteToBcd2>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	789b      	ldrb	r3, [r3, #2]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fb87 	bl	800312c <RTC_ByteToBcd2>
 8002a1e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a20:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e00e      	b.n	8002a4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	78db      	ldrb	r3, [r3, #3]
 8002a34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a3c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	22ca      	movs	r2, #202	; 0xca
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2253      	movs	r2, #83	; 0x53
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fb08 	bl	8003074 <RTC_EnterInitMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fb2f 	bl	80030e2 <RTC_ExitInitMode>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	22ff      	movs	r2, #255	; 0xff
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]

  return status;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd90      	pop	{r4, r7, pc}

08002aac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ac6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002aca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11a      	bne.n	8002b40 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	78db      	ldrb	r3, [r3, #3]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fb29 	bl	8003166 <RTC_Bcd2ToByte>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fb20 	bl	8003166 <RTC_Bcd2ToByte>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	789b      	ldrb	r3, [r3, #2]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fb17 	bl	8003166 <RTC_Bcd2ToByte>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b089      	sub	sp, #36	; 0x24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	7f1b      	ldrb	r3, [r3, #28]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_RTC_SetAlarm+0x24>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e113      	b.n	8002d96 <HAL_RTC_SetAlarm+0x24c>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d137      	bne.n	8002bf0 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fac7 	bl	800312c <RTC_ByteToBcd2>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fac0 	bl	800312c <RTC_ByteToBcd2>
 8002bac:	4603      	mov	r3, r0
 8002bae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bb0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	789b      	ldrb	r3, [r3, #2]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fab8 	bl	800312c <RTC_ByteToBcd2>
 8002bbc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002bbe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	78db      	ldrb	r3, [r3, #3]
 8002bc6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002bc8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 faaa 	bl	800312c <RTC_ByteToBcd2>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002bdc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002be4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	e023      	b.n	8002c38 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c10:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	78db      	ldrb	r3, [r3, #3]
 8002c1c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c2e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	22ca      	movs	r2, #202	; 0xca
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2253      	movs	r2, #83	; 0x53
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5c:	d148      	bne.n	8002cf0 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c7c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002c8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe f8e6 	bl	8000e60 <HAL_GetTick>
 8002c94:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c96:	e013      	b.n	8002cc0 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c98:	f7fe f8e2 	bl	8000e60 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca6:	d90b      	bls.n	8002cc0 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e06a      	b.n	8002d96 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0e4      	beq.n	8002c98 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	e047      	b.n	8002d80 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cfe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d22:	f7fe f89d 	bl	8000e60 <HAL_GetTick>
 8002d26:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d28:	e013      	b.n	8002d52 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d2a:	f7fe f899 	bl	8000e60 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d38:	d90b      	bls.n	8002d52 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2203      	movs	r2, #3
 8002d46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e021      	b.n	8002d96 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0e4      	beq.n	8002d2a <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	22ff      	movs	r2, #255	; 0xff
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3724      	adds	r7, #36	; 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
	...

08002da0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002dac:	4b9a      	ldr	r3, [pc, #616]	; (8003018 <HAL_RTC_SetAlarm_IT+0x278>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a9a      	ldr	r2, [pc, #616]	; (800301c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0adb      	lsrs	r3, r3, #11
 8002db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	7f1b      	ldrb	r3, [r3, #28]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RTC_SetAlarm_IT+0x36>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e11c      	b.n	8003010 <HAL_RTC_SetAlarm_IT+0x270>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2202      	movs	r2, #2
 8002de0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d137      	bne.n	8002e58 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f993 	bl	800312c <RTC_ByteToBcd2>
 8002e06:	4603      	mov	r3, r0
 8002e08:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f98c 	bl	800312c <RTC_ByteToBcd2>
 8002e14:	4603      	mov	r3, r0
 8002e16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e18:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f984 	bl	800312c <RTC_ByteToBcd2>
 8002e24:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e26:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002e30:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f976 	bl	800312c <RTC_ByteToBcd2>
 8002e40:	4603      	mov	r3, r0
 8002e42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e023      	b.n	8002ea0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e78:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002e7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002e86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002e90:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002e96:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	22ca      	movs	r2, #202	; 0xca
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2253      	movs	r2, #83	; 0x53
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d141      	bne.n	8002f4a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002ee6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	617a      	str	r2, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2203      	movs	r2, #3
 8002efe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e082      	b.n	8003010 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0e7      	beq.n	8002ee8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	e04b      	b.n	8002fe2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f58:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f6a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RTC_SetAlarm_IT+0x278>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2a      	ldr	r2, [pc, #168]	; (800301c <HAL_RTC_SetAlarm_IT+0x27c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	617a      	str	r2, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2203      	movs	r2, #3
 8002f98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e035      	b.n	8003010 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0e7      	beq.n	8002f82 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_RTC_SetAlarm_IT+0x280>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_RTC_SetAlarm_IT+0x280>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002fee:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RTC_SetAlarm_IT+0x280>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <HAL_RTC_SetAlarm_IT+0x280>)
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3724      	adds	r7, #36	; 0x24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	20000000 	.word	0x20000000
 800301c:	10624dd3 	.word	0x10624dd3
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800303e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003040:	f7fd ff0e 	bl	8000e60 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003046:	e009      	b.n	800305c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003048:	f7fd ff0a 	bl	8000e60 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003056:	d901      	bls.n	800305c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e007      	b.n	800306c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d122      	bne.n	80030d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030a2:	f7fd fedd 	bl	8000e60 <HAL_GetTick>
 80030a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030a8:	e00c      	b.n	80030c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030aa:	f7fd fed9 	bl	8000e60 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b8:	d904      	bls.n	80030c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <RTC_EnterInitMode+0x64>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d1e8      	bne.n	80030aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff89 	bl	8003024 <HAL_RTC_WaitForSynchro>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2204      	movs	r2, #4
 800311c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800313a:	e005      	b.n	8003148 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	3301      	adds	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	3b0a      	subs	r3, #10
 8003146:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	2b09      	cmp	r3, #9
 800314c:	d8f6      	bhi.n	800313c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	b2da      	uxtb	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	4313      	orrs	r3, r2
 8003158:	b2db      	uxtb	r3, r3
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	b2da      	uxtb	r2, r3
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	4413      	add	r3, r2
 8003190:	b2db      	uxtb	r3, r3
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3350      	adds	r3, #80	; 0x50
 80031b4:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3350      	adds	r3, #80	; 0x50
 80031e6:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	2000000c 	.word	0x2000000c

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	4d0d      	ldr	r5, [pc, #52]	; (8003248 <__libc_init_array+0x38>)
 8003214:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	2600      	movs	r6, #0
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	4d0b      	ldr	r5, [pc, #44]	; (8003250 <__libc_init_array+0x40>)
 8003222:	4c0c      	ldr	r4, [pc, #48]	; (8003254 <__libc_init_array+0x44>)
 8003224:	f000 fc8e 	bl	8003b44 <_init>
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	2600      	movs	r6, #0
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003bf0 	.word	0x08003bf0
 800324c:	08003bf0 	.word	0x08003bf0
 8003250:	08003bf0 	.word	0x08003bf0
 8003254:	08003bf4 	.word	0x08003bf4

08003258 <memset>:
 8003258:	4402      	add	r2, r0
 800325a:	4603      	mov	r3, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	d100      	bne.n	8003262 <memset+0xa>
 8003260:	4770      	bx	lr
 8003262:	f803 1b01 	strb.w	r1, [r3], #1
 8003266:	e7f9      	b.n	800325c <memset+0x4>

08003268 <siprintf>:
 8003268:	b40e      	push	{r1, r2, r3}
 800326a:	b500      	push	{lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	9002      	str	r0, [sp, #8]
 8003272:	9006      	str	r0, [sp, #24]
 8003274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003278:	4809      	ldr	r0, [pc, #36]	; (80032a0 <siprintf+0x38>)
 800327a:	9107      	str	r1, [sp, #28]
 800327c:	9104      	str	r1, [sp, #16]
 800327e:	4909      	ldr	r1, [pc, #36]	; (80032a4 <siprintf+0x3c>)
 8003280:	f853 2b04 	ldr.w	r2, [r3], #4
 8003284:	9105      	str	r1, [sp, #20]
 8003286:	6800      	ldr	r0, [r0, #0]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	a902      	add	r1, sp, #8
 800328c:	f000 f868 	bl	8003360 <_svfiprintf_r>
 8003290:	9b02      	ldr	r3, [sp, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	b01c      	add	sp, #112	; 0x70
 8003298:	f85d eb04 	ldr.w	lr, [sp], #4
 800329c:	b003      	add	sp, #12
 800329e:	4770      	bx	lr
 80032a0:	2000000c 	.word	0x2000000c
 80032a4:	ffff0208 	.word	0xffff0208

080032a8 <__ssputs_r>:
 80032a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	688e      	ldr	r6, [r1, #8]
 80032ae:	429e      	cmp	r6, r3
 80032b0:	4682      	mov	sl, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	4690      	mov	r8, r2
 80032b6:	461f      	mov	r7, r3
 80032b8:	d838      	bhi.n	800332c <__ssputs_r+0x84>
 80032ba:	898a      	ldrh	r2, [r1, #12]
 80032bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c0:	d032      	beq.n	8003328 <__ssputs_r+0x80>
 80032c2:	6825      	ldr	r5, [r4, #0]
 80032c4:	6909      	ldr	r1, [r1, #16]
 80032c6:	eba5 0901 	sub.w	r9, r5, r1
 80032ca:	6965      	ldr	r5, [r4, #20]
 80032cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032d4:	3301      	adds	r3, #1
 80032d6:	444b      	add	r3, r9
 80032d8:	106d      	asrs	r5, r5, #1
 80032da:	429d      	cmp	r5, r3
 80032dc:	bf38      	it	cc
 80032de:	461d      	movcc	r5, r3
 80032e0:	0553      	lsls	r3, r2, #21
 80032e2:	d531      	bpl.n	8003348 <__ssputs_r+0xa0>
 80032e4:	4629      	mov	r1, r5
 80032e6:	f000 fb63 	bl	80039b0 <_malloc_r>
 80032ea:	4606      	mov	r6, r0
 80032ec:	b950      	cbnz	r0, 8003304 <__ssputs_r+0x5c>
 80032ee:	230c      	movs	r3, #12
 80032f0:	f8ca 3000 	str.w	r3, [sl]
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	6921      	ldr	r1, [r4, #16]
 8003306:	464a      	mov	r2, r9
 8003308:	f000 fabe 	bl	8003888 <memcpy>
 800330c:	89a3      	ldrh	r3, [r4, #12]
 800330e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003316:	81a3      	strh	r3, [r4, #12]
 8003318:	6126      	str	r6, [r4, #16]
 800331a:	6165      	str	r5, [r4, #20]
 800331c:	444e      	add	r6, r9
 800331e:	eba5 0509 	sub.w	r5, r5, r9
 8003322:	6026      	str	r6, [r4, #0]
 8003324:	60a5      	str	r5, [r4, #8]
 8003326:	463e      	mov	r6, r7
 8003328:	42be      	cmp	r6, r7
 800332a:	d900      	bls.n	800332e <__ssputs_r+0x86>
 800332c:	463e      	mov	r6, r7
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	4632      	mov	r2, r6
 8003332:	4641      	mov	r1, r8
 8003334:	f000 fab6 	bl	80038a4 <memmove>
 8003338:	68a3      	ldr	r3, [r4, #8]
 800333a:	1b9b      	subs	r3, r3, r6
 800333c:	60a3      	str	r3, [r4, #8]
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	4433      	add	r3, r6
 8003342:	6023      	str	r3, [r4, #0]
 8003344:	2000      	movs	r0, #0
 8003346:	e7db      	b.n	8003300 <__ssputs_r+0x58>
 8003348:	462a      	mov	r2, r5
 800334a:	f000 fba5 	bl	8003a98 <_realloc_r>
 800334e:	4606      	mov	r6, r0
 8003350:	2800      	cmp	r0, #0
 8003352:	d1e1      	bne.n	8003318 <__ssputs_r+0x70>
 8003354:	6921      	ldr	r1, [r4, #16]
 8003356:	4650      	mov	r0, sl
 8003358:	f000 fabe 	bl	80038d8 <_free_r>
 800335c:	e7c7      	b.n	80032ee <__ssputs_r+0x46>
	...

08003360 <_svfiprintf_r>:
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	4698      	mov	r8, r3
 8003366:	898b      	ldrh	r3, [r1, #12]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	b09d      	sub	sp, #116	; 0x74
 800336c:	4607      	mov	r7, r0
 800336e:	460d      	mov	r5, r1
 8003370:	4614      	mov	r4, r2
 8003372:	d50e      	bpl.n	8003392 <_svfiprintf_r+0x32>
 8003374:	690b      	ldr	r3, [r1, #16]
 8003376:	b963      	cbnz	r3, 8003392 <_svfiprintf_r+0x32>
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	f000 fb19 	bl	80039b0 <_malloc_r>
 800337e:	6028      	str	r0, [r5, #0]
 8003380:	6128      	str	r0, [r5, #16]
 8003382:	b920      	cbnz	r0, 800338e <_svfiprintf_r+0x2e>
 8003384:	230c      	movs	r3, #12
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800338c:	e0d1      	b.n	8003532 <_svfiprintf_r+0x1d2>
 800338e:	2340      	movs	r3, #64	; 0x40
 8003390:	616b      	str	r3, [r5, #20]
 8003392:	2300      	movs	r3, #0
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
 8003396:	2320      	movs	r3, #32
 8003398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800339c:	f8cd 800c 	str.w	r8, [sp, #12]
 80033a0:	2330      	movs	r3, #48	; 0x30
 80033a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800354c <_svfiprintf_r+0x1ec>
 80033a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033aa:	f04f 0901 	mov.w	r9, #1
 80033ae:	4623      	mov	r3, r4
 80033b0:	469a      	mov	sl, r3
 80033b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033b6:	b10a      	cbz	r2, 80033bc <_svfiprintf_r+0x5c>
 80033b8:	2a25      	cmp	r2, #37	; 0x25
 80033ba:	d1f9      	bne.n	80033b0 <_svfiprintf_r+0x50>
 80033bc:	ebba 0b04 	subs.w	fp, sl, r4
 80033c0:	d00b      	beq.n	80033da <_svfiprintf_r+0x7a>
 80033c2:	465b      	mov	r3, fp
 80033c4:	4622      	mov	r2, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	4638      	mov	r0, r7
 80033ca:	f7ff ff6d 	bl	80032a8 <__ssputs_r>
 80033ce:	3001      	adds	r0, #1
 80033d0:	f000 80aa 	beq.w	8003528 <_svfiprintf_r+0x1c8>
 80033d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033d6:	445a      	add	r2, fp
 80033d8:	9209      	str	r2, [sp, #36]	; 0x24
 80033da:	f89a 3000 	ldrb.w	r3, [sl]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a2 	beq.w	8003528 <_svfiprintf_r+0x1c8>
 80033e4:	2300      	movs	r3, #0
 80033e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ee:	f10a 0a01 	add.w	sl, sl, #1
 80033f2:	9304      	str	r3, [sp, #16]
 80033f4:	9307      	str	r3, [sp, #28]
 80033f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033fa:	931a      	str	r3, [sp, #104]	; 0x68
 80033fc:	4654      	mov	r4, sl
 80033fe:	2205      	movs	r2, #5
 8003400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003404:	4851      	ldr	r0, [pc, #324]	; (800354c <_svfiprintf_r+0x1ec>)
 8003406:	f7fc feeb 	bl	80001e0 <memchr>
 800340a:	9a04      	ldr	r2, [sp, #16]
 800340c:	b9d8      	cbnz	r0, 8003446 <_svfiprintf_r+0xe6>
 800340e:	06d0      	lsls	r0, r2, #27
 8003410:	bf44      	itt	mi
 8003412:	2320      	movmi	r3, #32
 8003414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003418:	0711      	lsls	r1, r2, #28
 800341a:	bf44      	itt	mi
 800341c:	232b      	movmi	r3, #43	; 0x2b
 800341e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003422:	f89a 3000 	ldrb.w	r3, [sl]
 8003426:	2b2a      	cmp	r3, #42	; 0x2a
 8003428:	d015      	beq.n	8003456 <_svfiprintf_r+0xf6>
 800342a:	9a07      	ldr	r2, [sp, #28]
 800342c:	4654      	mov	r4, sl
 800342e:	2000      	movs	r0, #0
 8003430:	f04f 0c0a 	mov.w	ip, #10
 8003434:	4621      	mov	r1, r4
 8003436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800343a:	3b30      	subs	r3, #48	; 0x30
 800343c:	2b09      	cmp	r3, #9
 800343e:	d94e      	bls.n	80034de <_svfiprintf_r+0x17e>
 8003440:	b1b0      	cbz	r0, 8003470 <_svfiprintf_r+0x110>
 8003442:	9207      	str	r2, [sp, #28]
 8003444:	e014      	b.n	8003470 <_svfiprintf_r+0x110>
 8003446:	eba0 0308 	sub.w	r3, r0, r8
 800344a:	fa09 f303 	lsl.w	r3, r9, r3
 800344e:	4313      	orrs	r3, r2
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	46a2      	mov	sl, r4
 8003454:	e7d2      	b.n	80033fc <_svfiprintf_r+0x9c>
 8003456:	9b03      	ldr	r3, [sp, #12]
 8003458:	1d19      	adds	r1, r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	9103      	str	r1, [sp, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfbb      	ittet	lt
 8003462:	425b      	neglt	r3, r3
 8003464:	f042 0202 	orrlt.w	r2, r2, #2
 8003468:	9307      	strge	r3, [sp, #28]
 800346a:	9307      	strlt	r3, [sp, #28]
 800346c:	bfb8      	it	lt
 800346e:	9204      	strlt	r2, [sp, #16]
 8003470:	7823      	ldrb	r3, [r4, #0]
 8003472:	2b2e      	cmp	r3, #46	; 0x2e
 8003474:	d10c      	bne.n	8003490 <_svfiprintf_r+0x130>
 8003476:	7863      	ldrb	r3, [r4, #1]
 8003478:	2b2a      	cmp	r3, #42	; 0x2a
 800347a:	d135      	bne.n	80034e8 <_svfiprintf_r+0x188>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	9203      	str	r2, [sp, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	bfb8      	it	lt
 8003488:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800348c:	3402      	adds	r4, #2
 800348e:	9305      	str	r3, [sp, #20]
 8003490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800355c <_svfiprintf_r+0x1fc>
 8003494:	7821      	ldrb	r1, [r4, #0]
 8003496:	2203      	movs	r2, #3
 8003498:	4650      	mov	r0, sl
 800349a:	f7fc fea1 	bl	80001e0 <memchr>
 800349e:	b140      	cbz	r0, 80034b2 <_svfiprintf_r+0x152>
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	eba0 000a 	sub.w	r0, r0, sl
 80034a6:	fa03 f000 	lsl.w	r0, r3, r0
 80034aa:	9b04      	ldr	r3, [sp, #16]
 80034ac:	4303      	orrs	r3, r0
 80034ae:	3401      	adds	r4, #1
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4826      	ldr	r0, [pc, #152]	; (8003550 <_svfiprintf_r+0x1f0>)
 80034b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034bc:	2206      	movs	r2, #6
 80034be:	f7fc fe8f 	bl	80001e0 <memchr>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d038      	beq.n	8003538 <_svfiprintf_r+0x1d8>
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <_svfiprintf_r+0x1f4>)
 80034c8:	bb1b      	cbnz	r3, 8003512 <_svfiprintf_r+0x1b2>
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	3307      	adds	r3, #7
 80034ce:	f023 0307 	bic.w	r3, r3, #7
 80034d2:	3308      	adds	r3, #8
 80034d4:	9303      	str	r3, [sp, #12]
 80034d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d8:	4433      	add	r3, r6
 80034da:	9309      	str	r3, [sp, #36]	; 0x24
 80034dc:	e767      	b.n	80033ae <_svfiprintf_r+0x4e>
 80034de:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e2:	460c      	mov	r4, r1
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7a5      	b.n	8003434 <_svfiprintf_r+0xd4>
 80034e8:	2300      	movs	r3, #0
 80034ea:	3401      	adds	r4, #1
 80034ec:	9305      	str	r3, [sp, #20]
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0c0a 	mov.w	ip, #10
 80034f4:	4620      	mov	r0, r4
 80034f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fa:	3a30      	subs	r2, #48	; 0x30
 80034fc:	2a09      	cmp	r2, #9
 80034fe:	d903      	bls.n	8003508 <_svfiprintf_r+0x1a8>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0c5      	beq.n	8003490 <_svfiprintf_r+0x130>
 8003504:	9105      	str	r1, [sp, #20]
 8003506:	e7c3      	b.n	8003490 <_svfiprintf_r+0x130>
 8003508:	fb0c 2101 	mla	r1, ip, r1, r2
 800350c:	4604      	mov	r4, r0
 800350e:	2301      	movs	r3, #1
 8003510:	e7f0      	b.n	80034f4 <_svfiprintf_r+0x194>
 8003512:	ab03      	add	r3, sp, #12
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462a      	mov	r2, r5
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <_svfiprintf_r+0x1f8>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	4638      	mov	r0, r7
 800351e:	f3af 8000 	nop.w
 8003522:	1c42      	adds	r2, r0, #1
 8003524:	4606      	mov	r6, r0
 8003526:	d1d6      	bne.n	80034d6 <_svfiprintf_r+0x176>
 8003528:	89ab      	ldrh	r3, [r5, #12]
 800352a:	065b      	lsls	r3, r3, #25
 800352c:	f53f af2c 	bmi.w	8003388 <_svfiprintf_r+0x28>
 8003530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003532:	b01d      	add	sp, #116	; 0x74
 8003534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003538:	ab03      	add	r3, sp, #12
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	462a      	mov	r2, r5
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <_svfiprintf_r+0x1f8>)
 8003540:	a904      	add	r1, sp, #16
 8003542:	4638      	mov	r0, r7
 8003544:	f000 f87a 	bl	800363c <_printf_i>
 8003548:	e7eb      	b.n	8003522 <_svfiprintf_r+0x1c2>
 800354a:	bf00      	nop
 800354c:	08003bb4 	.word	0x08003bb4
 8003550:	08003bbe 	.word	0x08003bbe
 8003554:	00000000 	.word	0x00000000
 8003558:	080032a9 	.word	0x080032a9
 800355c:	08003bba 	.word	0x08003bba

08003560 <_printf_common>:
 8003560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	4616      	mov	r6, r2
 8003566:	4699      	mov	r9, r3
 8003568:	688a      	ldr	r2, [r1, #8]
 800356a:	690b      	ldr	r3, [r1, #16]
 800356c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003570:	4293      	cmp	r3, r2
 8003572:	bfb8      	it	lt
 8003574:	4613      	movlt	r3, r2
 8003576:	6033      	str	r3, [r6, #0]
 8003578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800357c:	4607      	mov	r7, r0
 800357e:	460c      	mov	r4, r1
 8003580:	b10a      	cbz	r2, 8003586 <_printf_common+0x26>
 8003582:	3301      	adds	r3, #1
 8003584:	6033      	str	r3, [r6, #0]
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	0699      	lsls	r1, r3, #26
 800358a:	bf42      	ittt	mi
 800358c:	6833      	ldrmi	r3, [r6, #0]
 800358e:	3302      	addmi	r3, #2
 8003590:	6033      	strmi	r3, [r6, #0]
 8003592:	6825      	ldr	r5, [r4, #0]
 8003594:	f015 0506 	ands.w	r5, r5, #6
 8003598:	d106      	bne.n	80035a8 <_printf_common+0x48>
 800359a:	f104 0a19 	add.w	sl, r4, #25
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	6832      	ldr	r2, [r6, #0]
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	dc26      	bgt.n	80035f6 <_printf_common+0x96>
 80035a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035ac:	1e13      	subs	r3, r2, #0
 80035ae:	6822      	ldr	r2, [r4, #0]
 80035b0:	bf18      	it	ne
 80035b2:	2301      	movne	r3, #1
 80035b4:	0692      	lsls	r2, r2, #26
 80035b6:	d42b      	bmi.n	8003610 <_printf_common+0xb0>
 80035b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035bc:	4649      	mov	r1, r9
 80035be:	4638      	mov	r0, r7
 80035c0:	47c0      	blx	r8
 80035c2:	3001      	adds	r0, #1
 80035c4:	d01e      	beq.n	8003604 <_printf_common+0xa4>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	68e5      	ldr	r5, [r4, #12]
 80035ca:	6832      	ldr	r2, [r6, #0]
 80035cc:	f003 0306 	and.w	r3, r3, #6
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	bf08      	it	eq
 80035d4:	1aad      	subeq	r5, r5, r2
 80035d6:	68a3      	ldr	r3, [r4, #8]
 80035d8:	6922      	ldr	r2, [r4, #16]
 80035da:	bf0c      	ite	eq
 80035dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e0:	2500      	movne	r5, #0
 80035e2:	4293      	cmp	r3, r2
 80035e4:	bfc4      	itt	gt
 80035e6:	1a9b      	subgt	r3, r3, r2
 80035e8:	18ed      	addgt	r5, r5, r3
 80035ea:	2600      	movs	r6, #0
 80035ec:	341a      	adds	r4, #26
 80035ee:	42b5      	cmp	r5, r6
 80035f0:	d11a      	bne.n	8003628 <_printf_common+0xc8>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e008      	b.n	8003608 <_printf_common+0xa8>
 80035f6:	2301      	movs	r3, #1
 80035f8:	4652      	mov	r2, sl
 80035fa:	4649      	mov	r1, r9
 80035fc:	4638      	mov	r0, r7
 80035fe:	47c0      	blx	r8
 8003600:	3001      	adds	r0, #1
 8003602:	d103      	bne.n	800360c <_printf_common+0xac>
 8003604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360c:	3501      	adds	r5, #1
 800360e:	e7c6      	b.n	800359e <_printf_common+0x3e>
 8003610:	18e1      	adds	r1, r4, r3
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	2030      	movs	r0, #48	; 0x30
 8003616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800361a:	4422      	add	r2, r4
 800361c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003624:	3302      	adds	r3, #2
 8003626:	e7c7      	b.n	80035b8 <_printf_common+0x58>
 8003628:	2301      	movs	r3, #1
 800362a:	4622      	mov	r2, r4
 800362c:	4649      	mov	r1, r9
 800362e:	4638      	mov	r0, r7
 8003630:	47c0      	blx	r8
 8003632:	3001      	adds	r0, #1
 8003634:	d0e6      	beq.n	8003604 <_printf_common+0xa4>
 8003636:	3601      	adds	r6, #1
 8003638:	e7d9      	b.n	80035ee <_printf_common+0x8e>
	...

0800363c <_printf_i>:
 800363c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	7e0f      	ldrb	r7, [r1, #24]
 8003642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003644:	2f78      	cmp	r7, #120	; 0x78
 8003646:	4691      	mov	r9, r2
 8003648:	4680      	mov	r8, r0
 800364a:	460c      	mov	r4, r1
 800364c:	469a      	mov	sl, r3
 800364e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003652:	d807      	bhi.n	8003664 <_printf_i+0x28>
 8003654:	2f62      	cmp	r7, #98	; 0x62
 8003656:	d80a      	bhi.n	800366e <_printf_i+0x32>
 8003658:	2f00      	cmp	r7, #0
 800365a:	f000 80d8 	beq.w	800380e <_printf_i+0x1d2>
 800365e:	2f58      	cmp	r7, #88	; 0x58
 8003660:	f000 80a3 	beq.w	80037aa <_printf_i+0x16e>
 8003664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800366c:	e03a      	b.n	80036e4 <_printf_i+0xa8>
 800366e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003672:	2b15      	cmp	r3, #21
 8003674:	d8f6      	bhi.n	8003664 <_printf_i+0x28>
 8003676:	a101      	add	r1, pc, #4	; (adr r1, 800367c <_printf_i+0x40>)
 8003678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036e9 	.word	0x080036e9
 8003684:	08003665 	.word	0x08003665
 8003688:	08003665 	.word	0x08003665
 800368c:	08003665 	.word	0x08003665
 8003690:	08003665 	.word	0x08003665
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003665 	.word	0x08003665
 800369c:	08003665 	.word	0x08003665
 80036a0:	08003665 	.word	0x08003665
 80036a4:	08003665 	.word	0x08003665
 80036a8:	080037f5 	.word	0x080037f5
 80036ac:	08003719 	.word	0x08003719
 80036b0:	080037d7 	.word	0x080037d7
 80036b4:	08003665 	.word	0x08003665
 80036b8:	08003665 	.word	0x08003665
 80036bc:	08003817 	.word	0x08003817
 80036c0:	08003665 	.word	0x08003665
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003665 	.word	0x08003665
 80036cc:	08003665 	.word	0x08003665
 80036d0:	080037df 	.word	0x080037df
 80036d4:	682b      	ldr	r3, [r5, #0]
 80036d6:	1d1a      	adds	r2, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	602a      	str	r2, [r5, #0]
 80036dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0a3      	b.n	8003830 <_printf_i+0x1f4>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	6829      	ldr	r1, [r5, #0]
 80036ec:	0606      	lsls	r6, r0, #24
 80036ee:	f101 0304 	add.w	r3, r1, #4
 80036f2:	d50a      	bpl.n	800370a <_printf_i+0xce>
 80036f4:	680e      	ldr	r6, [r1, #0]
 80036f6:	602b      	str	r3, [r5, #0]
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	da03      	bge.n	8003704 <_printf_i+0xc8>
 80036fc:	232d      	movs	r3, #45	; 0x2d
 80036fe:	4276      	negs	r6, r6
 8003700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003704:	485e      	ldr	r0, [pc, #376]	; (8003880 <_printf_i+0x244>)
 8003706:	230a      	movs	r3, #10
 8003708:	e019      	b.n	800373e <_printf_i+0x102>
 800370a:	680e      	ldr	r6, [r1, #0]
 800370c:	602b      	str	r3, [r5, #0]
 800370e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003712:	bf18      	it	ne
 8003714:	b236      	sxthne	r6, r6
 8003716:	e7ef      	b.n	80036f8 <_printf_i+0xbc>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	1d19      	adds	r1, r3, #4
 800371e:	6029      	str	r1, [r5, #0]
 8003720:	0601      	lsls	r1, r0, #24
 8003722:	d501      	bpl.n	8003728 <_printf_i+0xec>
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	e002      	b.n	800372e <_printf_i+0xf2>
 8003728:	0646      	lsls	r6, r0, #25
 800372a:	d5fb      	bpl.n	8003724 <_printf_i+0xe8>
 800372c:	881e      	ldrh	r6, [r3, #0]
 800372e:	4854      	ldr	r0, [pc, #336]	; (8003880 <_printf_i+0x244>)
 8003730:	2f6f      	cmp	r7, #111	; 0x6f
 8003732:	bf0c      	ite	eq
 8003734:	2308      	moveq	r3, #8
 8003736:	230a      	movne	r3, #10
 8003738:	2100      	movs	r1, #0
 800373a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800373e:	6865      	ldr	r5, [r4, #4]
 8003740:	60a5      	str	r5, [r4, #8]
 8003742:	2d00      	cmp	r5, #0
 8003744:	bfa2      	ittt	ge
 8003746:	6821      	ldrge	r1, [r4, #0]
 8003748:	f021 0104 	bicge.w	r1, r1, #4
 800374c:	6021      	strge	r1, [r4, #0]
 800374e:	b90e      	cbnz	r6, 8003754 <_printf_i+0x118>
 8003750:	2d00      	cmp	r5, #0
 8003752:	d04d      	beq.n	80037f0 <_printf_i+0x1b4>
 8003754:	4615      	mov	r5, r2
 8003756:	fbb6 f1f3 	udiv	r1, r6, r3
 800375a:	fb03 6711 	mls	r7, r3, r1, r6
 800375e:	5dc7      	ldrb	r7, [r0, r7]
 8003760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003764:	4637      	mov	r7, r6
 8003766:	42bb      	cmp	r3, r7
 8003768:	460e      	mov	r6, r1
 800376a:	d9f4      	bls.n	8003756 <_printf_i+0x11a>
 800376c:	2b08      	cmp	r3, #8
 800376e:	d10b      	bne.n	8003788 <_printf_i+0x14c>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	07de      	lsls	r6, r3, #31
 8003774:	d508      	bpl.n	8003788 <_printf_i+0x14c>
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	6861      	ldr	r1, [r4, #4]
 800377a:	4299      	cmp	r1, r3
 800377c:	bfde      	ittt	le
 800377e:	2330      	movle	r3, #48	; 0x30
 8003780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003784:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003788:	1b52      	subs	r2, r2, r5
 800378a:	6122      	str	r2, [r4, #16]
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	464b      	mov	r3, r9
 8003792:	aa03      	add	r2, sp, #12
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f7ff fee2 	bl	8003560 <_printf_common>
 800379c:	3001      	adds	r0, #1
 800379e:	d14c      	bne.n	800383a <_printf_i+0x1fe>
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037a4:	b004      	add	sp, #16
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	4835      	ldr	r0, [pc, #212]	; (8003880 <_printf_i+0x244>)
 80037ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037b0:	6829      	ldr	r1, [r5, #0]
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80037b8:	6029      	str	r1, [r5, #0]
 80037ba:	061d      	lsls	r5, r3, #24
 80037bc:	d514      	bpl.n	80037e8 <_printf_i+0x1ac>
 80037be:	07df      	lsls	r7, r3, #31
 80037c0:	bf44      	itt	mi
 80037c2:	f043 0320 	orrmi.w	r3, r3, #32
 80037c6:	6023      	strmi	r3, [r4, #0]
 80037c8:	b91e      	cbnz	r6, 80037d2 <_printf_i+0x196>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f023 0320 	bic.w	r3, r3, #32
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	2310      	movs	r3, #16
 80037d4:	e7b0      	b.n	8003738 <_printf_i+0xfc>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f043 0320 	orr.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	2378      	movs	r3, #120	; 0x78
 80037e0:	4828      	ldr	r0, [pc, #160]	; (8003884 <_printf_i+0x248>)
 80037e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037e6:	e7e3      	b.n	80037b0 <_printf_i+0x174>
 80037e8:	0659      	lsls	r1, r3, #25
 80037ea:	bf48      	it	mi
 80037ec:	b2b6      	uxthmi	r6, r6
 80037ee:	e7e6      	b.n	80037be <_printf_i+0x182>
 80037f0:	4615      	mov	r5, r2
 80037f2:	e7bb      	b.n	800376c <_printf_i+0x130>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	6826      	ldr	r6, [r4, #0]
 80037f8:	6961      	ldr	r1, [r4, #20]
 80037fa:	1d18      	adds	r0, r3, #4
 80037fc:	6028      	str	r0, [r5, #0]
 80037fe:	0635      	lsls	r5, r6, #24
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	d501      	bpl.n	8003808 <_printf_i+0x1cc>
 8003804:	6019      	str	r1, [r3, #0]
 8003806:	e002      	b.n	800380e <_printf_i+0x1d2>
 8003808:	0670      	lsls	r0, r6, #25
 800380a:	d5fb      	bpl.n	8003804 <_printf_i+0x1c8>
 800380c:	8019      	strh	r1, [r3, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	4615      	mov	r5, r2
 8003814:	e7ba      	b.n	800378c <_printf_i+0x150>
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	1d1a      	adds	r2, r3, #4
 800381a:	602a      	str	r2, [r5, #0]
 800381c:	681d      	ldr	r5, [r3, #0]
 800381e:	6862      	ldr	r2, [r4, #4]
 8003820:	2100      	movs	r1, #0
 8003822:	4628      	mov	r0, r5
 8003824:	f7fc fcdc 	bl	80001e0 <memchr>
 8003828:	b108      	cbz	r0, 800382e <_printf_i+0x1f2>
 800382a:	1b40      	subs	r0, r0, r5
 800382c:	6060      	str	r0, [r4, #4]
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	6123      	str	r3, [r4, #16]
 8003832:	2300      	movs	r3, #0
 8003834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003838:	e7a8      	b.n	800378c <_printf_i+0x150>
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	462a      	mov	r2, r5
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	47d0      	blx	sl
 8003844:	3001      	adds	r0, #1
 8003846:	d0ab      	beq.n	80037a0 <_printf_i+0x164>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	079b      	lsls	r3, r3, #30
 800384c:	d413      	bmi.n	8003876 <_printf_i+0x23a>
 800384e:	68e0      	ldr	r0, [r4, #12]
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	4298      	cmp	r0, r3
 8003854:	bfb8      	it	lt
 8003856:	4618      	movlt	r0, r3
 8003858:	e7a4      	b.n	80037a4 <_printf_i+0x168>
 800385a:	2301      	movs	r3, #1
 800385c:	4632      	mov	r2, r6
 800385e:	4649      	mov	r1, r9
 8003860:	4640      	mov	r0, r8
 8003862:	47d0      	blx	sl
 8003864:	3001      	adds	r0, #1
 8003866:	d09b      	beq.n	80037a0 <_printf_i+0x164>
 8003868:	3501      	adds	r5, #1
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	9903      	ldr	r1, [sp, #12]
 800386e:	1a5b      	subs	r3, r3, r1
 8003870:	42ab      	cmp	r3, r5
 8003872:	dcf2      	bgt.n	800385a <_printf_i+0x21e>
 8003874:	e7eb      	b.n	800384e <_printf_i+0x212>
 8003876:	2500      	movs	r5, #0
 8003878:	f104 0619 	add.w	r6, r4, #25
 800387c:	e7f5      	b.n	800386a <_printf_i+0x22e>
 800387e:	bf00      	nop
 8003880:	08003bc5 	.word	0x08003bc5
 8003884:	08003bd6 	.word	0x08003bd6

08003888 <memcpy>:
 8003888:	440a      	add	r2, r1
 800388a:	4291      	cmp	r1, r2
 800388c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003890:	d100      	bne.n	8003894 <memcpy+0xc>
 8003892:	4770      	bx	lr
 8003894:	b510      	push	{r4, lr}
 8003896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800389a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800389e:	4291      	cmp	r1, r2
 80038a0:	d1f9      	bne.n	8003896 <memcpy+0xe>
 80038a2:	bd10      	pop	{r4, pc}

080038a4 <memmove>:
 80038a4:	4288      	cmp	r0, r1
 80038a6:	b510      	push	{r4, lr}
 80038a8:	eb01 0402 	add.w	r4, r1, r2
 80038ac:	d902      	bls.n	80038b4 <memmove+0x10>
 80038ae:	4284      	cmp	r4, r0
 80038b0:	4623      	mov	r3, r4
 80038b2:	d807      	bhi.n	80038c4 <memmove+0x20>
 80038b4:	1e43      	subs	r3, r0, #1
 80038b6:	42a1      	cmp	r1, r4
 80038b8:	d008      	beq.n	80038cc <memmove+0x28>
 80038ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038c2:	e7f8      	b.n	80038b6 <memmove+0x12>
 80038c4:	4402      	add	r2, r0
 80038c6:	4601      	mov	r1, r0
 80038c8:	428a      	cmp	r2, r1
 80038ca:	d100      	bne.n	80038ce <memmove+0x2a>
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038d6:	e7f7      	b.n	80038c8 <memmove+0x24>

080038d8 <_free_r>:
 80038d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038da:	2900      	cmp	r1, #0
 80038dc:	d044      	beq.n	8003968 <_free_r+0x90>
 80038de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e2:	9001      	str	r0, [sp, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f1a1 0404 	sub.w	r4, r1, #4
 80038ea:	bfb8      	it	lt
 80038ec:	18e4      	addlt	r4, r4, r3
 80038ee:	f000 f913 	bl	8003b18 <__malloc_lock>
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <_free_r+0x94>)
 80038f4:	9801      	ldr	r0, [sp, #4]
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	b933      	cbnz	r3, 8003908 <_free_r+0x30>
 80038fa:	6063      	str	r3, [r4, #4]
 80038fc:	6014      	str	r4, [r2, #0]
 80038fe:	b003      	add	sp, #12
 8003900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003904:	f000 b90e 	b.w	8003b24 <__malloc_unlock>
 8003908:	42a3      	cmp	r3, r4
 800390a:	d908      	bls.n	800391e <_free_r+0x46>
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1961      	adds	r1, r4, r5
 8003910:	428b      	cmp	r3, r1
 8003912:	bf01      	itttt	eq
 8003914:	6819      	ldreq	r1, [r3, #0]
 8003916:	685b      	ldreq	r3, [r3, #4]
 8003918:	1949      	addeq	r1, r1, r5
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	e7ed      	b.n	80038fa <_free_r+0x22>
 800391e:	461a      	mov	r2, r3
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b10b      	cbz	r3, 8003928 <_free_r+0x50>
 8003924:	42a3      	cmp	r3, r4
 8003926:	d9fa      	bls.n	800391e <_free_r+0x46>
 8003928:	6811      	ldr	r1, [r2, #0]
 800392a:	1855      	adds	r5, r2, r1
 800392c:	42a5      	cmp	r5, r4
 800392e:	d10b      	bne.n	8003948 <_free_r+0x70>
 8003930:	6824      	ldr	r4, [r4, #0]
 8003932:	4421      	add	r1, r4
 8003934:	1854      	adds	r4, r2, r1
 8003936:	42a3      	cmp	r3, r4
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	d1e0      	bne.n	80038fe <_free_r+0x26>
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	6053      	str	r3, [r2, #4]
 8003942:	4421      	add	r1, r4
 8003944:	6011      	str	r1, [r2, #0]
 8003946:	e7da      	b.n	80038fe <_free_r+0x26>
 8003948:	d902      	bls.n	8003950 <_free_r+0x78>
 800394a:	230c      	movs	r3, #12
 800394c:	6003      	str	r3, [r0, #0]
 800394e:	e7d6      	b.n	80038fe <_free_r+0x26>
 8003950:	6825      	ldr	r5, [r4, #0]
 8003952:	1961      	adds	r1, r4, r5
 8003954:	428b      	cmp	r3, r1
 8003956:	bf04      	itt	eq
 8003958:	6819      	ldreq	r1, [r3, #0]
 800395a:	685b      	ldreq	r3, [r3, #4]
 800395c:	6063      	str	r3, [r4, #4]
 800395e:	bf04      	itt	eq
 8003960:	1949      	addeq	r1, r1, r5
 8003962:	6021      	streq	r1, [r4, #0]
 8003964:	6054      	str	r4, [r2, #4]
 8003966:	e7ca      	b.n	80038fe <_free_r+0x26>
 8003968:	b003      	add	sp, #12
 800396a:	bd30      	pop	{r4, r5, pc}
 800396c:	20000120 	.word	0x20000120

08003970 <sbrk_aligned>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4e0e      	ldr	r6, [pc, #56]	; (80039ac <sbrk_aligned+0x3c>)
 8003974:	460c      	mov	r4, r1
 8003976:	6831      	ldr	r1, [r6, #0]
 8003978:	4605      	mov	r5, r0
 800397a:	b911      	cbnz	r1, 8003982 <sbrk_aligned+0x12>
 800397c:	f000 f8bc 	bl	8003af8 <_sbrk_r>
 8003980:	6030      	str	r0, [r6, #0]
 8003982:	4621      	mov	r1, r4
 8003984:	4628      	mov	r0, r5
 8003986:	f000 f8b7 	bl	8003af8 <_sbrk_r>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d00a      	beq.n	80039a4 <sbrk_aligned+0x34>
 800398e:	1cc4      	adds	r4, r0, #3
 8003990:	f024 0403 	bic.w	r4, r4, #3
 8003994:	42a0      	cmp	r0, r4
 8003996:	d007      	beq.n	80039a8 <sbrk_aligned+0x38>
 8003998:	1a21      	subs	r1, r4, r0
 800399a:	4628      	mov	r0, r5
 800399c:	f000 f8ac 	bl	8003af8 <_sbrk_r>
 80039a0:	3001      	adds	r0, #1
 80039a2:	d101      	bne.n	80039a8 <sbrk_aligned+0x38>
 80039a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80039a8:	4620      	mov	r0, r4
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	20000124 	.word	0x20000124

080039b0 <_malloc_r>:
 80039b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b4:	1ccd      	adds	r5, r1, #3
 80039b6:	f025 0503 	bic.w	r5, r5, #3
 80039ba:	3508      	adds	r5, #8
 80039bc:	2d0c      	cmp	r5, #12
 80039be:	bf38      	it	cc
 80039c0:	250c      	movcc	r5, #12
 80039c2:	2d00      	cmp	r5, #0
 80039c4:	4607      	mov	r7, r0
 80039c6:	db01      	blt.n	80039cc <_malloc_r+0x1c>
 80039c8:	42a9      	cmp	r1, r5
 80039ca:	d905      	bls.n	80039d8 <_malloc_r+0x28>
 80039cc:	230c      	movs	r3, #12
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	2600      	movs	r6, #0
 80039d2:	4630      	mov	r0, r6
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	4e2e      	ldr	r6, [pc, #184]	; (8003a94 <_malloc_r+0xe4>)
 80039da:	f000 f89d 	bl	8003b18 <__malloc_lock>
 80039de:	6833      	ldr	r3, [r6, #0]
 80039e0:	461c      	mov	r4, r3
 80039e2:	bb34      	cbnz	r4, 8003a32 <_malloc_r+0x82>
 80039e4:	4629      	mov	r1, r5
 80039e6:	4638      	mov	r0, r7
 80039e8:	f7ff ffc2 	bl	8003970 <sbrk_aligned>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	4604      	mov	r4, r0
 80039f0:	d14d      	bne.n	8003a8e <_malloc_r+0xde>
 80039f2:	6834      	ldr	r4, [r6, #0]
 80039f4:	4626      	mov	r6, r4
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	d140      	bne.n	8003a7c <_malloc_r+0xcc>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	4631      	mov	r1, r6
 80039fe:	4638      	mov	r0, r7
 8003a00:	eb04 0803 	add.w	r8, r4, r3
 8003a04:	f000 f878 	bl	8003af8 <_sbrk_r>
 8003a08:	4580      	cmp	r8, r0
 8003a0a:	d13a      	bne.n	8003a82 <_malloc_r+0xd2>
 8003a0c:	6821      	ldr	r1, [r4, #0]
 8003a0e:	3503      	adds	r5, #3
 8003a10:	1a6d      	subs	r5, r5, r1
 8003a12:	f025 0503 	bic.w	r5, r5, #3
 8003a16:	3508      	adds	r5, #8
 8003a18:	2d0c      	cmp	r5, #12
 8003a1a:	bf38      	it	cc
 8003a1c:	250c      	movcc	r5, #12
 8003a1e:	4629      	mov	r1, r5
 8003a20:	4638      	mov	r0, r7
 8003a22:	f7ff ffa5 	bl	8003970 <sbrk_aligned>
 8003a26:	3001      	adds	r0, #1
 8003a28:	d02b      	beq.n	8003a82 <_malloc_r+0xd2>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	442b      	add	r3, r5
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	e00e      	b.n	8003a50 <_malloc_r+0xa0>
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	1b52      	subs	r2, r2, r5
 8003a36:	d41e      	bmi.n	8003a76 <_malloc_r+0xc6>
 8003a38:	2a0b      	cmp	r2, #11
 8003a3a:	d916      	bls.n	8003a6a <_malloc_r+0xba>
 8003a3c:	1961      	adds	r1, r4, r5
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	6025      	str	r5, [r4, #0]
 8003a42:	bf18      	it	ne
 8003a44:	6059      	strne	r1, [r3, #4]
 8003a46:	6863      	ldr	r3, [r4, #4]
 8003a48:	bf08      	it	eq
 8003a4a:	6031      	streq	r1, [r6, #0]
 8003a4c:	5162      	str	r2, [r4, r5]
 8003a4e:	604b      	str	r3, [r1, #4]
 8003a50:	4638      	mov	r0, r7
 8003a52:	f104 060b 	add.w	r6, r4, #11
 8003a56:	f000 f865 	bl	8003b24 <__malloc_unlock>
 8003a5a:	f026 0607 	bic.w	r6, r6, #7
 8003a5e:	1d23      	adds	r3, r4, #4
 8003a60:	1af2      	subs	r2, r6, r3
 8003a62:	d0b6      	beq.n	80039d2 <_malloc_r+0x22>
 8003a64:	1b9b      	subs	r3, r3, r6
 8003a66:	50a3      	str	r3, [r4, r2]
 8003a68:	e7b3      	b.n	80039d2 <_malloc_r+0x22>
 8003a6a:	6862      	ldr	r2, [r4, #4]
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	bf0c      	ite	eq
 8003a70:	6032      	streq	r2, [r6, #0]
 8003a72:	605a      	strne	r2, [r3, #4]
 8003a74:	e7ec      	b.n	8003a50 <_malloc_r+0xa0>
 8003a76:	4623      	mov	r3, r4
 8003a78:	6864      	ldr	r4, [r4, #4]
 8003a7a:	e7b2      	b.n	80039e2 <_malloc_r+0x32>
 8003a7c:	4634      	mov	r4, r6
 8003a7e:	6876      	ldr	r6, [r6, #4]
 8003a80:	e7b9      	b.n	80039f6 <_malloc_r+0x46>
 8003a82:	230c      	movs	r3, #12
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4638      	mov	r0, r7
 8003a88:	f000 f84c 	bl	8003b24 <__malloc_unlock>
 8003a8c:	e7a1      	b.n	80039d2 <_malloc_r+0x22>
 8003a8e:	6025      	str	r5, [r4, #0]
 8003a90:	e7de      	b.n	8003a50 <_malloc_r+0xa0>
 8003a92:	bf00      	nop
 8003a94:	20000120 	.word	0x20000120

08003a98 <_realloc_r>:
 8003a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	4614      	mov	r4, r2
 8003aa0:	460e      	mov	r6, r1
 8003aa2:	b921      	cbnz	r1, 8003aae <_realloc_r+0x16>
 8003aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	f7ff bf81 	b.w	80039b0 <_malloc_r>
 8003aae:	b92a      	cbnz	r2, 8003abc <_realloc_r+0x24>
 8003ab0:	f7ff ff12 	bl	80038d8 <_free_r>
 8003ab4:	4625      	mov	r5, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003abc:	f000 f838 	bl	8003b30 <_malloc_usable_size_r>
 8003ac0:	4284      	cmp	r4, r0
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	d802      	bhi.n	8003acc <_realloc_r+0x34>
 8003ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aca:	d812      	bhi.n	8003af2 <_realloc_r+0x5a>
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff ff6e 	bl	80039b0 <_malloc_r>
 8003ad4:	4605      	mov	r5, r0
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d0ed      	beq.n	8003ab6 <_realloc_r+0x1e>
 8003ada:	42bc      	cmp	r4, r7
 8003adc:	4622      	mov	r2, r4
 8003ade:	4631      	mov	r1, r6
 8003ae0:	bf28      	it	cs
 8003ae2:	463a      	movcs	r2, r7
 8003ae4:	f7ff fed0 	bl	8003888 <memcpy>
 8003ae8:	4631      	mov	r1, r6
 8003aea:	4640      	mov	r0, r8
 8003aec:	f7ff fef4 	bl	80038d8 <_free_r>
 8003af0:	e7e1      	b.n	8003ab6 <_realloc_r+0x1e>
 8003af2:	4635      	mov	r5, r6
 8003af4:	e7df      	b.n	8003ab6 <_realloc_r+0x1e>
	...

08003af8 <_sbrk_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d06      	ldr	r5, [pc, #24]	; (8003b14 <_sbrk_r+0x1c>)
 8003afc:	2300      	movs	r3, #0
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	f7fd f8d4 	bl	8000cb0 <_sbrk>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_sbrk_r+0x1a>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_sbrk_r+0x1a>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20000128 	.word	0x20000128

08003b18 <__malloc_lock>:
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <__malloc_lock+0x8>)
 8003b1a:	f000 b811 	b.w	8003b40 <__retarget_lock_acquire_recursive>
 8003b1e:	bf00      	nop
 8003b20:	2000012c 	.word	0x2000012c

08003b24 <__malloc_unlock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_unlock+0x8>)
 8003b26:	f000 b80c 	b.w	8003b42 <__retarget_lock_release_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	2000012c 	.word	0x2000012c

08003b30 <_malloc_usable_size_r>:
 8003b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b34:	1f18      	subs	r0, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bfbc      	itt	lt
 8003b3a:	580b      	ldrlt	r3, [r1, r0]
 8003b3c:	18c0      	addlt	r0, r0, r3
 8003b3e:	4770      	bx	lr

08003b40 <__retarget_lock_acquire_recursive>:
 8003b40:	4770      	bx	lr

08003b42 <__retarget_lock_release_recursive>:
 8003b42:	4770      	bx	lr

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
