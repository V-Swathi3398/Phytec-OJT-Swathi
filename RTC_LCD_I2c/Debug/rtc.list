
rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080030cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c0  20000070  0800313c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000130  0800313c  00020130  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000da72  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ea0  00000000  00000000  0002db12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00007be9  00000000  00000000  0002f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000938  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000008e0  00000000  00000000  00037ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000226e8  00000000  00000000  000387b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001104d  00000000  00000000  0005aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c840d  00000000  00000000  0006beed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001342fa  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001d78  00000000  00000000  0013434c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003008 	.word	0x08003008

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003008 	.word	0x08003008

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b510      	push	{r4, lr}
 80005b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_InitTick+0x40>)
 80005ba:	7818      	ldrb	r0, [r3, #0]
 80005bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <HAL_InitTick+0x44>)
 80005c6:	6810      	ldr	r0, [r2, #0]
 80005c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80005cc:	f000 f8ac 	bl	8000728 <HAL_SYSTICK_Config>
 80005d0:	b968      	cbnz	r0, 80005ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	2c0f      	cmp	r4, #15
 80005d4:	d901      	bls.n	80005da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005d6:	2001      	movs	r0, #1
 80005d8:	e00a      	b.n	80005f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005da:	2200      	movs	r2, #0
 80005dc:	4621      	mov	r1, r4
 80005de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e2:	f000 f85d 	bl	80006a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e6:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_InitTick+0x40>)
 80005e8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80005ea:	2000      	movs	r0, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005ee:	2001      	movs	r0, #1
}
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	bf00      	nop
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008

080005fc <HAL_Init>:
{
 80005fc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_Init+0x30>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000606:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000616:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f82f 	bl	800067c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ffc8 	bl	80005b4 <HAL_InitTick>
  HAL_MspInit();
 8000624:	f001 ff5c 	bl	80024e0 <HAL_MspInit>
}
 8000628:	2000      	movs	r0, #0
 800062a:	bd08      	pop	{r3, pc}
 800062c:	40023c00 	.word	0x40023c00

08000630 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x10>)
 8000632:	6811      	ldr	r1, [r2, #0]
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_IncTick+0x14>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	440b      	add	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_GetTick+0x8>)
 800064a:	6818      	ldr	r0, [r3, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b538      	push	{r3, r4, r5, lr}
 8000656:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff fff6 	bl	8000648 <HAL_GetTick>
 800065c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000662:	d002      	beq.n	800066a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_Delay+0x24>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800066a:	f7ff ffed 	bl	8000648 <HAL_GetTick>
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	42a0      	cmp	r0, r4
 8000672:	d3fa      	bcc.n	800066a <HAL_Delay+0x16>
  {
  }
}
 8000674:	bd38      	pop	{r3, r4, r5, pc}
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000

0800067c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000680:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000684:	041b      	lsls	r3, r3, #16
 8000686:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000698:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_NVIC_SetPriority+0x68>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006aa:	f1c3 0c07 	rsb	ip, r3, #7
 80006ae:	f1bc 0f04 	cmp.w	ip, #4
 80006b2:	bf28      	it	cs
 80006b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b8:	f103 0e04 	add.w	lr, r3, #4
 80006bc:	f1be 0f06 	cmp.w	lr, #6
 80006c0:	d918      	bls.n	80006f4 <HAL_NVIC_SetPriority+0x54>
 80006c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80006c8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80006cc:	ea21 010c 	bic.w	r1, r1, ip
 80006d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d2:	fa0e f303 	lsl.w	r3, lr, r3
 80006d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006dc:	2800      	cmp	r0, #0
 80006de:	db0b      	blt.n	80006f8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	0109      	lsls	r1, r1, #4
 80006e2:	b2c9      	uxtb	r1, r1
 80006e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f4:	2300      	movs	r3, #0
 80006f6:	e7e5      	b.n	80006c4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	f000 000f 	and.w	r0, r0, #15
 80006fc:	0109      	lsls	r1, r1, #4
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_NVIC_SetPriority+0x6c>)
 8000702:	5419      	strb	r1, [r3, r0]
 8000704:	e7f4      	b.n	80006f0 <HAL_NVIC_SetPriority+0x50>
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	e000ed14 	.word	0xe000ed14

08000710 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000710:	f000 021f 	and.w	r2, r0, #31
 8000714:	0940      	lsrs	r0, r0, #5
 8000716:	2301      	movs	r3, #1
 8000718:	4093      	lsls	r3, r2
 800071a:	4a02      	ldr	r2, [pc, #8]	; (8000724 <HAL_NVIC_EnableIRQ+0x14>)
 800071c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	3801      	subs	r0, #1
 800072a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800072e:	d20b      	bcs.n	8000748 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000734:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <HAL_SYSTICK_Config+0x24>)
 8000738:	21f0      	movs	r1, #240	; 0xf0
 800073a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073e:	2000      	movs	r0, #0
 8000740:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	2207      	movs	r2, #7
 8000744:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000748:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000750:	2804      	cmp	r0, #4
 8000752:	d006      	beq.n	8000762 <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000754:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000758:	6913      	ldr	r3, [r2, #16]
 800075a:	f023 0304 	bic.w	r3, r3, #4
 800075e:	6113      	str	r3, [r2, #16]
  }
}
 8000760:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000762:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8000766:	6913      	ldr	r3, [r2, #16]
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6113      	str	r3, [r2, #16]
 800076e:	4770      	bx	lr

08000770 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000770:	4770      	bx	lr

08000772 <HAL_SYSTICK_IRQHandler>:
{
 8000772:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000774:	f7ff fffc 	bl	8000770 <HAL_SYSTICK_Callback>
}
 8000778:	bd08      	pop	{r3, pc}
	...

0800077c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800077c:	2300      	movs	r3, #0
 800077e:	2b0f      	cmp	r3, #15
 8000780:	f200 80d2 	bhi.w	8000928 <HAL_GPIO_Init+0x1ac>
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	e03a      	b.n	8000800 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078a:	2206      	movs	r2, #6
 800078c:	e000      	b.n	8000790 <HAL_GPIO_Init+0x14>
 800078e:	2200      	movs	r2, #0
 8000790:	40aa      	lsls	r2, r5
 8000792:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000794:	3402      	adds	r4, #2
 8000796:	4d65      	ldr	r5, [pc, #404]	; (800092c <HAL_GPIO_Init+0x1b0>)
 8000798:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800079c:	4a64      	ldr	r2, [pc, #400]	; (8000930 <HAL_GPIO_Init+0x1b4>)
 800079e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007a0:	ea6f 020c 	mvn.w	r2, ip
 80007a4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007a8:	684e      	ldr	r6, [r1, #4]
 80007aa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80007ae:	d001      	beq.n	80007b4 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80007b0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80007b4:	4c5e      	ldr	r4, [pc, #376]	; (8000930 <HAL_GPIO_Init+0x1b4>)
 80007b6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80007b8:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80007ba:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007be:	684e      	ldr	r6, [r1, #4]
 80007c0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80007c4:	d001      	beq.n	80007ca <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 80007c6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80007ca:	4c59      	ldr	r4, [pc, #356]	; (8000930 <HAL_GPIO_Init+0x1b4>)
 80007cc:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ce:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80007d0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d4:	684e      	ldr	r6, [r1, #4]
 80007d6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80007da:	d001      	beq.n	80007e0 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 80007dc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80007e0:	4c53      	ldr	r4, [pc, #332]	; (8000930 <HAL_GPIO_Init+0x1b4>)
 80007e2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80007e4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80007e6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e8:	684d      	ldr	r5, [r1, #4]
 80007ea:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80007ee:	d001      	beq.n	80007f4 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 80007f0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80007f4:	4c4e      	ldr	r4, [pc, #312]	; (8000930 <HAL_GPIO_Init+0x1b4>)
 80007f6:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f8:	3301      	adds	r3, #1
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	f200 8092 	bhi.w	8000924 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8000800:	2201      	movs	r2, #1
 8000802:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000804:	680c      	ldr	r4, [r1, #0]
 8000806:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800080a:	ea32 0404 	bics.w	r4, r2, r4
 800080e:	d1f3      	bne.n	80007f8 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000810:	684c      	ldr	r4, [r1, #4]
 8000812:	2c02      	cmp	r4, #2
 8000814:	d001      	beq.n	800081a <HAL_GPIO_Init+0x9e>
 8000816:	2c12      	cmp	r4, #18
 8000818:	d110      	bne.n	800083c <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3U];
 800081a:	08dd      	lsrs	r5, r3, #3
 800081c:	3508      	adds	r5, #8
 800081e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000822:	f003 0407 	and.w	r4, r3, #7
 8000826:	00a6      	lsls	r6, r4, #2
 8000828:	240f      	movs	r4, #15
 800082a:	40b4      	lsls	r4, r6
 800082c:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000830:	690c      	ldr	r4, [r1, #16]
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000838:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800083c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800083e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000842:	2403      	movs	r4, #3
 8000844:	fa04 f40e 	lsl.w	r4, r4, lr
 8000848:	43e5      	mvns	r5, r4
 800084a:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800084e:	684c      	ldr	r4, [r1, #4]
 8000850:	f004 0403 	and.w	r4, r4, #3
 8000854:	fa04 f40e 	lsl.w	r4, r4, lr
 8000858:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 800085a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	684c      	ldr	r4, [r1, #4]
 800085e:	1e66      	subs	r6, r4, #1
 8000860:	2e01      	cmp	r6, #1
 8000862:	d903      	bls.n	800086c <HAL_GPIO_Init+0xf0>
 8000864:	2c11      	cmp	r4, #17
 8000866:	d001      	beq.n	800086c <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000868:	2c12      	cmp	r4, #18
 800086a:	d10f      	bne.n	800088c <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 800086c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086e:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000870:	68cc      	ldr	r4, [r1, #12]
 8000872:	fa04 f40e 	lsl.w	r4, r4, lr
 8000876:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000878:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800087a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087c:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000880:	684c      	ldr	r4, [r1, #4]
 8000882:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000886:	409c      	lsls	r4, r3
 8000888:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800088a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800088c:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800088e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000890:	688a      	ldr	r2, [r1, #8]
 8000892:	fa02 f20e 	lsl.w	r2, r2, lr
 8000896:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000898:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800089a:	684a      	ldr	r2, [r1, #4]
 800089c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80008a0:	d0aa      	beq.n	80007f8 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2200      	movs	r2, #0
 80008a4:	9201      	str	r2, [sp, #4]
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_GPIO_Init+0x1b8>)
 80008a8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80008aa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80008ae:	6454      	str	r4, [r2, #68]	; 0x44
 80008b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008b6:	9201      	str	r2, [sp, #4]
 80008b8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80008ba:	089c      	lsrs	r4, r3, #2
 80008bc:	1ca5      	adds	r5, r4, #2
 80008be:	4a1b      	ldr	r2, [pc, #108]	; (800092c <HAL_GPIO_Init+0x1b0>)
 80008c0:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008c4:	f003 0203 	and.w	r2, r3, #3
 80008c8:	0095      	lsls	r5, r2, #2
 80008ca:	220f      	movs	r2, #15
 80008cc:	40aa      	lsls	r2, r5
 80008ce:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <HAL_GPIO_Init+0x1bc>)
 80008d4:	4290      	cmp	r0, r2
 80008d6:	f43f af5a 	beq.w	800078e <HAL_GPIO_Init+0x12>
 80008da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008de:	4290      	cmp	r0, r2
 80008e0:	d016      	beq.n	8000910 <HAL_GPIO_Init+0x194>
 80008e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d014      	beq.n	8000914 <HAL_GPIO_Init+0x198>
 80008ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008ee:	4290      	cmp	r0, r2
 80008f0:	d012      	beq.n	8000918 <HAL_GPIO_Init+0x19c>
 80008f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008f6:	4290      	cmp	r0, r2
 80008f8:	d010      	beq.n	800091c <HAL_GPIO_Init+0x1a0>
 80008fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80008fe:	4290      	cmp	r0, r2
 8000900:	d00e      	beq.n	8000920 <HAL_GPIO_Init+0x1a4>
 8000902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000906:	4290      	cmp	r0, r2
 8000908:	f43f af3f 	beq.w	800078a <HAL_GPIO_Init+0xe>
 800090c:	2207      	movs	r2, #7
 800090e:	e73f      	b.n	8000790 <HAL_GPIO_Init+0x14>
 8000910:	2201      	movs	r2, #1
 8000912:	e73d      	b.n	8000790 <HAL_GPIO_Init+0x14>
 8000914:	2202      	movs	r2, #2
 8000916:	e73b      	b.n	8000790 <HAL_GPIO_Init+0x14>
 8000918:	2203      	movs	r2, #3
 800091a:	e739      	b.n	8000790 <HAL_GPIO_Init+0x14>
 800091c:	2204      	movs	r2, #4
 800091e:	e737      	b.n	8000790 <HAL_GPIO_Init+0x14>
 8000920:	2205      	movs	r2, #5
 8000922:	e735      	b.n	8000790 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000924:	b003      	add	sp, #12
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40013800 	.word	0x40013800
 8000930:	40013c00 	.word	0x40013c00
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800093c:	b10a      	cbz	r2, 8000942 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800093e:	6181      	str	r1, [r0, #24]
 8000940:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000942:	0409      	lsls	r1, r1, #16
 8000944:	6181      	str	r1, [r0, #24]
  }
}
 8000946:	4770      	bx	lr

08000948 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000950:	d101      	bne.n	8000956 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8000952:	2000      	movs	r0, #0
}
 8000954:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800095a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800095c:	2304      	movs	r3, #4
 800095e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8000964:	2220      	movs	r2, #32
 8000966:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800096a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	4770      	bx	lr

08000972 <I2C_WaitOnFlagUntilTimeout>:
{
 8000972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000976:	4607      	mov	r7, r0
 8000978:	460d      	mov	r5, r1
 800097a:	4690      	mov	r8, r2
 800097c:	461e      	mov	r6, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800097e:	e020      	b.n	80009c2 <I2C_WaitOnFlagUntilTimeout+0x50>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000980:	b12e      	cbz	r6, 800098e <I2C_WaitOnFlagUntilTimeout+0x1c>
 8000982:	f7ff fe61 	bl	8000648 <HAL_GetTick>
 8000986:	9b06      	ldr	r3, [sp, #24]
 8000988:	1ac0      	subs	r0, r0, r3
 800098a:	42b0      	cmp	r0, r6
 800098c:	d919      	bls.n	80009c2 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000992:	2220      	movs	r2, #32
 8000994:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000998:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 800099c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_TIMEOUT;
 80009a0:	2003      	movs	r0, #3
 80009a2:	e01e      	b.n	80009e2 <I2C_WaitOnFlagUntilTimeout+0x70>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	699c      	ldr	r4, [r3, #24]
 80009a8:	ea25 0c04 	bic.w	ip, r5, r4
 80009ac:	fa1f fc8c 	uxth.w	ip, ip
 80009b0:	fabc fc8c 	clz	ip, ip
 80009b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80009b8:	45e0      	cmp	r8, ip
 80009ba:	d111      	bne.n	80009e0 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if(Timeout != HAL_MAX_DELAY)
 80009bc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80009c0:	d1de      	bne.n	8000980 <I2C_WaitOnFlagUntilTimeout+0xe>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80009c2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d1ec      	bne.n	80009a4 <I2C_WaitOnFlagUntilTimeout+0x32>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	ea25 0c03 	bic.w	ip, r5, r3
 80009d2:	fa1f fc8c 	uxth.w	ip, ip
 80009d6:	fabc fc8c 	clz	ip, ip
 80009da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80009de:	e7eb      	b.n	80009b8 <I2C_WaitOnFlagUntilTimeout+0x46>
  return HAL_OK;
 80009e0:	2000      	movs	r0, #0
}
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80009e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ea:	4605      	mov	r5, r0
 80009ec:	460e      	mov	r6, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009f2:	e033      	b.n	8000a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80009fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000a02:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000a04:	2304      	movs	r3, #4
 8000a06:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8000a12:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
 8000a18:	e02e      	b.n	8000a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000a1a:	b12f      	cbz	r7, 8000a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
 8000a1c:	f7ff fe14 	bl	8000648 <HAL_GetTick>
 8000a20:	eba0 0008 	sub.w	r0, r0, r8
 8000a24:	42b8      	cmp	r0, r7
 8000a26:	d919      	bls.n	8000a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000a32:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000a36:	2003      	movs	r0, #3
 8000a38:	e01e      	b.n	8000a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a3a:	682b      	ldr	r3, [r5, #0]
 8000a3c:	699c      	ldr	r4, [r3, #24]
 8000a3e:	ea26 0404 	bic.w	r4, r6, r4
 8000a42:	b2a4      	uxth	r4, r4
 8000a44:	3c00      	subs	r4, #0
 8000a46:	bf18      	it	ne
 8000a48:	2401      	movne	r4, #1
 8000a4a:	b1a4      	cbz	r4, 8000a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000a54:	d1ce      	bne.n	80009f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if(Timeout != HAL_MAX_DELAY)
 8000a56:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8000a5a:	d1de      	bne.n	8000a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x34>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a5c:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d1ea      	bne.n	8000a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	695c      	ldr	r4, [r3, #20]
 8000a68:	ea26 0404 	bic.w	r4, r6, r4
 8000a6c:	b2a4      	uxth	r4, r4
 8000a6e:	3c00      	subs	r4, #0
 8000a70:	bf18      	it	ne
 8000a72:	2401      	movne	r4, #1
 8000a74:	e7e9      	b.n	8000a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
  return HAL_OK;
 8000a76:	2000      	movs	r0, #0
}
 8000a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000a7c <I2C_MasterRequestWrite>:
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	4604      	mov	r4, r0
 8000a82:	460d      	mov	r5, r1
 8000a84:	4616      	mov	r6, r2
 8000a86:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000a88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	d00d      	beq.n	8000aaa <I2C_MasterRequestWrite+0x2e>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d00b      	beq.n	8000aaa <I2C_MasterRequestWrite+0x2e>
 8000a92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000a96:	d008      	beq.n	8000aaa <I2C_MasterRequestWrite+0x2e>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000a98:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d10a      	bne.n	8000ab4 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a9e:	6802      	ldr	r2, [r0, #0]
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	e004      	b.n	8000ab4 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6813      	ldr	r3, [r2, #0]
 8000aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab2:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ab4:	9700      	str	r7, [sp, #0]
 8000ab6:	4633      	mov	r3, r6
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff ff57 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000ac4:	bb70      	cbnz	r0, 8000b24 <I2C_MasterRequestWrite+0xa8>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ac6:	6923      	ldr	r3, [r4, #16]
 8000ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000acc:	d10f      	bne.n	8000aee <I2C_MasterRequestWrite+0x72>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000ad4:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4632      	mov	r2, r6
 8000ada:	4914      	ldr	r1, [pc, #80]	; (8000b2c <I2C_MasterRequestWrite+0xb0>)
 8000adc:	4620      	mov	r0, r4
 8000ade:	f7ff ff82 	bl	80009e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ae2:	b300      	cbz	r0, 8000b26 <I2C_MasterRequestWrite+0xaa>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d01a      	beq.n	8000b20 <I2C_MasterRequestWrite+0xa4>
      return HAL_TIMEOUT;
 8000aea:	2003      	movs	r0, #3
 8000aec:	e01b      	b.n	8000b26 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000aee:	11eb      	asrs	r3, r5, #7
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	f003 0306 	and.w	r3, r3, #6
 8000af6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000afa:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4632      	mov	r2, r6
 8000b00:	490b      	ldr	r1, [pc, #44]	; (8000b30 <I2C_MasterRequestWrite+0xb4>)
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff ff6f 	bl	80009e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b08:	b130      	cbz	r0, 8000b18 <I2C_MasterRequestWrite+0x9c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d001      	beq.n	8000b14 <I2C_MasterRequestWrite+0x98>
        return HAL_TIMEOUT;
 8000b10:	2003      	movs	r0, #3
 8000b12:	e008      	b.n	8000b26 <I2C_MasterRequestWrite+0xaa>
        return HAL_ERROR;
 8000b14:	2001      	movs	r0, #1
 8000b16:	e006      	b.n	8000b26 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	b2ed      	uxtb	r5, r5
 8000b1c:	611d      	str	r5, [r3, #16]
 8000b1e:	e7da      	b.n	8000ad6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
 8000b22:	e000      	b.n	8000b26 <I2C_MasterRequestWrite+0xaa>
    return HAL_TIMEOUT;
 8000b24:	2003      	movs	r0, #3
}
 8000b26:	b003      	add	sp, #12
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	00010002 	.word	0x00010002
 8000b30:	00010008 	.word	0x00010008

08000b34 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	4604      	mov	r4, r0
 8000b38:	460d      	mov	r5, r1
 8000b3a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b44:	d119      	bne.n	8000b7a <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff fefe 	bl	8000948 <I2C_IsAcknowledgeFailed>
 8000b4c:	b9b8      	cbnz	r0, 8000b7e <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000b4e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000b52:	d0f3      	beq.n	8000b3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000b54:	b125      	cbz	r5, 8000b60 <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 8000b56:	f7ff fd77 	bl	8000648 <HAL_GetTick>
 8000b5a:	1b80      	subs	r0, r0, r6
 8000b5c:	42a8      	cmp	r0, r5
 8000b5e:	d9ed      	bls.n	8000b3c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b62:	f043 0320 	orr.w	r3, r3, #32
 8000b66:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000b72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000b76:	2003      	movs	r0, #3
 8000b78:	e000      	b.n	8000b7c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
  return HAL_OK;      
 8000b7a:	2000      	movs	r0, #0
}
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000b7e:	2001      	movs	r0, #1
 8000b80:	e7fc      	b.n	8000b7c <I2C_WaitOnTXEFlagUntilTimeout+0x48>

08000b82 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000b82:	b570      	push	{r4, r5, r6, lr}
 8000b84:	4604      	mov	r4, r0
 8000b86:	460d      	mov	r5, r1
 8000b88:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f013 0f04 	tst.w	r3, #4
 8000b92:	d119      	bne.n	8000bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b94:	4620      	mov	r0, r4
 8000b96:	f7ff fed7 	bl	8000948 <I2C_IsAcknowledgeFailed>
 8000b9a:	b9b8      	cbnz	r0, 8000bcc <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8000b9c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8000ba0:	d0f3      	beq.n	8000b8a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ba2:	b125      	cbz	r5, 8000bae <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 8000ba4:	f7ff fd50 	bl	8000648 <HAL_GetTick>
 8000ba8:	1b80      	subs	r0, r0, r6
 8000baa:	42a8      	cmp	r0, r5
 8000bac:	d9ed      	bls.n	8000b8a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000bba:	2220      	movs	r2, #32
 8000bbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000bc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	e000      	b.n	8000bca <I2C_WaitOnBTFFlagUntilTimeout+0x48>
  return HAL_OK;
 8000bc8:	2000      	movs	r0, #0
}
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
 8000bce:	e7fc      	b.n	8000bca <I2C_WaitOnBTFFlagUntilTimeout+0x48>

08000bd0 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	f000 8082 	beq.w	8000cda <HAL_I2C_Init+0x10a>
{
 8000bd6:	b510      	push	{r4, lr}
 8000bd8:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000bda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d041      	beq.n	8000c66 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000be2:	2324      	movs	r3, #36	; 0x24
 8000be4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000be8:	6822      	ldr	r2, [r4, #0]
 8000bea:	6813      	ldr	r3, [r2, #0]
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bf2:	f000 fa33 	bl	800105c <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	; (8000ce0 <HAL_I2C_Init+0x110>)
 8000bf8:	fba3 2300 	umull	r2, r3, r3, r0
 8000bfc:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8000bfe:	6822      	ldr	r2, [r4, #0]
 8000c00:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c02:	6861      	ldr	r1, [r4, #4]
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_I2C_Init+0x114>)
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d832      	bhi.n	8000c70 <HAL_I2C_Init+0xa0>
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	6822      	ldr	r2, [r4, #0]
 8000c0e:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c10:	6863      	ldr	r3, [r4, #4]
 8000c12:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_I2C_Init+0x114>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d835      	bhi.n	8000c84 <HAL_I2C_Init+0xb4>
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000c22:	4218      	tst	r0, r3
 8000c24:	d100      	bne.n	8000c28 <HAL_I2C_Init+0x58>
 8000c26:	2004      	movs	r0, #4
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c2c:	69e3      	ldr	r3, [r4, #28]
 8000c2e:	6a21      	ldr	r1, [r4, #32]
 8000c30:	6822      	ldr	r2, [r4, #0]
 8000c32:	430b      	orrs	r3, r1
 8000c34:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000c36:	6923      	ldr	r3, [r4, #16]
 8000c38:	68e1      	ldr	r1, [r4, #12]
 8000c3a:	6822      	ldr	r2, [r4, #0]
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000c40:	6963      	ldr	r3, [r4, #20]
 8000c42:	69a1      	ldr	r1, [r4, #24]
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c54:	2000      	movs	r0, #0
 8000c56:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c5e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000c64:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000c66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c6a:	f001 fc83 	bl	8002574 <HAL_I2C_MspInit>
 8000c6e:	e7b8      	b.n	8000be2 <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000c70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <HAL_I2C_Init+0x118>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	099b      	lsrs	r3, r3, #6
 8000c80:	3301      	adds	r3, #1
 8000c82:	e7c3      	b.n	8000c0c <HAL_I2C_Init+0x3c>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c84:	68a1      	ldr	r1, [r4, #8]
 8000c86:	b989      	cbnz	r1, 8000cac <HAL_I2C_Init+0xdc>
 8000c88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000c8c:	fbb0 f2f2 	udiv	r2, r0, r2
 8000c90:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	0952      	lsrs	r2, r2, #5
 8000c9a:	b9e2      	cbnz	r2, 8000cd6 <HAL_I2C_Init+0x106>
 8000c9c:	b991      	cbnz	r1, 8000cc4 <HAL_I2C_Init+0xf4>
 8000c9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ca2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca6:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000caa:	e7bd      	b.n	8000c28 <HAL_I2C_Init+0x58>
 8000cac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000cb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cb4:	fbb0 f2f2 	udiv	r2, r0, r2
 8000cb8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	0952      	lsrs	r2, r2, #5
 8000cc2:	e7ea      	b.n	8000c9a <HAL_I2C_Init+0xca>
 8000cc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000cc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ccc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cd0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000cd4:	e7a8      	b.n	8000c28 <HAL_I2C_Init+0x58>
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e7a6      	b.n	8000c28 <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	000186a0 	.word	0x000186a0
 8000ce8:	10624dd3 	.word	0x10624dd3

08000cec <HAL_I2C_Master_Transmit>:
{
 8000cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	460f      	mov	r7, r1
 8000cf6:	4691      	mov	r9, r2
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8000cfc:	f7ff fca4 	bl	8000648 <HAL_GetTick>
 8000d00:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000d02:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8000d06:	b2c0      	uxtb	r0, r0
 8000d08:	2820      	cmp	r0, #32
 8000d0a:	d004      	beq.n	8000d16 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8000d0c:	2702      	movs	r7, #2
}
 8000d0e:	4638      	mov	r0, r7
 8000d10:	b005      	add	sp, #20
 8000d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d16:	9500      	str	r5, [sp, #0]
 8000d18:	2319      	movs	r3, #25
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4955      	ldr	r1, [pc, #340]	; (8000e74 <HAL_I2C_Master_Transmit+0x188>)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fe27 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	f040 80a0 	bne.w	8000e6a <HAL_I2C_Master_Transmit+0x17e>
    __HAL_LOCK(hi2c);
 8000d2a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	f000 809d 	beq.w	8000e6e <HAL_I2C_Master_Transmit+0x182>
 8000d34:	2301      	movs	r3, #1
 8000d36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	f012 0f01 	tst.w	r2, #1
 8000d42:	d103      	bne.n	8000d4c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f042 0201 	orr.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000d4c:	6822      	ldr	r2, [r4, #0]
 8000d4e:	6813      	ldr	r3, [r2, #0]
 8000d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d54:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d56:	2321      	movs	r3, #33	; 0x21
 8000d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000d66:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000d6a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d6e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000d72:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d76:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000d78:	462b      	mov	r3, r5
 8000d7a:	4632      	mov	r2, r6
 8000d7c:	4639      	mov	r1, r7
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f7ff fe7c 	bl	8000a7c <I2C_MasterRequestWrite>
 8000d84:	4607      	mov	r7, r0
 8000d86:	b160      	cbz	r0, 8000da2 <HAL_I2C_Master_Transmit+0xb6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d004      	beq.n	8000d98 <HAL_I2C_Master_Transmit+0xac>
        __HAL_UNLOCK(hi2c);
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000d94:	2703      	movs	r7, #3
 8000d96:	e7ba      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
        __HAL_UNLOCK(hi2c);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000d9e:	2701      	movs	r7, #1
 8000da0:	e7b5      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000da2:	2300      	movs	r3, #0
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	9203      	str	r2, [sp, #12]
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	9303      	str	r3, [sp, #12]
 8000db0:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000db2:	e012      	b.n	8000dda <HAL_I2C_Master_Transmit+0xee>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	d001      	beq.n	8000dbe <HAL_I2C_Master_Transmit+0xd2>
          return HAL_TIMEOUT;
 8000dba:	2703      	movs	r7, #3
 8000dbc:	e7a7      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000dbe:	6822      	ldr	r2, [r4, #0]
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8000dc8:	2701      	movs	r7, #1
 8000dca:	e7a0      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000dcc:	462a      	mov	r2, r5
 8000dce:	4631      	mov	r1, r6
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff fed6 	bl	8000b82 <I2C_WaitOnBTFFlagUntilTimeout>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d12d      	bne.n	8000e36 <HAL_I2C_Master_Transmit+0x14a>
    while(hi2c->XferSize > 0U)
 8000dda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d036      	beq.n	8000e4e <HAL_I2C_Master_Transmit+0x162>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000de0:	462a      	mov	r2, r5
 8000de2:	4631      	mov	r1, r6
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff fea5 	bl	8000b34 <I2C_WaitOnTXEFlagUntilTimeout>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d1e2      	bne.n	8000db4 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	6262      	str	r2, [r4, #36]	; 0x24
 8000df4:	6822      	ldr	r2, [r4, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8000dfa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8000dfc:	b289      	uxth	r1, r1
 8000dfe:	3901      	subs	r1, #1
 8000e00:	b289      	uxth	r1, r1
 8000e02:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000e04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e06:	3b01      	subs	r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000e0c:	6822      	ldr	r2, [r4, #0]
 8000e0e:	6951      	ldr	r1, [r2, #20]
 8000e10:	f011 0f04 	tst.w	r1, #4
 8000e14:	d0da      	beq.n	8000dcc <HAL_I2C_Master_Transmit+0xe0>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0d8      	beq.n	8000dcc <HAL_I2C_Master_Transmit+0xe0>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e1c:	1c59      	adds	r1, r3, #1
 8000e1e:	6261      	str	r1, [r4, #36]	; 0x24
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8000e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000e2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e30:	3b01      	subs	r3, #1
 8000e32:	8523      	strh	r3, [r4, #40]	; 0x28
 8000e34:	e7ca      	b.n	8000dcc <HAL_I2C_Master_Transmit+0xe0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d001      	beq.n	8000e40 <HAL_I2C_Master_Transmit+0x154>
          return HAL_TIMEOUT;
 8000e3c:	2703      	movs	r7, #3
 8000e3e:	e766      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e40:	6822      	ldr	r2, [r4, #0]
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e48:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 8000e4a:	2701      	movs	r7, #1
 8000e4c:	e75f      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000e64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000e68:	e751      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8000e6a:	2702      	movs	r7, #2
 8000e6c:	e74f      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8000e6e:	2702      	movs	r7, #2
 8000e70:	e74d      	b.n	8000d0e <HAL_I2C_Master_Transmit+0x22>
 8000e72:	bf00      	nop
 8000e74:	00100002 	.word	0x00100002

08000e78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_PWREx_EnableOverDrive+0x70>)
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_PWREx_EnableOverDrive+0x74>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e9a:	f7ff fbd5 	bl	8000648 <HAL_GetTick>
 8000e9e:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000ea8:	d108      	bne.n	8000ebc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eaa:	f7ff fbcd 	bl	8000648 <HAL_GetTick>
 8000eae:	1b00      	subs	r0, r0, r4
 8000eb0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000eb4:	d9f4      	bls.n	8000ea0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_PWREx_EnableOverDrive+0x74>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8000ec2:	f7ff fbc1 	bl	8000648 <HAL_GetTick>
 8000ec6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x78>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed0:	d107      	bne.n	8000ee2 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ed2:	f7ff fbb9 	bl	8000648 <HAL_GetTick>
 8000ed6:	1b00      	subs	r0, r0, r4
 8000ed8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000edc:	d9f4      	bls.n	8000ec8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e7ea      	b.n	8000eb8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e7e8      	b.n	8000eb8 <HAL_PWREx_EnableOverDrive+0x40>
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	420e0000 	.word	0x420e0000
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	f000 809a 	beq.w	800102e <HAL_RCC_ClockConfig+0x13a>
{
 8000efa:	b570      	push	{r4, r5, r6, lr}
 8000efc:	460d      	mov	r5, r1
 8000efe:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f00:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <HAL_RCC_ClockConfig+0x14c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d208      	bcs.n	8000f1e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0c:	b2cb      	uxtb	r3, r1
 8000f0e:	4a4c      	ldr	r2, [pc, #304]	; (8001040 <HAL_RCC_ClockConfig+0x14c>)
 8000f10:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	f040 808a 	bne.w	8001032 <HAL_RCC_ClockConfig+0x13e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	f013 0f02 	tst.w	r3, #2
 8000f24:	d017      	beq.n	8000f56 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f26:	f013 0f04 	tst.w	r3, #4
 8000f2a:	d004      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f2c:	4a45      	ldr	r2, [pc, #276]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f2e:	6893      	ldr	r3, [r2, #8]
 8000f30:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f34:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	f013 0f08 	tst.w	r3, #8
 8000f3c:	d004      	beq.n	8000f48 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f3e:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f40:	6893      	ldr	r3, [r2, #8]
 8000f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f48:	4a3e      	ldr	r2, [pc, #248]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f4a:	6893      	ldr	r3, [r2, #8]
 8000f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f50:	68a1      	ldr	r1, [r4, #8]
 8000f52:	430b      	orrs	r3, r1
 8000f54:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f013 0f01 	tst.w	r3, #1
 8000f5c:	d032      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5e:	6863      	ldr	r3, [r4, #4]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d021      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f64:	1e9a      	subs	r2, r3, #2
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d925      	bls.n	8000fb6 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6a:	4a36      	ldr	r2, [pc, #216]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	f012 0f02 	tst.w	r2, #2
 8000f72:	d060      	beq.n	8001036 <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f74:	4933      	ldr	r1, [pc, #204]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f76:	688a      	ldr	r2, [r1, #8]
 8000f78:	f022 0203 	bic.w	r2, r2, #3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f80:	f7ff fb62 	bl	8000648 <HAL_GetTick>
 8000f84:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	6862      	ldr	r2, [r4, #4]
 8000f90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f94:	d016      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f96:	f7ff fb57 	bl	8000648 <HAL_GetTick>
 8000f9a:	1b80      	subs	r0, r0, r6
 8000f9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fa0:	4298      	cmp	r0, r3
 8000fa2:	d9f0      	bls.n	8000f86 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	e041      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000fb0:	d1e0      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	e03a      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fbe:	d1d9      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	e033      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <HAL_RCC_ClockConfig+0x14c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	42ab      	cmp	r3, r5
 8000fce:	d907      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd0:	b2ea      	uxtb	r2, r5
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_RCC_ClockConfig+0x14c>)
 8000fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	42ab      	cmp	r3, r5
 8000fde:	d12c      	bne.n	800103a <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	f013 0f04 	tst.w	r3, #4
 8000fe6:	d006      	beq.n	8000ff6 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8000fea:	6893      	ldr	r3, [r2, #8]
 8000fec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ff0:	68e1      	ldr	r1, [r4, #12]
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	f013 0f08 	tst.w	r3, #8
 8000ffc:	d007      	beq.n	800100e <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8001000:	6893      	ldr	r3, [r2, #8]
 8001002:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001006:	6921      	ldr	r1, [r4, #16]
 8001008:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800100c:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800100e:	f000 fa6f 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_RCC_ClockConfig+0x150>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_RCC_ClockConfig+0x154>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	40d8      	lsrs	r0, r3
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_RCC_ClockConfig+0x158>)
 8001022:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff fac5 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 800102a:	2000      	movs	r0, #0
}
 800102c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800102e:	2001      	movs	r0, #1
}
 8001030:	4770      	bx	lr
      return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	e7fa      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	e7f8      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	e7f6      	b.n	800102c <HAL_RCC_ClockConfig+0x138>
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00
 8001044:	40023800 	.word	0x40023800
 8001048:	08003020 	.word	0x08003020
 800104c:	20000008 	.word	0x20000008

08001050 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <HAL_RCC_GetHCLKFreq+0x8>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800105c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800105e:	f7ff fff7 	bl	8001050 <HAL_RCC_GetHCLKFreq>
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800106a:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
}
 800106e:	40d8      	lsrs	r0, r3
 8001070:	bd08      	pop	{r3, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	08003030 	.word	0x08003030

0800107c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	4604      	mov	r4, r0

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001082:	6806      	ldr	r6, [r0, #0]
 8001084:	f016 0601 	ands.w	r6, r6, #1
 8001088:	d00d      	beq.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800108a:	4a96      	ldr	r2, [pc, #600]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800108c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001090:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001094:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001096:	430b      	orrs	r3, r1
 8001098:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800109c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 809b 	beq.w	80011da <HAL_RCCEx_PeriphCLKConfig+0x15e>
  uint32_t plli2sused = 0U;
 80010a4:	2600      	movs	r6, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f013 0f02 	tst.w	r3, #2
 80010ac:	d00b      	beq.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80010ae:	4a8d      	ldr	r2, [pc, #564]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80010b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80010b4:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80010b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80010ba:	430b      	orrs	r3, r1
 80010bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80010c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010c2:	b903      	cbnz	r3, 80010c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1U;
 80010c4:	2601      	movs	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80010c6:	6825      	ldr	r5, [r4, #0]
 80010c8:	f015 0504 	ands.w	r5, r5, #4
 80010cc:	d00f      	beq.n	80010ee <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80010d0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80010d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80010d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80010da:	430b      	orrs	r3, r1
 80010dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80010e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010e6:	d07a      	beq.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d07a      	beq.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  uint32_t pllsaiused = 0U;
 80010ec:	2500      	movs	r5, #0
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f013 0f08 	tst.w	r3, #8
 80010f4:	d00e      	beq.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80010f6:	4a7b      	ldr	r2, [pc, #492]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80010f8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80010fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001102:	430b      	orrs	r3, r1
 8001104:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001108:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800110a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110e:	d06a      	beq.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001110:	b903      	cbnz	r3, 8001114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      pllsaiused = 1U;
 8001112:	2501      	movs	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	f013 0f20 	tst.w	r3, #32
 800111a:	d166      	bne.n	80011ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	f013 0f10 	tst.w	r3, #16
 8001122:	d004      	beq.n	800112e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001124:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8001128:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800112a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001134:	d008      	beq.n	8001148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001136:	4a6b      	ldr	r2, [pc, #428]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001138:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800113c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001140:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001142:	430b      	orrs	r3, r1
 8001144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800114e:	d008      	beq.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001150:	4a64      	ldr	r2, [pc, #400]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001152:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800115a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800115c:	430b      	orrs	r3, r1
 800115e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001168:	d00d      	beq.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800116a:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800116c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001170:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001174:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001176:	430b      	orrs	r3, r1
 8001178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800117c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800117e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001182:	f000 809b 	beq.w	80012bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	f413 7f00 	tst.w	r3, #512	; 0x200
 800118c:	d008      	beq.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800118e:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001190:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001198:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800119a:	430b      	orrs	r3, r1
 800119c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80011a8:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80011aa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80011ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80011b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80011b4:	430b      	orrs	r3, r1
 80011b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80011ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80011bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011c0:	d07e      	beq.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d17c      	bne.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011cc:	d078      	beq.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80011ce:	2d01      	cmp	r5, #1
 80011d0:	f000 8125 	beq.w	800141e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011d4:	2000      	movs	r0, #0
}
 80011d6:	b003      	add	sp, #12
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      plli2sused = 1U;
 80011da:	2601      	movs	r6, #1
 80011dc:	e763      	b.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1U;
 80011de:	2601      	movs	r6, #1
 80011e0:	e782      	b.n	80010e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      pllsaiused = 1U;
 80011e2:	2501      	movs	r5, #1
 80011e4:	e783      	b.n	80010ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      plli2sused = 1U;
 80011e6:	2601      	movs	r6, #1
 80011e8:	e792      	b.n	8001110 <HAL_RCCEx_PeriphCLKConfig+0x94>
    __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80011f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001202:	4a3a      	ldr	r2, [pc, #232]	; (80012ec <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800120c:	f7ff fa1c 	bl	8000648 <HAL_GetTick>
 8001210:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001212:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f413 7f80 	tst.w	r3, #256	; 0x100
 800121a:	d106      	bne.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800121c:	f7ff fa14 	bl	8000648 <HAL_GetTick>
 8001220:	1bc0      	subs	r0, r0, r7
 8001222:	2802      	cmp	r0, #2
 8001224:	d9f5      	bls.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0x196>
        return HAL_TIMEOUT;
 8001226:	2003      	movs	r0, #3
 8001228:	e7d5      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800122e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001232:	d014      	beq.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001234:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001236:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800123a:	429a      	cmp	r2, r3
 800123c:	d00f      	beq.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001242:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001246:	492a      	ldr	r1, [pc, #168]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001248:	2001      	movs	r0, #1
 800124a:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 800124e:	2000      	movs	r0, #0
 8001250:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8001254:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001258:	f013 0f01 	tst.w	r3, #1
 800125c:	d112      	bne.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800125e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001260:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001264:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001268:	d01d      	beq.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800126c:	6893      	ldr	r3, [r2, #8]
 800126e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001272:	6093      	str	r3, [r2, #8]
 8001274:	491b      	ldr	r1, [pc, #108]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001276:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001278:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800127a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800127e:	4313      	orrs	r3, r2
 8001280:	670b      	str	r3, [r1, #112]	; 0x70
 8001282:	e74b      	b.n	800111c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 8001284:	f7ff f9e0 	bl	8000648 <HAL_GetTick>
 8001288:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	f013 0f02 	tst.w	r3, #2
 8001292:	d1e4      	bne.n	800125e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff f9d8 	bl	8000648 <HAL_GetTick>
 8001298:	1bc0      	subs	r0, r0, r7
 800129a:	f241 3388 	movw	r3, #5000	; 0x1388
 800129e:	4298      	cmp	r0, r3
 80012a0:	d9f3      	bls.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x20e>
            return HAL_TIMEOUT;
 80012a2:	2003      	movs	r0, #3
 80012a4:	e797      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012a6:	490f      	ldr	r1, [pc, #60]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80012a8:	688a      	ldr	r2, [r1, #8]
 80012aa:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80012ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80012b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
 80012ba:	e7db      	b.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      pllsaiused = 1U;
 80012bc:	2501      	movs	r5, #1
 80012be:	e762      	b.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_PLLI2S_DISABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80012c6:	f7ff f9bf 	bl	8000648 <HAL_GetTick>
 80012ca:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80012d4:	d00e      	beq.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012d6:	f7ff f9b7 	bl	8000648 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9f5      	bls.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0x250>
        return HAL_TIMEOUT;
 80012e0:	2003      	movs	r0, #3
 80012e2:	e778      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42471000 	.word	0x42471000
 80012ec:	40007000 	.word	0x40007000
 80012f0:	42470000 	.word	0x42470000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	f013 0f01 	tst.w	r3, #1
 80012fa:	d001      	beq.n	8001300 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80012fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012fe:	b122      	cbz	r2, 800130a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8001300:	f013 0f02 	tst.w	r3, #2
 8001304:	d015      	beq.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001308:	b99b      	cbnz	r3, 8001332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800130a:	4a77      	ldr	r2, [pc, #476]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800130c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001310:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001314:	6863      	ldr	r3, [r4, #4]
 8001316:	68a6      	ldr	r6, [r4, #8]
 8001318:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800131c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001320:	4303      	orrs	r3, r0
 8001322:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001326:	430b      	orrs	r3, r1
 8001328:	6961      	ldr	r1, [r4, #20]
 800132a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800132e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f013 0f04 	tst.w	r3, #4
 8001338:	d003      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 800133a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800133c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001340:	d006      	beq.n	8001350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001342:	f013 0f08 	tst.w	r3, #8
 8001346:	d020      	beq.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x30e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001348:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800134a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800134e:	d11c      	bne.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001350:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001352:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001356:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	68a6      	ldr	r6, [r4, #8]
 800135e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001362:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001366:	4303      	orrs	r3, r0
 8001368:	6920      	ldr	r0, [r4, #16]
 800136a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800136e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001372:	430b      	orrs	r3, r1
 8001374:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001378:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800137c:	f023 031f 	bic.w	r3, r3, #31
 8001380:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001382:	3901      	subs	r1, #1
 8001384:	430b      	orrs	r3, r1
 8001386:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001390:	d003      	beq.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x31e>
 8001392:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001398:	d028      	beq.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x370>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80013a0:	d011      	beq.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80013a2:	6863      	ldr	r3, [r4, #4]
 80013a4:	68a2      	ldr	r2, [r4, #8]
 80013a6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013aa:	68e2      	ldr	r2, [r4, #12]
 80013ac:	0852      	lsrs	r2, r2, #1
 80013ae:	3a01      	subs	r2, #1
 80013b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013ba:	6962      	ldr	r2, [r4, #20]
 80013bc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80013c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80013cc:	f7ff f93c 	bl	8000648 <HAL_GetTick>
 80013d0:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80013da:	f47f aef8 	bne.w	80011ce <HAL_RCCEx_PeriphCLKConfig+0x152>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80013de:	f7ff f933 	bl	8000648 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	2802      	cmp	r0, #2
 80013e6:	d9f4      	bls.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
        return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
 80013ea:	e6f4      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80013ec:	483e      	ldr	r0, [pc, #248]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80013ee:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80013f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013f6:	1c5a      	adds	r2, r3, #1
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80013f8:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80013fc:	6863      	ldr	r3, [r4, #4]
 80013fe:	68a1      	ldr	r1, [r4, #8]
 8001400:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001404:	68e1      	ldr	r1, [r4, #12]
 8001406:	0849      	lsrs	r1, r1, #1
 8001408:	3901      	subs	r1, #1
 800140a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800140e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001412:	f006 42e0 	and.w	r2, r6, #1879048192	; 0x70000000
 8001416:	4313      	orrs	r3, r2
 8001418:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800141c:	e7bd      	b.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLSAI_DISABLE();
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001420:	2200      	movs	r2, #0
 8001422:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8001424:	f7ff f910 	bl	8000648 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800142a:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001432:	d006      	beq.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001434:	f7ff f908 	bl	8000648 <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	2802      	cmp	r0, #2
 800143c:	d9f5      	bls.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
        return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	e6c9      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	f013 0f04 	tst.w	r3, #4
 8001448:	d001      	beq.n	800144e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800144a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800144c:	b122      	cbz	r2, 8001458 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800144e:	f013 0f08 	tst.w	r3, #8
 8001452:	d01a      	beq.n	800148a <HAL_RCCEx_PeriphCLKConfig+0x40e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001456:	b9c3      	cbnz	r3, 800148a <HAL_RCCEx_PeriphCLKConfig+0x40e>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001458:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800145a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800145e:	69a3      	ldr	r3, [r4, #24]
 8001460:	69e0      	ldr	r0, [r4, #28]
 8001462:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001466:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800146a:	430b      	orrs	r3, r1
 800146c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800146e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001472:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001476:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800147a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800147e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001480:	3901      	subs	r1, #1
 8001482:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001486:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001490:	d003      	beq.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8001492:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001498:	d011      	beq.n	80014be <HAL_RCCEx_PeriphCLKConfig+0x442>
    __HAL_RCC_PLLSAI_ENABLE();
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800149c:	2201      	movs	r2, #1
 800149e:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 80014a0:	f7ff f8d2 	bl	8000648 <HAL_GetTick>
 80014a4:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80014ae:	d118      	bne.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x466>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80014b0:	f7ff f8ca 	bl	8000648 <HAL_GetTick>
 80014b4:	1b00      	subs	r0, r0, r4
 80014b6:	2802      	cmp	r0, #2
 80014b8:	d9f5      	bls.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
        return HAL_TIMEOUT;
 80014ba:	2003      	movs	r0, #3
 80014bc:	e68b      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80014be:	480a      	ldr	r0, [pc, #40]	; (80014e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80014c0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80014c4:	69a3      	ldr	r3, [r4, #24]
 80014c6:	69e2      	ldr	r2, [r4, #28]
 80014c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014cc:	6a22      	ldr	r2, [r4, #32]
 80014ce:	0852      	lsrs	r2, r2, #1
 80014d0:	3a01      	subs	r2, #1
 80014d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014d6:	f001 6270 	and.w	r2, r1, #251658240	; 0xf000000
 80014da:	4313      	orrs	r3, r2
 80014dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80014e0:	e7db      	b.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  return HAL_OK;
 80014e2:	2000      	movs	r0, #0
 80014e4:	e677      	b.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000

080014f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014f2:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d007      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x1e>
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d05b      	beq.n	80015ba <HAL_RCC_GetSysClockFreq+0xca>
 8001502:	2b04      	cmp	r3, #4
 8001504:	d001      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0x1a>
 8001506:	4858      	ldr	r0, [pc, #352]	; (8001668 <HAL_RCC_GetSysClockFreq+0x178>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001508:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800150a:	4858      	ldr	r0, [pc, #352]	; (800166c <HAL_RCC_GetSysClockFreq+0x17c>)
 800150c:	e7fc      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150e:	4b55      	ldr	r3, [pc, #340]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800151c:	d02a      	beq.n	8001574 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001526:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800152a:	ebb1 000c 	subs.w	r0, r1, ip
 800152e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001532:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001536:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800153a:	0181      	lsls	r1, r0, #6
 800153c:	1a09      	subs	r1, r1, r0
 800153e:	eb63 030e 	sbc.w	r3, r3, lr
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001548:	00c9      	lsls	r1, r1, #3
 800154a:	eb11 0c0c 	adds.w	ip, r1, ip
 800154e:	f143 0300 	adc.w	r3, r3, #0
 8001552:	0259      	lsls	r1, r3, #9
 8001554:	2300      	movs	r3, #0
 8001556:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800155a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800155e:	f7fe fea7 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001562:	4b40      	ldr	r3, [pc, #256]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800156a:	3301      	adds	r3, #1
 800156c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800156e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001572:	e7c9      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800157c:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001580:	ebb1 000c 	subs.w	r0, r1, ip
 8001584:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001588:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800158c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001590:	0181      	lsls	r1, r0, #6
 8001592:	1a09      	subs	r1, r1, r0
 8001594:	eb63 030e 	sbc.w	r3, r3, lr
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	eb11 0c0c 	adds.w	ip, r1, ip
 80015a4:	f143 0300 	adc.w	r3, r3, #0
 80015a8:	0299      	lsls	r1, r3, #10
 80015aa:	2300      	movs	r3, #0
 80015ac:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80015b0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80015b4:	f7fe fe7c 	bl	80002b0 <__aeabi_uldivmod>
 80015b8:	e7d3      	b.n	8001562 <HAL_RCC_GetSysClockFreq+0x72>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ba:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015c8:	d028      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80015d2:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80015d6:	ebb1 000c 	subs.w	r0, r1, ip
 80015da:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80015de:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80015e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015e6:	0181      	lsls	r1, r0, #6
 80015e8:	1a09      	subs	r1, r1, r0
 80015ea:	eb63 030e 	sbc.w	r3, r3, lr
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015f4:	00c9      	lsls	r1, r1, #3
 80015f6:	eb11 0c0c 	adds.w	ip, r1, ip
 80015fa:	f143 0300 	adc.w	r3, r3, #0
 80015fe:	0259      	lsls	r1, r3, #9
 8001600:	2300      	movs	r3, #0
 8001602:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001606:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800160a:	f7fe fe51 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001616:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800161a:	e775      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_RCC_GetSysClockFreq+0x174>)
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001624:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001628:	ebb1 000c 	subs.w	r0, r1, ip
 800162c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001630:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001634:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001638:	0181      	lsls	r1, r0, #6
 800163a:	1a09      	subs	r1, r1, r0
 800163c:	eb63 030e 	sbc.w	r3, r3, lr
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001646:	00c9      	lsls	r1, r1, #3
 8001648:	eb11 0c0c 	adds.w	ip, r1, ip
 800164c:	f143 0300 	adc.w	r3, r3, #0
 8001650:	0299      	lsls	r1, r3, #10
 8001652:	2300      	movs	r3, #0
 8001654:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001658:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800165c:	f7fe fe28 	bl	80002b0 <__aeabi_uldivmod>
 8001660:	e7d5      	b.n	800160e <HAL_RCC_GetSysClockFreq+0x11e>
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	00f42400 	.word	0x00f42400
 800166c:	007a1200 	.word	0x007a1200

08001670 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	6803      	ldr	r3, [r0, #0]
 8001678:	f013 0f01 	tst.w	r3, #1
 800167c:	d041      	beq.n	8001702 <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800167e:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d032      	beq.n	80016f0 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800168a:	4b97      	ldr	r3, [pc, #604]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d027      	beq.n	80016e6 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b94      	ldr	r3, [pc, #592]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800169e:	2b0c      	cmp	r3, #12
 80016a0:	d059      	beq.n	8001756 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d05b      	beq.n	8001762 <HAL_RCC_OscConfig+0xf2>
 80016aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ae:	d05e      	beq.n	800176e <HAL_RCC_OscConfig+0xfe>
 80016b0:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d05c      	beq.n	8001782 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7fe ffbe 	bl	8000648 <HAL_GetTick>
 80016cc:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016d6:	d114      	bne.n	8001702 <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7fe ffb6 	bl	8000648 <HAL_GetTick>
 80016dc:	1b40      	subs	r0, r0, r5
 80016de:	2864      	cmp	r0, #100	; 0x64
 80016e0:	d9f5      	bls.n	80016ce <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80016e2:	2003      	movs	r0, #3
 80016e4:	e19f      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e6:	4b80      	ldr	r3, [pc, #512]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016ee:	d0d2      	beq.n	8001696 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_OscConfig+0x92>
 80016fa:	6863      	ldr	r3, [r4, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 818d 	beq.w	8001a1c <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f013 0f02 	tst.w	r3, #2
 8001708:	d060      	beq.n	80017cc <HAL_RCC_OscConfig+0x15c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f013 0f0c 	tst.w	r3, #12
 8001712:	d04a      	beq.n	80017aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001714:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800171c:	2b08      	cmp	r3, #8
 800171e:	d03f      	beq.n	80017a0 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001720:	4b71      	ldr	r3, [pc, #452]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d069      	beq.n	8001800 <HAL_RCC_OscConfig+0x190>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	68e3      	ldr	r3, [r4, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d075      	beq.n	800181e <HAL_RCC_OscConfig+0x1ae>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001732:	4b6e      	ldr	r3, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7fe ff86 	bl	8000648 <HAL_GetTick>
 800173c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f013 0f02 	tst.w	r3, #2
 8001746:	d161      	bne.n	800180c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7fe ff7e 	bl	8000648 <HAL_GetTick>
 800174c:	1b40      	subs	r0, r0, r5
 800174e:	2802      	cmp	r0, #2
 8001750:	d9f5      	bls.n	800173e <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001752:	2003      	movs	r0, #3
 8001754:	e167      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800175e:	d0a0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x32>
 8001760:	e7c6      	b.n	80016f0 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001762:	4a61      	ldr	r2, [pc, #388]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e7a9      	b.n	80016c2 <HAL_RCC_OscConfig+0x52>
 800176e:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e79f      	b.n	80016c2 <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8001782:	f7fe ff61 	bl	8000648 <HAL_GetTick>
 8001786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001788:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001790:	d0b7      	beq.n	8001702 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001792:	f7fe ff59 	bl	8000648 <HAL_GetTick>
 8001796:	1b40      	subs	r0, r0, r5
 8001798:	2864      	cmp	r0, #100	; 0x64
 800179a:	d9f5      	bls.n	8001788 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	e142      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a0:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017a8:	d1ba      	bne.n	8001720 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f013 0f02 	tst.w	r3, #2
 80017b2:	d003      	beq.n	80017bc <HAL_RCC_OscConfig+0x14c>
 80017b4:	68e3      	ldr	r3, [r4, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	f040 8132 	bne.w	8001a20 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017be:	6813      	ldr	r3, [r2, #0]
 80017c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017c4:	6921      	ldr	r1, [r4, #16]
 80017c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017ca:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	f013 0f08 	tst.w	r3, #8
 80017d2:	d049      	beq.n	8001868 <HAL_RCC_OscConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d4:	6963      	ldr	r3, [r4, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d033      	beq.n	8001842 <HAL_RCC_OscConfig+0x1d2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7fe ff31 	bl	8000648 <HAL_GetTick>
 80017e6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e8:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f013 0f02 	tst.w	r3, #2
 80017f0:	d13a      	bne.n	8001868 <HAL_RCC_OscConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7fe ff29 	bl	8000648 <HAL_GetTick>
 80017f6:	1b40      	subs	r0, r0, r5
 80017f8:	2802      	cmp	r0, #2
 80017fa:	d9f5      	bls.n	80017e8 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 80017fc:	2003      	movs	r0, #3
 80017fe:	e112      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001808:	d190      	bne.n	800172c <HAL_RCC_OscConfig+0xbc>
 800180a:	e7ce      	b.n	80017aa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4a36      	ldr	r2, [pc, #216]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001814:	6921      	ldr	r1, [r4, #16]
 8001816:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e7d6      	b.n	80017cc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001824:	f7fe ff10 	bl	8000648 <HAL_GetTick>
 8001828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f013 0f02 	tst.w	r3, #2
 8001832:	d0cb      	beq.n	80017cc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7fe ff08 	bl	8000648 <HAL_GetTick>
 8001838:	1b40      	subs	r0, r0, r5
 800183a:	2802      	cmp	r0, #2
 800183c:	d9f5      	bls.n	800182a <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
 8001840:	e0f1      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 8001844:	2200      	movs	r2, #0
 8001846:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7fe fefd 	bl	8000648 <HAL_GetTick>
 800184e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001854:	f013 0f02 	tst.w	r3, #2
 8001858:	d006      	beq.n	8001868 <HAL_RCC_OscConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7fe fef5 	bl	8000648 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f5      	bls.n	8001850 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e0de      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	f013 0f04 	tst.w	r3, #4
 800186e:	d077      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001878:	d133      	bne.n	80018e2 <HAL_RCC_OscConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001892:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x280>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f413 7f80 	tst.w	r3, #256	; 0x100
 800189c:	d02a      	beq.n	80018f4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	68a3      	ldr	r3, [r4, #8]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d03b      	beq.n	800191c <HAL_RCC_OscConfig+0x2ac>
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d03f      	beq.n	8001928 <HAL_RCC_OscConfig+0x2b8>
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80018aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018ac:	f022 0201 	bic.w	r2, r2, #1
 80018b0:	671a      	str	r2, [r3, #112]	; 0x70
 80018b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018b4:	f022 0204 	bic.w	r2, r2, #4
 80018b8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ba:	68a3      	ldr	r3, [r4, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03d      	beq.n	800193c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7fe fec2 	bl	8000648 <HAL_GetTick>
 80018c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	f013 0f02 	tst.w	r3, #2
 80018ce:	d146      	bne.n	800195e <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7fe feba 	bl	8000648 <HAL_GetTick>
 80018d4:	1b80      	subs	r0, r0, r6
 80018d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018da:	4298      	cmp	r0, r3
 80018dc:	d9f3      	bls.n	80018c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
 80018e0:	e0a1      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2500      	movs	r5, #0
 80018e4:	e7d6      	b.n	8001894 <HAL_RCC_OscConfig+0x224>
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	42470000 	.word	0x42470000
 80018f0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_RCC_OscConfig+0x3c0>)
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018fe:	f7fe fea3 	bl	8000648 <HAL_GetTick>
 8001902:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x3c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f413 7f80 	tst.w	r3, #256	; 0x100
 800190c:	d1c7      	bne.n	800189e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7fe fe9b 	bl	8000648 <HAL_GetTick>
 8001912:	1b80      	subs	r0, r0, r6
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f5      	bls.n	8001904 <HAL_RCC_OscConfig+0x294>
          return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e084      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 800191e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e7c8      	b.n	80018ba <HAL_RCC_OscConfig+0x24a>
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 800192a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800192c:	f042 0204 	orr.w	r2, r2, #4
 8001930:	671a      	str	r2, [r3, #112]	; 0x70
 8001932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	671a      	str	r2, [r3, #112]	; 0x70
 800193a:	e7be      	b.n	80018ba <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7fe fe84 	bl	8000648 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001942:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	f013 0f02 	tst.w	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7fe fe7c 	bl	8000648 <HAL_GetTick>
 8001950:	1b80      	subs	r0, r0, r6
 8001952:	f241 3388 	movw	r3, #5000	; 0x1388
 8001956:	4298      	cmp	r0, r3
 8001958:	d9f3      	bls.n	8001942 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
 800195c:	e063      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	b9e5      	cbnz	r5, 800199a <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	69a3      	ldr	r3, [r4, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d05e      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001966:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 8001968:	6892      	ldr	r2, [r2, #8]
 800196a:	f002 020c 	and.w	r2, r2, #12
 800196e:	2a08      	cmp	r2, #8
 8001970:	d05b      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3ba>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	2b02      	cmp	r3, #2
 8001974:	d017      	beq.n	80019a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x3c8>)
 8001978:	2200      	movs	r2, #0
 800197a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe fe64 	bl	8000648 <HAL_GetTick>
 8001980:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198a:	d045      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe fe5c 	bl	8000648 <HAL_GetTick>
 8001990:	1b00      	subs	r0, r0, r4
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f5      	bls.n	8001982 <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e045      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 800199c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	e7dc      	b.n	8001960 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_RCC_OscConfig+0x3c8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80019ac:	f7fe fe4c 	bl	8000648 <HAL_GetTick>
 80019b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019ba:	d006      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe fe44 	bl	8000648 <HAL_GetTick>
 80019c0:	1b40      	subs	r0, r0, r5
 80019c2:	2802      	cmp	r0, #2
 80019c4:	d9f5      	bls.n	80019b2 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80019c6:	2003      	movs	r0, #3
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	69e3      	ldr	r3, [r4, #28]
 80019cc:	6a22      	ldr	r2, [r4, #32]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019d2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019d8:	0852      	lsrs	r2, r2, #1
 80019da:	3a01      	subs	r2, #1
 80019dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019e8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 80019ee:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_OscConfig+0x3c8>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80019f6:	f7fe fe27 	bl	8000648 <HAL_GetTick>
 80019fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_OscConfig+0x3c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a04:	d106      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7fe fe1f 	bl	8000648 <HAL_GetTick>
 8001a0a:	1b00      	subs	r0, r0, r4
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f5      	bls.n	80019fc <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8001a10:	2003      	movs	r0, #3
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a14:	2000      	movs	r0, #0
 8001a16:	e006      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e004      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	e002      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
        return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
}
 8001a26:	b002      	add	sp, #8
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	e7fb      	b.n	8001a26 <HAL_RCC_OscConfig+0x3b6>
 8001a2e:	bf00      	nop
 8001a30:	40007000 	.word	0x40007000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	42470000 	.word	0x42470000

08001a3c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 8001a3c:	b510      	push	{r4, lr}
 8001a3e:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8001a40:	6803      	ldr	r3, [r0, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a48:	d003      	beq.n	8001a52 <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001a50:	d10f      	bne.n	8001a72 <HAL_RTC_AlarmIRQHandler+0x36>
      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
    }
  }
  
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001a5a:	d003      	beq.n	8001a64 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001a62:	d10f      	bne.n	8001a84 <HAL_RTC_AlarmIRQHandler+0x48>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8001a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a6a:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	7763      	strb	r3, [r4, #29]
}
 8001a70:	bd10      	pop	{r4, pc}
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001a72:	f000 fbb3 	bl	80021dc <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	68d3      	ldr	r3, [r2, #12]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8001a80:	60d3      	str	r3, [r2, #12]
 8001a82:	e7e6      	b.n	8001a52 <HAL_RTC_AlarmIRQHandler+0x16>
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f000 fac2 	bl	800200e <HAL_RTCEx_AlarmBEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	68d3      	ldr	r3, [r2, #12]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f463 7320 	orn	r3, r3, #640	; 0x280
 8001a94:	60d3      	str	r3, [r2, #12]
 8001a96:	e7e5      	b.n	8001a64 <HAL_RTC_AlarmIRQHandler+0x28>
 8001a98:	40013c00 	.word	0x40013c00

08001a9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001a9c:	b538      	push	{r3, r4, r5, lr}
 8001a9e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001aa0:	6802      	ldr	r2, [r0, #0]
 8001aa2:	68d3      	ldr	r3, [r2, #12]
 8001aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001aa8:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aaa:	f7fe fdcd 	bl	8000648 <HAL_GetTick>
 8001aae:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f013 0f20 	tst.w	r3, #32
 8001ab8:	d107      	bne.n	8001aca <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001aba:	f7fe fdc5 	bl	8000648 <HAL_GetTick>
 8001abe:	1b40      	subs	r0, r0, r5
 8001ac0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ac4:	d9f4      	bls.n	8001ab0 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	e000      	b.n	8001acc <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 8001aca:	2000      	movs	r0, #0
}
 8001acc:	bd38      	pop	{r3, r4, r5, pc}

08001ace <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001ace:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ad0:	6803      	ldr	r3, [r0, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ad8:	d001      	beq.n	8001ade <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001ada:	2000      	movs	r0, #0
}
 8001adc:	bd38      	pop	{r3, r4, r5, pc}
 8001ade:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001ae6:	f7fe fdaf 	bl	8000648 <HAL_GetTick>
 8001aea:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001af4:	d107      	bne.n	8001b06 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001af6:	f7fe fda7 	bl	8000648 <HAL_GetTick>
 8001afa:	1b43      	subs	r3, r0, r5
 8001afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b00:	d9f4      	bls.n	8001aec <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8001b02:	2003      	movs	r0, #3
 8001b04:	e7ea      	b.n	8001adc <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8001b06:	2000      	movs	r0, #0
 8001b08:	e7e8      	b.n	8001adc <RTC_EnterInitMode+0xe>

08001b0a <HAL_RTC_Init>:
{
 8001b0a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d05c      	beq.n	8001bca <HAL_RTC_Init+0xc0>
 8001b10:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001b12:	7f43      	ldrb	r3, [r0, #29]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d041      	beq.n	8001b9c <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001b18:	2302      	movs	r3, #2
 8001b1a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	22ca      	movs	r2, #202	; 0xca
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	2253      	movs	r2, #83	; 0x53
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff ffd0 	bl	8001ace <RTC_EnterInitMode>
 8001b2e:	4605      	mov	r5, r0
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d137      	bne.n	8001ba4 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	6893      	ldr	r3, [r2, #8]
 8001b38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b40:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001b42:	6821      	ldr	r1, [r4, #0]
 8001b44:	688a      	ldr	r2, [r1, #8]
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	6920      	ldr	r0, [r4, #16]
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	6960      	ldr	r0, [r4, #20]
 8001b4e:	4303      	orrs	r3, r0
 8001b50:	4313      	orrs	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	68e2      	ldr	r2, [r4, #12]
 8001b58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	6913      	ldr	r3, [r2, #16]
 8001b5e:	68a1      	ldr	r1, [r4, #8]
 8001b60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001b64:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	68d3      	ldr	r3, [r2, #12]
 8001b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b6e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f013 0f20 	tst.w	r3, #32
 8001b78:	d01b      	beq.n	8001bb2 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b88:	69a1      	ldr	r1, [r4, #24]
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001b94:	2301      	movs	r3, #1
 8001b96:	7763      	strb	r3, [r4, #29]
}
 8001b98:	4628      	mov	r0, r5
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8001b9c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001b9e:	f000 fd15 	bl	80025cc <HAL_RTC_MspInit>
 8001ba2:	e7b9      	b.n	8001b18 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	22ff      	movs	r2, #255	; 0xff
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001baa:	2304      	movs	r3, #4
 8001bac:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8001bae:	2501      	movs	r5, #1
 8001bb0:	e7f2      	b.n	8001b98 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7ff ff72 	bl	8001a9c <HAL_RTC_WaitForSynchro>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d0de      	beq.n	8001b7a <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	22ff      	movs	r2, #255	; 0xff
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001bc6:	2501      	movs	r5, #1
 8001bc8:	e7e6      	b.n	8001b98 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8001bca:	2501      	movs	r5, #1
 8001bcc:	e7e4      	b.n	8001b98 <HAL_RTC_Init+0x8e>

08001bce <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001bce:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001bd0:	e002      	b.n	8001bd8 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8001bd2:	3301      	adds	r3, #1
    Value -= 10U;
 8001bd4:	380a      	subs	r0, #10
 8001bd6:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001bd8:	2809      	cmp	r0, #9
 8001bda:	d8fa      	bhi.n	8001bd2 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	b2db      	uxtb	r3, r3
}
 8001be0:	4318      	orrs	r0, r3
 8001be2:	4770      	bx	lr

08001be4 <HAL_RTC_SetDate>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8001be6:	7f03      	ldrb	r3, [r0, #28]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d066      	beq.n	8001cba <HAL_RTC_SetDate+0xd6>
 8001bec:	4604      	mov	r4, r0
 8001bee:	460e      	mov	r6, r1
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001bf8:	b93a      	cbnz	r2, 8001c0a <HAL_RTC_SetDate+0x26>
 8001bfa:	784b      	ldrb	r3, [r1, #1]
 8001bfc:	f013 0f10 	tst.w	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c02:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001c06:	330a      	adds	r3, #10
 8001c08:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d133      	bne.n	8001c76 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c0e:	78f0      	ldrb	r0, [r6, #3]
 8001c10:	f7ff ffdd 	bl	8001bce <RTC_ByteToBcd2>
 8001c14:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c16:	7870      	ldrb	r0, [r6, #1]
 8001c18:	f7ff ffd9 	bl	8001bce <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c1c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001c20:	78b0      	ldrb	r0, [r6, #2]
 8001c22:	f7ff ffd4 	bl	8001bce <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c26:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));   
 8001c28:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c2a:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	22ca      	movs	r2, #202	; 0xca
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	2253      	movs	r2, #83	; 0x53
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff ff47 	bl	8001ace <RTC_EnterInitMode>
 8001c40:	4606      	mov	r6, r0
 8001c42:	bb18      	cbnz	r0, 8001c8c <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8001c4a:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8001c4e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	68d3      	ldr	r3, [r2, #12]
 8001c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c58:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f013 0f20 	tst.w	r3, #32
 8001c62:	d01c      	beq.n	8001c9e <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	7723      	strb	r3, [r4, #28]
}
 8001c72:	4630      	mov	r0, r6
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c76:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c78:	7870      	ldrb	r0, [r6, #1]
 8001c7a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c7c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8001c80:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001c82:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8001c84:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001c86:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8001c8a:	e7d0      	b.n	8001c2e <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	22ff      	movs	r2, #255	; 0xff
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c92:	2304      	movs	r3, #4
 8001c94:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001c96:	2300      	movs	r3, #0
 8001c98:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001c9a:	2601      	movs	r6, #1
 8001c9c:	e7e9      	b.n	8001c72 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff fefc 	bl	8001a9c <HAL_RTC_WaitForSynchro>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d0dd      	beq.n	8001c64 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001cb6:	2601      	movs	r6, #1
 8001cb8:	e7db      	b.n	8001c72 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8001cba:	2602      	movs	r6, #2
 8001cbc:	e7d9      	b.n	8001c72 <HAL_RTC_SetDate+0x8e>

08001cbe <HAL_RTC_SetTime>:
{
 8001cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001cc0:	7f03      	ldrb	r3, [r0, #28]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d078      	beq.n	8001db8 <HAL_RTC_SetTime+0xfa>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460e      	mov	r6, r1
 8001cca:	2301      	movs	r3, #1
 8001ccc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d147      	bne.n	8001d66 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001cd6:	6803      	ldr	r3, [r0, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cde:	d101      	bne.n	8001ce4 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ce4:	7830      	ldrb	r0, [r6, #0]
 8001ce6:	f7ff ff72 	bl	8001bce <RTC_ByteToBcd2>
 8001cea:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001cec:	7870      	ldrb	r0, [r6, #1]
 8001cee:	f7ff ff6e 	bl	8001bce <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001cf2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001cf6:	78b0      	ldrb	r0, [r6, #2]
 8001cf8:	f7ff ff69 	bl	8001bce <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001cfc:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001cfe:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001d00:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	22ca      	movs	r2, #202	; 0xca
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	2253      	movs	r2, #83	; 0x53
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff fedc 	bl	8001ace <RTC_EnterInitMode>
 8001d16:	4607      	mov	r7, r0
 8001d18:	2800      	cmp	r0, #0
 8001d1a:	d136      	bne.n	8001d8a <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8001d22:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8001d26:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6893      	ldr	r3, [r2, #8]
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d30:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001d32:	6821      	ldr	r1, [r4, #0]
 8001d34:	688b      	ldr	r3, [r1, #8]
 8001d36:	68f2      	ldr	r2, [r6, #12]
 8001d38:	6930      	ldr	r0, [r6, #16]
 8001d3a:	4302      	orrs	r2, r0
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001d40:	6822      	ldr	r2, [r4, #0]
 8001d42:	68d3      	ldr	r3, [r2, #12]
 8001d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d48:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f013 0f20 	tst.w	r3, #32
 8001d52:	d023      	beq.n	8001d9c <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8001d5e:	2300      	movs	r3, #0
 8001d60:	7723      	strb	r3, [r4, #28]
}
 8001d62:	4638      	mov	r0, r7
 8001d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001d66:	6803      	ldr	r3, [r0, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d6e:	d101      	bne.n	8001d74 <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d74:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001d76:	7870      	ldrb	r0, [r6, #1]
 8001d78:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8001d7e:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001d80:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001d82:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001d84:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001d88:	e7bc      	b.n	8001d04 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	22ff      	movs	r2, #255	; 0xff
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d90:	2304      	movs	r3, #4
 8001d92:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001d94:	2300      	movs	r3, #0
 8001d96:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8001d98:	2701      	movs	r7, #1
 8001d9a:	e7e2      	b.n	8001d62 <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fe7d 	bl	8001a9c <HAL_RTC_WaitForSynchro>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d0d6      	beq.n	8001d54 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	22ff      	movs	r2, #255	; 0xff
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001dac:	2304      	movs	r3, #4
 8001dae:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001db0:	2300      	movs	r3, #0
 8001db2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8001db4:	2701      	movs	r7, #1
 8001db6:	e7d4      	b.n	8001d62 <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8001db8:	2702      	movs	r7, #2
 8001dba:	e7d2      	b.n	8001d62 <HAL_RTC_SetTime+0xa4>

08001dbc <HAL_RTC_SetAlarm_IT>:
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	460d      	mov	r5, r1
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RTC_SetAlarm_IT+0x194>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4963      	ldr	r1, [pc, #396]	; (8001f54 <HAL_RTC_SetAlarm_IT+0x198>)
 8001dc8:	fba1 1303 	umull	r1, r3, r1, r3
 8001dcc:	0adb      	lsrs	r3, r3, #11
 8001dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hrtc);
 8001dd8:	7f03      	ldrb	r3, [r0, #28]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f000 80b5 	beq.w	8001f4a <HAL_RTC_SetAlarm_IT+0x18e>
 8001de0:	4604      	mov	r4, r0
 8001de2:	2301      	movs	r3, #1
 8001de4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d161      	bne.n	8001eb2 <HAL_RTC_SetAlarm_IT+0xf6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001dee:	6803      	ldr	r3, [r0, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001df6:	d101      	bne.n	8001dfc <HAL_RTC_SetAlarm_IT+0x40>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001dfc:	69ef      	ldr	r7, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dfe:	7828      	ldrb	r0, [r5, #0]
 8001e00:	f7ff fee5 	bl	8001bce <RTC_ByteToBcd2>
 8001e04:	0406      	lsls	r6, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001e06:	7868      	ldrb	r0, [r5, #1]
 8001e08:	f7ff fee1 	bl	8001bce <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e0c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001e10:	78a8      	ldrb	r0, [r5, #2]
 8001e12:	f7ff fedc 	bl	8001bce <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001e16:	4306      	orrs	r6, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e18:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001e1a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e1e:	f895 0020 	ldrb.w	r0, [r5, #32]
 8001e22:	f7ff fed4 	bl	8001bce <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e26:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e2a:	433e      	orrs	r6, r7
              ((uint32_t)sAlarm->AlarmMask)); 
 8001e2c:	696b      	ldr	r3, [r5, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e2e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001e30:	6868      	ldr	r0, [r5, #4]
 8001e32:	69ab      	ldr	r3, [r5, #24]
 8001e34:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	22ca      	movs	r2, #202	; 0xca
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	2253      	movs	r2, #83	; 0x53
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e48:	d04d      	beq.n	8001ee6 <HAL_RTC_SetAlarm_IT+0x12a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6893      	ldr	r3, [r2, #8]
 8001e4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e52:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001e54:	6822      	ldr	r2, [r4, #0]
 8001e56:	68d3      	ldr	r3, [r2, #12]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f463 7320 	orn	r3, r3, #640	; 0x280
 8001e5e:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8001e60:	9b01      	ldr	r3, [sp, #4]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d067      	beq.n	8001f3a <HAL_RTC_SetAlarm_IT+0x17e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	f012 0f02 	tst.w	r2, #2
 8001e72:	d0f5      	beq.n	8001e60 <HAL_RTC_SetAlarm_IT+0xa4>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001e74:	621e      	str	r6, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	6498      	str	r0, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	6893      	ldr	r3, [r2, #8]
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	6893      	ldr	r3, [r2, #8]
 8001e88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8c:	6093      	str	r3, [r2, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <HAL_RTC_SetAlarm_IT+0x19c>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e96:	601a      	str	r2, [r3, #0]
  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e9e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hrtc);  
 8001eaa:	2000      	movs	r0, #0
 8001eac:	7720      	strb	r0, [r4, #28]
}
 8001eae:	b003      	add	sp, #12
 8001eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001eb2:	6803      	ldr	r3, [r0, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001eba:	d101      	bne.n	8001ec0 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8001ec0:	69ea      	ldr	r2, [r5, #28]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ec2:	7829      	ldrb	r1, [r5, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ec4:	786b      	ldrb	r3, [r5, #1]
 8001ec6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ec8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001ecc:	78a9      	ldrb	r1, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ece:	430b      	orrs	r3, r1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001ed0:	78e9      	ldrb	r1, [r5, #3]
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ed6:	f895 1020 	ldrb.w	r1, [r5, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001eda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001ede:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));     
 8001ee0:	696e      	ldr	r6, [r5, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ee2:	431e      	orrs	r6, r3
 8001ee4:	e7a4      	b.n	8001e30 <HAL_RTC_SetAlarm_IT+0x74>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	6893      	ldr	r3, [r2, #8]
 8001eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eee:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001ef0:	6822      	ldr	r2, [r4, #0]
 8001ef2:	68d3      	ldr	r3, [r2, #12]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8001efa:	60d3      	str	r3, [r2, #12]
      if (count-- == 0U)
 8001efc:	9b01      	ldr	r3, [sp, #4]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	9201      	str	r2, [sp, #4]
 8001f02:	b193      	cbz	r3, 8001f2a <HAL_RTC_SetAlarm_IT+0x16e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	f011 0f01 	tst.w	r1, #1
 8001f0c:	d0f6      	beq.n	8001efc <HAL_RTC_SetAlarm_IT+0x140>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001f0e:	61de      	str	r6, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	6458      	str	r0, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001f14:	6822      	ldr	r2, [r4, #0]
 8001f16:	6893      	ldr	r3, [r2, #8]
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6093      	str	r3, [r2, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	6893      	ldr	r3, [r2, #8]
 8001f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f26:	6093      	str	r3, [r2, #8]
 8001f28:	e7b1      	b.n	8001e8e <HAL_RTC_SetAlarm_IT+0xd2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	22ff      	movs	r2, #255	; 0xff
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001f34:	2300      	movs	r3, #0
 8001f36:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8001f38:	e7b9      	b.n	8001eae <HAL_RTC_SetAlarm_IT+0xf2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8001f44:	2300      	movs	r3, #0
 8001f46:	7723      	strb	r3, [r4, #28]
        return HAL_TIMEOUT;
 8001f48:	e7b1      	b.n	8001eae <HAL_RTC_SetAlarm_IT+0xf2>
  __HAL_LOCK(hrtc);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	e7af      	b.n	8001eae <HAL_RTC_SetAlarm_IT+0xf2>
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	10624dd3 	.word	0x10624dd3
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001f5c:	0903      	lsrs	r3, r0, #4
 8001f5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001f62:	f000 000f 	and.w	r0, r0, #15
 8001f66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001f6a:	b2c0      	uxtb	r0, r0
 8001f6c:	4770      	bx	lr

08001f6e <HAL_RTC_GetTime>:
{
 8001f6e:	b570      	push	{r4, r5, r6, lr}
 8001f70:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f72:	6803      	ldr	r3, [r0, #0]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f78:	6803      	ldr	r3, [r0, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f80:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8001f82:	6803      	ldr	r3, [r0, #0]
 8001f84:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001f86:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8001f8a:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8001f8e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8001f90:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8001f94:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001f96:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8001f9a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001f9c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8001fa0:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8001fa2:	b952      	cbnz	r2, 8001fba <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001fa4:	f7ff ffda 	bl	8001f5c <RTC_Bcd2ToByte>
 8001fa8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001faa:	4630      	mov	r0, r6
 8001fac:	f7ff ffd6 	bl	8001f5c <RTC_Bcd2ToByte>
 8001fb0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f7ff ffd2 	bl	8001f5c <RTC_Bcd2ToByte>
 8001fb8:	70a0      	strb	r0, [r4, #2]
}
 8001fba:	2000      	movs	r0, #0
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}

08001fbe <HAL_RTC_GetDate>:
{
 8001fbe:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001fc4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8001fc8:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001fca:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8001fce:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001fd0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8001fd4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001fd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fda:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8001fdc:	b95a      	cbnz	r2, 8001ff6 <HAL_RTC_GetDate+0x38>
 8001fde:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001fe0:	f7ff ffbc 	bl	8001f5c <RTC_Bcd2ToByte>
 8001fe4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	f7ff ffb8 	bl	8001f5c <RTC_Bcd2ToByte>
 8001fec:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f7ff ffb4 	bl	8001f5c <RTC_Bcd2ToByte>
 8001ff4:	70a0      	strb	r0, [r4, #2]
}
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}

08001ffa <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001ffa:	6803      	ldr	r3, [r0, #0]
 8001ffc:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001ffe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002002:	4770      	bx	lr

08002004 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002008:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800200c:	4770      	bx	lr

0800200e <HAL_RTCEx_AlarmBEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800200e:	4770      	bx	lr

08002010 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002010:	b500      	push	{lr}
 8002012:	b085      	sub	sp, #20
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002014:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8002018:	0100      	lsls	r0, r0, #4
 800201a:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800201c:	f043 020c 	orr.w	r2, r3, #12
 8002020:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800202c:	f040 030c 	orr.w	r3, r0, #12
 8002030:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002034:	f040 0008 	orr.w	r0, r0, #8
 8002038:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800203c:	2364      	movs	r3, #100	; 0x64
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2304      	movs	r3, #4
 8002042:	aa03      	add	r2, sp, #12
 8002044:	214e      	movs	r1, #78	; 0x4e
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <lcd_send_cmd+0x44>)
 8002048:	f7fe fe50 	bl	8000cec <HAL_I2C_Master_Transmit>
}
 800204c:	b005      	add	sp, #20
 800204e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002052:	bf00      	nop
 8002054:	200000c8 	.word	0x200000c8

08002058 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002058:	b500      	push	{lr}
 800205a:	b085      	sub	sp, #20
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800205c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002060:	0100      	lsls	r0, r0, #4
 8002062:	b2c0      	uxtb	r0, r0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002064:	f043 020d 	orr.w	r2, r3, #13
 8002068:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800206c:	f043 0309 	orr.w	r3, r3, #9
 8002070:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002074:	f040 030d 	orr.w	r3, r0, #13
 8002078:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800207c:	f040 0009 	orr.w	r0, r0, #9
 8002080:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002084:	2364      	movs	r3, #100	; 0x64
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2304      	movs	r3, #4
 800208a:	aa03      	add	r2, sp, #12
 800208c:	214e      	movs	r1, #78	; 0x4e
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <lcd_send_data+0x44>)
 8002090:	f7fe fe2c 	bl	8000cec <HAL_I2C_Master_Transmit>
}
 8002094:	b005      	add	sp, #20
 8002096:	f85d fb04 	ldr.w	pc, [sp], #4
 800209a:	bf00      	nop
 800209c:	200000c8 	.word	0x200000c8

080020a0 <lcd_init>:

void lcd_init (void)
{
 80020a0:	b508      	push	{r3, lr}
	lcd_send_cmd (0x02);
 80020a2:	2002      	movs	r0, #2
 80020a4:	f7ff ffb4 	bl	8002010 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80020a8:	2028      	movs	r0, #40	; 0x28
 80020aa:	f7ff ffb1 	bl	8002010 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80020ae:	200c      	movs	r0, #12
 80020b0:	f7ff ffae 	bl	8002010 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80020b4:	2080      	movs	r0, #128	; 0x80
 80020b6:	f7ff ffab 	bl	8002010 <lcd_send_cmd>
}
 80020ba:	bd08      	pop	{r3, pc}

080020bc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80020bc:	b510      	push	{r4, lr}
 80020be:	4604      	mov	r4, r0
	while (*str) lcd_send_data (*str++);
 80020c0:	e002      	b.n	80020c8 <lcd_send_string+0xc>
 80020c2:	3401      	adds	r4, #1
 80020c4:	f7ff ffc8 	bl	8002058 <lcd_send_data>
 80020c8:	7820      	ldrb	r0, [r4, #0]
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d1f9      	bne.n	80020c2 <lcd_send_string+0x6>
}
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80020d0:	b530      	push	{r4, r5, lr}
 80020d2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	2400      	movs	r4, #0
 80020d6:	9401      	str	r4, [sp, #4]
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_GPIO_Init+0x7c>)
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	f042 0204 	orr.w	r2, r2, #4
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
 80020e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e4:	f002 0204 	and.w	r2, r2, #4
 80020e8:	9201      	str	r2, [sp, #4]
 80020ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ec:	9402      	str	r4, [sp, #8]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020fc:	9202      	str	r2, [sp, #8]
 80020fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	9403      	str	r4, [sp, #12]
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
 800210a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210c:	f002 0201 	and.w	r2, r2, #1
 8002110:	9203      	str	r2, [sp, #12]
 8002112:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	9404      	str	r4, [sp, #16]
 8002116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002118:	f042 0202 	orr.w	r2, r2, #2
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	9304      	str	r3, [sp, #16]
 8002126:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002128:	4d09      	ldr	r5, [pc, #36]	; (8002150 <MX_GPIO_Init+0x80>)
 800212a:	4622      	mov	r2, r4
 800212c:	2120      	movs	r1, #32
 800212e:	4628      	mov	r0, r5
 8002130:	f7fe fc04 	bl	800093c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002134:	2320      	movs	r3, #32
 8002136:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	a905      	add	r1, sp, #20
 8002142:	4628      	mov	r0, r5
 8002144:	f7fe fb1a 	bl	800077c <HAL_GPIO_Init>

}
 8002148:	b00b      	add	sp, #44	; 0x2c
 800214a:	bd30      	pop	{r4, r5, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000

08002154 <get_time>:
{
 8002154:	b510      	push	{r4, lr}
 8002156:	b088      	sub	sp, #32
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8002158:	4c13      	ldr	r4, [pc, #76]	; (80021a8 <get_time+0x54>)
 800215a:	2200      	movs	r2, #0
 800215c:	a902      	add	r1, sp, #8
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff ff05 	bl	8001f6e <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8002164:	2200      	movs	r2, #0
 8002166:	a907      	add	r1, sp, #28
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ff28 	bl	8001fbe <HAL_RTC_GetDate>
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800216e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002178:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800217c:	490b      	ldr	r1, [pc, #44]	; (80021ac <get_time+0x58>)
 800217e:	f104 0020 	add.w	r0, r4, #32
 8002182:	f000 fac5 	bl	8002710 <siprintf>
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);  // I like the date first
 8002186:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800218a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002194:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8002198:	4905      	ldr	r1, [pc, #20]	; (80021b0 <get_time+0x5c>)
 800219a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800219e:	f000 fab7 	bl	8002710 <siprintf>
}
 80021a2:	b008      	add	sp, #32
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	20000090 	.word	0x20000090
 80021ac:	08003038 	.word	0x08003038
 80021b0:	08003048 	.word	0x08003048

080021b4 <display_time>:
{
 80021b4:	b510      	push	{r4, lr}
	lcd_send_cmd (0x80);
 80021b6:	2080      	movs	r0, #128	; 0x80
 80021b8:	f7ff ff2a 	bl	8002010 <lcd_send_cmd>
	lcd_send_string (time);
 80021bc:	4c06      	ldr	r4, [pc, #24]	; (80021d8 <display_time+0x24>)
 80021be:	f104 0020 	add.w	r0, r4, #32
 80021c2:	f7ff ff7b 	bl	80020bc <lcd_send_string>
	lcd_send_cmd (0xc0);
 80021c6:	20c0      	movs	r0, #192	; 0xc0
 80021c8:	f7ff ff22 	bl	8002010 <lcd_send_cmd>
	lcd_send_string (date);
 80021cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80021d0:	f7ff ff74 	bl	80020bc <lcd_send_string>
}
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	bf00      	nop
 80021d8:	20000090 	.word	0x20000090

080021dc <HAL_RTC_AlarmAEventCallback>:
	alarm = 1;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_RTC_AlarmAEventCallback+0xc>)
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000090 	.word	0x20000090

080021ec <to_do_on_alarm>:
{
 80021ec:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // set led ON
 80021ee:	2201      	movs	r2, #1
 80021f0:	2120      	movs	r1, #32
 80021f2:	480f      	ldr	r0, [pc, #60]	; (8002230 <to_do_on_alarm+0x44>)
 80021f4:	f7fe fba2 	bl	800093c <HAL_GPIO_WritePin>
	lcd_send_cmd (0x80);
 80021f8:	2080      	movs	r0, #128	; 0x80
 80021fa:	f7ff ff09 	bl	8002010 <lcd_send_cmd>
	lcd_send_string ("SUBSCRIBE TO");
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <to_do_on_alarm+0x48>)
 8002200:	f7ff ff5c 	bl	80020bc <lcd_send_string>
	lcd_send_cmd (0xc0);
 8002204:	20c0      	movs	r0, #192	; 0xc0
 8002206:	f7ff ff03 	bl	8002010 <lcd_send_cmd>
	lcd_send_string ("this CHANNEL");
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <to_do_on_alarm+0x4c>)
 800220c:	f7ff ff56 	bl	80020bc <lcd_send_string>
	HAL_Delay (3000);
 8002210:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002214:	f7fe fa1e 	bl	8000654 <HAL_Delay>
	lcd_send_cmd (0x80);
 8002218:	2080      	movs	r0, #128	; 0x80
 800221a:	f7ff fef9 	bl	8002010 <lcd_send_cmd>
	for (int i=0;i<60;i++)
 800221e:	2400      	movs	r4, #0
 8002220:	e003      	b.n	800222a <to_do_on_alarm+0x3e>
		lcd_send_data (' ');  // clear lcd
 8002222:	2020      	movs	r0, #32
 8002224:	f7ff ff18 	bl	8002058 <lcd_send_data>
	for (int i=0;i<60;i++)
 8002228:	3401      	adds	r4, #1
 800222a:	2c3b      	cmp	r4, #59	; 0x3b
 800222c:	ddf9      	ble.n	8002222 <to_do_on_alarm+0x36>
}
 800222e:	bd10      	pop	{r4, pc}
 8002230:	40020000 	.word	0x40020000
 8002234:	08003058 	.word	0x08003058
 8002238:	08003068 	.word	0x08003068

0800223c <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800223c:	e7fe      	b.n	800223c <_Error_Handler>
	...

08002240 <set_time>:
{
 8002240:	b500      	push	{lr}
 8002242:	b087      	sub	sp, #28
  sTime.Hours = 0x10;
 8002244:	2310      	movs	r3, #16
 8002246:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x20;
 800224a:	2320      	movs	r3, #32
 800224c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x30;
 8002250:	2330      	movs	r3, #48	; 0x30
 8002252:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800225a:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800225c:	2201      	movs	r2, #1
 800225e:	a901      	add	r1, sp, #4
 8002260:	4813      	ldr	r0, [pc, #76]	; (80022b0 <set_time+0x70>)
 8002262:	f7ff fd2c 	bl	8001cbe <HAL_RTC_SetTime>
 8002266:	b9d0      	cbnz	r0, 800229e <set_time+0x5e>
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002268:	2302      	movs	r3, #2
 800226a:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_AUGUST;
 800226e:	2308      	movs	r3, #8
 8002270:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = 0x12;
 8002274:	2312      	movs	r3, #18
 8002276:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x0;
 800227a:	2300      	movs	r3, #0
 800227c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002280:	2201      	movs	r2, #1
 8002282:	4669      	mov	r1, sp
 8002284:	480a      	ldr	r0, [pc, #40]	; (80022b0 <set_time+0x70>)
 8002286:	f7ff fcad 	bl	8001be4 <HAL_RTC_SetDate>
 800228a:	b960      	cbnz	r0, 80022a6 <set_time+0x66>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800228c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002290:	2101      	movs	r1, #1
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <set_time+0x70>)
 8002294:	f7ff feb1 	bl	8001ffa <HAL_RTCEx_BKUPWrite>
}
 8002298:	b007      	add	sp, #28
 800229a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800229e:	2157      	movs	r1, #87	; 0x57
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <set_time+0x74>)
 80022a2:	f7ff ffcb 	bl	800223c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80022a6:	2164      	movs	r1, #100	; 0x64
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <set_time+0x74>)
 80022aa:	f7ff ffc7 	bl	800223c <_Error_Handler>
 80022ae:	bf00      	nop
 80022b0:	20000090 	.word	0x20000090
 80022b4:	08003078 	.word	0x08003078

080022b8 <set_alarm>:
{
 80022b8:	b500      	push	{lr}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
  sAlarm.AlarmTime.Hours = 0x10;
 80022bc:	2310      	movs	r3, #16
 80022be:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x21;
 80022c2:	2321      	movs	r3, #33	; 0x21
 80022c4:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022ce:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022d0:	9303      	str	r3, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022d2:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022d4:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022d6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022d8:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 80022da:	2312      	movs	r3, #18
 80022dc:	f88d 3020 	strb.w	r3, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022e6:	2201      	movs	r2, #1
 80022e8:	4669      	mov	r1, sp
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <set_alarm+0x48>)
 80022ec:	f7ff fd66 	bl	8001dbc <HAL_RTC_SetAlarm_IT>
 80022f0:	b910      	cbnz	r0, 80022f8 <set_alarm+0x40>
}
 80022f2:	b00b      	add	sp, #44	; 0x2c
 80022f4:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <set_alarm+0x4c>)
 80022fc:	f7ff ff9e 	bl	800223c <_Error_Handler>
 8002300:	20000090 	.word	0x20000090
 8002304:	08003078 	.word	0x08003078

08002308 <MX_I2C1_Init>:
{
 8002308:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800230a:	480c      	ldr	r0, [pc, #48]	; (800233c <MX_I2C1_Init+0x34>)
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_I2C1_Init+0x38>)
 800230e:	6383      	str	r3, [r0, #56]	; 0x38
  hi2c1.Init.ClockSpeed = 100000;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_I2C1_Init+0x3c>)
 8002312:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002314:	2300      	movs	r3, #0
 8002316:	6403      	str	r3, [r0, #64]	; 0x40
  hi2c1.Init.OwnAddress1 = 0;
 8002318:	6443      	str	r3, [r0, #68]	; 0x44
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800231a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231e:	6482      	str	r2, [r0, #72]	; 0x48
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002320:	64c3      	str	r3, [r0, #76]	; 0x4c
  hi2c1.Init.OwnAddress2 = 0;
 8002322:	6503      	str	r3, [r0, #80]	; 0x50
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002324:	6543      	str	r3, [r0, #84]	; 0x54
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002326:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002328:	3038      	adds	r0, #56	; 0x38
 800232a:	f7fe fc51 	bl	8000bd0 <HAL_I2C_Init>
 800232e:	b900      	cbnz	r0, 8002332 <MX_I2C1_Init+0x2a>
}
 8002330:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002332:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_I2C1_Init+0x40>)
 8002338:	f7ff ff80 	bl	800223c <_Error_Handler>
 800233c:	20000090 	.word	0x20000090
 8002340:	40005400 	.word	0x40005400
 8002344:	000186a0 	.word	0x000186a0
 8002348:	08003078 	.word	0x08003078

0800234c <MX_RTC_Init>:
{
 800234c:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 800234e:	480a      	ldr	r0, [pc, #40]	; (8002378 <MX_RTC_Init+0x2c>)
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <MX_RTC_Init+0x30>)
 8002352:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002354:	2300      	movs	r3, #0
 8002356:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002358:	227f      	movs	r2, #127	; 0x7f
 800235a:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002360:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002362:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002364:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002366:	f7ff fbd0 	bl	8001b0a <HAL_RTC_Init>
 800236a:	b900      	cbnz	r0, 800236e <MX_RTC_Init+0x22>
}
 800236c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800236e:	f240 1173 	movw	r1, #371	; 0x173
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <MX_RTC_Init+0x34>)
 8002374:	f7ff ff62 	bl	800223c <_Error_Handler>
 8002378:	20000090 	.word	0x20000090
 800237c:	40002800 	.word	0x40002800
 8002380:	08003078 	.word	0x08003078

08002384 <SystemClock_Config>:
{
 8002384:	b500      	push	{lr}
 8002386:	b0ad      	sub	sp, #180	; 0xb4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	2100      	movs	r1, #0
 800238a:	9101      	str	r1, [sp, #4]
 800238c:	4b38      	ldr	r3, [pc, #224]	; (8002470 <SystemClock_Config+0xec>)
 800238e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002390:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	9102      	str	r1, [sp, #8]
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <SystemClock_Config+0xf0>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80023b6:	2305      	movs	r3, #5
 80023b8:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023c0:	2301      	movs	r3, #1
 80023c2:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c4:	2302      	movs	r3, #2
 80023c6:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023cc:	9226      	str	r2, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023ce:	2204      	movs	r2, #4
 80023d0:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80023d2:	22b4      	movs	r2, #180	; 0xb4
 80023d4:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d6:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023d8:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023da:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023dc:	a81f      	add	r0, sp, #124	; 0x7c
 80023de:	f7ff f947 	bl	8001670 <HAL_RCC_OscConfig>
 80023e2:	bb80      	cbnz	r0, 8002446 <SystemClock_Config+0xc2>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023e4:	f7fe fd48 	bl	8000e78 <HAL_PWREx_EnableOverDrive>
 80023e8:	bb90      	cbnz	r0, 8002450 <SystemClock_Config+0xcc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ea:	230f      	movs	r3, #15
 80023ec:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ee:	2302      	movs	r3, #2
 80023f0:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023fa:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002400:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002402:	2105      	movs	r1, #5
 8002404:	a81a      	add	r0, sp, #104	; 0x68
 8002406:	f7fe fd75 	bl	8000ef4 <HAL_RCC_ClockConfig>
 800240a:	bb30      	cbnz	r0, 800245a <SystemClock_Config+0xd6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800240c:	2320      	movs	r3, #32
 800240e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002414:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002416:	a803      	add	r0, sp, #12
 8002418:	f7fe fe30 	bl	800107c <HAL_RCCEx_PeriphCLKConfig>
 800241c:	bb10      	cbnz	r0, 8002464 <SystemClock_Config+0xe0>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800241e:	f7fe fe17 	bl	8001050 <HAL_RCC_GetHCLKFreq>
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <SystemClock_Config+0xf4>)
 8002424:	fba3 3000 	umull	r3, r0, r3, r0
 8002428:	0980      	lsrs	r0, r0, #6
 800242a:	f7fe f97d 	bl	8000728 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800242e:	2004      	movs	r0, #4
 8002430:	f7fe f98e 	bl	8000750 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	4611      	mov	r1, r2
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243c:	f7fe f930 	bl	80006a0 <HAL_NVIC_SetPriority>
}
 8002440:	b02d      	add	sp, #180	; 0xb4
 8002442:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002446:	f44f 718d 	mov.w	r1, #282	; 0x11a
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <SystemClock_Config+0xf8>)
 800244c:	f7ff fef6 	bl	800223c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002450:	f240 1121 	movw	r1, #289	; 0x121
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <SystemClock_Config+0xf8>)
 8002456:	f7ff fef1 	bl	800223c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800245a:	f240 112f 	movw	r1, #303	; 0x12f
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <SystemClock_Config+0xf8>)
 8002460:	f7ff feec 	bl	800223c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002464:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <SystemClock_Config+0xf8>)
 800246a:	f7ff fee7 	bl	800223c <_Error_Handler>
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000
 8002478:	10624dd3 	.word	0x10624dd3
 800247c:	08003078 	.word	0x08003078

08002480 <main>:
{
 8002480:	b508      	push	{r3, lr}
  HAL_Init();
 8002482:	f7fe f8bb 	bl	80005fc <HAL_Init>
  SystemClock_Config();
 8002486:	f7ff ff7d 	bl	8002384 <SystemClock_Config>
  MX_GPIO_Init();
 800248a:	f7ff fe21 	bl	80020d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800248e:	f7ff ff3b 	bl	8002308 <MX_I2C1_Init>
  MX_RTC_Init();
 8002492:	f7ff ff5b 	bl	800234c <MX_RTC_Init>
  lcd_init ();
 8002496:	f7ff fe03 	bl	80020a0 <lcd_init>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 800249a:	2101      	movs	r1, #1
 800249c:	480f      	ldr	r0, [pc, #60]	; (80024dc <main+0x5c>)
 800249e:	f7ff fdb1 	bl	8002004 <HAL_RTCEx_BKUPRead>
 80024a2:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d115      	bne.n	80024d6 <main+0x56>
  set_alarm ();
 80024aa:	f7ff ff05 	bl	80022b8 <set_alarm>
	  get_time();
 80024ae:	f7ff fe51 	bl	8002154 <get_time>
	  display_time();
 80024b2:	f7ff fe7f 	bl	80021b4 <display_time>
	  HAL_Delay(500);
 80024b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ba:	f7fe f8cb 	bl	8000654 <HAL_Delay>
	  if (alarm)
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <main+0x5c>)
 80024c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f2      	beq.n	80024ae <main+0x2e>
		  to_do_on_alarm();
 80024c8:	f7ff fe90 	bl	80021ec <to_do_on_alarm>
		  alarm =0;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <main+0x5c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80024d4:	e7eb      	b.n	80024ae <main+0x2e>
        set_time();
 80024d6:	f7ff feb3 	bl	8002240 <set_time>
 80024da:	e7e6      	b.n	80024aa <main+0x2a>
 80024dc:	20000090 	.word	0x20000090

080024e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e4:	2400      	movs	r4, #0
 80024e6:	9400      	str	r4, [sp, #0]
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_MspInit+0x90>)
 80024ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
 80024f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024f8:	9200      	str	r2, [sp, #0]
 80024fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	9401      	str	r4, [sp, #4]
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f7fe f8b3 	bl	800067c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002516:	4622      	mov	r2, r4
 8002518:	4621      	mov	r1, r4
 800251a:	f06f 000b 	mvn.w	r0, #11
 800251e:	f7fe f8bf 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002522:	4622      	mov	r2, r4
 8002524:	4621      	mov	r1, r4
 8002526:	f06f 000a 	mvn.w	r0, #10
 800252a:	f7fe f8b9 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800252e:	4622      	mov	r2, r4
 8002530:	4621      	mov	r1, r4
 8002532:	f06f 0009 	mvn.w	r0, #9
 8002536:	f7fe f8b3 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800253a:	4622      	mov	r2, r4
 800253c:	4621      	mov	r1, r4
 800253e:	f06f 0004 	mvn.w	r0, #4
 8002542:	f7fe f8ad 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002546:	4622      	mov	r2, r4
 8002548:	4621      	mov	r1, r4
 800254a:	f06f 0003 	mvn.w	r0, #3
 800254e:	f7fe f8a7 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002552:	4622      	mov	r2, r4
 8002554:	4621      	mov	r1, r4
 8002556:	f06f 0001 	mvn.w	r0, #1
 800255a:	f7fe f8a1 	bl	80006a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800255e:	4622      	mov	r2, r4
 8002560:	4621      	mov	r1, r4
 8002562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002566:	f7fe f89b 	bl	80006a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	b002      	add	sp, #8
 800256c:	bd10      	pop	{r4, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002574:	6802      	ldr	r2, [r0, #0]
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_I2C_MspInit+0x4c>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d000      	beq.n	800257e <HAL_I2C_MspInit+0xa>
 800257c:	4770      	bx	lr
{
 800257e:	b500      	push	{lr}
 8002580:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002586:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002588:	2312      	movs	r3, #18
 800258a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	2301      	movs	r3, #1
 800258e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002594:	2304      	movs	r3, #4
 8002596:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002598:	eb0d 0103 	add.w	r1, sp, r3
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <HAL_I2C_MspInit+0x50>)
 800259e:	f7fe f8ed 	bl	800077c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_I2C_MspInit+0x54>)
 80025a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025ba:	b007      	add	sp, #28
 80025bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c0:	40005400 	.word	0x40005400
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40023800 	.word	0x40023800

080025cc <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025cc:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 80025ce:	6802      	ldr	r2, [r0, #0]
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_RTC_MspInit+0x28>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d000      	beq.n	80025d8 <HAL_RTC_MspInit+0xc>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025d6:	bd08      	pop	{r3, pc}
    __HAL_RCC_RTC_ENABLE();
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <HAL_RTC_MspInit+0x2c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	4611      	mov	r1, r2
 80025e4:	2029      	movs	r0, #41	; 0x29
 80025e6:	f7fe f85b 	bl	80006a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80025ea:	2029      	movs	r0, #41	; 0x29
 80025ec:	f7fe f890 	bl	8000710 <HAL_NVIC_EnableIRQ>
}
 80025f0:	e7f1      	b.n	80025d6 <HAL_RTC_MspInit+0xa>
 80025f2:	bf00      	nop
 80025f4:	40002800 	.word	0x40002800
 80025f8:	42470000 	.word	0x42470000

080025fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025fc:	4770      	bx	lr

080025fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <HardFault_Handler>

08002600 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <MemManage_Handler>

08002602 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <BusFault_Handler>

08002604 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler>

08002606 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002608:	4770      	bx	lr

0800260a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260a:	4770      	bx	lr

0800260c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800260c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260e:	f7fe f80f 	bl	8000630 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002612:	f7fe f8ae 	bl	8000772 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002616:	bd08      	pop	{r3, pc}

08002618 <RTC_Alarm_IRQHandler>:

/**
* @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
*/
void RTC_Alarm_IRQHandler(void)
{
 8002618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800261a:	4802      	ldr	r0, [pc, #8]	; (8002624 <RTC_Alarm_IRQHandler+0xc>)
 800261c:	f7ff fa0e 	bl	8001a3c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002620:	bd08      	pop	{r3, pc}
 8002622:	bf00      	nop
 8002624:	20000090 	.word	0x20000090

08002628 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002628:	490f      	ldr	r1, [pc, #60]	; (8002668 <SystemInit+0x40>)
 800262a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800262e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <SystemInit+0x44>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002640:	2000      	movs	r0, #0
 8002642:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800264a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800264e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <SystemInit+0x48>)
 8002652:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800265a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800265c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800265e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002662:	608b      	str	r3, [r1, #8]
#endif
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	40023800 	.word	0x40023800
 8002670:	24003010 	.word	0x24003010

08002674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800267a:	e003      	b.n	8002684 <LoopCopyDataInit>

0800267c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800267e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002682:	3104      	adds	r1, #4

08002684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002684:	480b      	ldr	r0, [pc, #44]	; (80026b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800268c:	d3f6      	bcc.n	800267c <CopyDataInit>
  ldr  r2, =_sbss
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002690:	e002      	b.n	8002698 <LoopFillZerobss>

08002692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002694:	f842 3b04 	str.w	r3, [r2], #4

08002698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800269a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800269c:	d3f9      	bcc.n	8002692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800269e:	f7ff ffc3 	bl	8002628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a2:	f000 f811 	bl	80026c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a6:	f7ff feeb 	bl	8002480 <main>
  bx  lr    
 80026aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026b0:	080030cc 	.word	0x080030cc
  ldr  r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026b8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80026bc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80026c0:	20000130 	.word	0x20000130

080026c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC_IRQHandler>
	...

080026c8 <__libc_init_array>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	4d0d      	ldr	r5, [pc, #52]	; (8002700 <__libc_init_array+0x38>)
 80026cc:	4c0d      	ldr	r4, [pc, #52]	; (8002704 <__libc_init_array+0x3c>)
 80026ce:	1b64      	subs	r4, r4, r5
 80026d0:	10a4      	asrs	r4, r4, #2
 80026d2:	2600      	movs	r6, #0
 80026d4:	42a6      	cmp	r6, r4
 80026d6:	d109      	bne.n	80026ec <__libc_init_array+0x24>
 80026d8:	4d0b      	ldr	r5, [pc, #44]	; (8002708 <__libc_init_array+0x40>)
 80026da:	4c0c      	ldr	r4, [pc, #48]	; (800270c <__libc_init_array+0x44>)
 80026dc:	f000 fc94 	bl	8003008 <_init>
 80026e0:	1b64      	subs	r4, r4, r5
 80026e2:	10a4      	asrs	r4, r4, #2
 80026e4:	2600      	movs	r6, #0
 80026e6:	42a6      	cmp	r6, r4
 80026e8:	d105      	bne.n	80026f6 <__libc_init_array+0x2e>
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
 80026ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f0:	4798      	blx	r3
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7ee      	b.n	80026d4 <__libc_init_array+0xc>
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	4798      	blx	r3
 80026fc:	3601      	adds	r6, #1
 80026fe:	e7f2      	b.n	80026e6 <__libc_init_array+0x1e>
 8002700:	080030c4 	.word	0x080030c4
 8002704:	080030c4 	.word	0x080030c4
 8002708:	080030c4 	.word	0x080030c4
 800270c:	080030c8 	.word	0x080030c8

08002710 <siprintf>:
 8002710:	b40e      	push	{r1, r2, r3}
 8002712:	b500      	push	{lr}
 8002714:	b09c      	sub	sp, #112	; 0x70
 8002716:	ab1d      	add	r3, sp, #116	; 0x74
 8002718:	9002      	str	r0, [sp, #8]
 800271a:	9006      	str	r0, [sp, #24]
 800271c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002720:	4809      	ldr	r0, [pc, #36]	; (8002748 <siprintf+0x38>)
 8002722:	9107      	str	r1, [sp, #28]
 8002724:	9104      	str	r1, [sp, #16]
 8002726:	4909      	ldr	r1, [pc, #36]	; (800274c <siprintf+0x3c>)
 8002728:	f853 2b04 	ldr.w	r2, [r3], #4
 800272c:	9105      	str	r1, [sp, #20]
 800272e:	6800      	ldr	r0, [r0, #0]
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	a902      	add	r1, sp, #8
 8002734:	f000 f868 	bl	8002808 <_svfiprintf_r>
 8002738:	9b02      	ldr	r3, [sp, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	b01c      	add	sp, #112	; 0x70
 8002740:	f85d eb04 	ldr.w	lr, [sp], #4
 8002744:	b003      	add	sp, #12
 8002746:	4770      	bx	lr
 8002748:	2000000c 	.word	0x2000000c
 800274c:	ffff0208 	.word	0xffff0208

08002750 <__ssputs_r>:
 8002750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	688e      	ldr	r6, [r1, #8]
 8002756:	429e      	cmp	r6, r3
 8002758:	4682      	mov	sl, r0
 800275a:	460c      	mov	r4, r1
 800275c:	4690      	mov	r8, r2
 800275e:	461f      	mov	r7, r3
 8002760:	d838      	bhi.n	80027d4 <__ssputs_r+0x84>
 8002762:	898a      	ldrh	r2, [r1, #12]
 8002764:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002768:	d032      	beq.n	80027d0 <__ssputs_r+0x80>
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	6909      	ldr	r1, [r1, #16]
 800276e:	eba5 0901 	sub.w	r9, r5, r1
 8002772:	6965      	ldr	r5, [r4, #20]
 8002774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800277c:	3301      	adds	r3, #1
 800277e:	444b      	add	r3, r9
 8002780:	106d      	asrs	r5, r5, #1
 8002782:	429d      	cmp	r5, r3
 8002784:	bf38      	it	cc
 8002786:	461d      	movcc	r5, r3
 8002788:	0553      	lsls	r3, r2, #21
 800278a:	d531      	bpl.n	80027f0 <__ssputs_r+0xa0>
 800278c:	4629      	mov	r1, r5
 800278e:	f000 fb63 	bl	8002e58 <_malloc_r>
 8002792:	4606      	mov	r6, r0
 8002794:	b950      	cbnz	r0, 80027ac <__ssputs_r+0x5c>
 8002796:	230c      	movs	r3, #12
 8002798:	f8ca 3000 	str.w	r3, [sl]
 800279c:	89a3      	ldrh	r3, [r4, #12]
 800279e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a2:	81a3      	strh	r3, [r4, #12]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	6921      	ldr	r1, [r4, #16]
 80027ae:	464a      	mov	r2, r9
 80027b0:	f000 fabe 	bl	8002d30 <memcpy>
 80027b4:	89a3      	ldrh	r3, [r4, #12]
 80027b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	81a3      	strh	r3, [r4, #12]
 80027c0:	6126      	str	r6, [r4, #16]
 80027c2:	6165      	str	r5, [r4, #20]
 80027c4:	444e      	add	r6, r9
 80027c6:	eba5 0509 	sub.w	r5, r5, r9
 80027ca:	6026      	str	r6, [r4, #0]
 80027cc:	60a5      	str	r5, [r4, #8]
 80027ce:	463e      	mov	r6, r7
 80027d0:	42be      	cmp	r6, r7
 80027d2:	d900      	bls.n	80027d6 <__ssputs_r+0x86>
 80027d4:	463e      	mov	r6, r7
 80027d6:	6820      	ldr	r0, [r4, #0]
 80027d8:	4632      	mov	r2, r6
 80027da:	4641      	mov	r1, r8
 80027dc:	f000 fab6 	bl	8002d4c <memmove>
 80027e0:	68a3      	ldr	r3, [r4, #8]
 80027e2:	1b9b      	subs	r3, r3, r6
 80027e4:	60a3      	str	r3, [r4, #8]
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	4433      	add	r3, r6
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	2000      	movs	r0, #0
 80027ee:	e7db      	b.n	80027a8 <__ssputs_r+0x58>
 80027f0:	462a      	mov	r2, r5
 80027f2:	f000 fba5 	bl	8002f40 <_realloc_r>
 80027f6:	4606      	mov	r6, r0
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1e1      	bne.n	80027c0 <__ssputs_r+0x70>
 80027fc:	6921      	ldr	r1, [r4, #16]
 80027fe:	4650      	mov	r0, sl
 8002800:	f000 fabe 	bl	8002d80 <_free_r>
 8002804:	e7c7      	b.n	8002796 <__ssputs_r+0x46>
	...

08002808 <_svfiprintf_r>:
 8002808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280c:	4698      	mov	r8, r3
 800280e:	898b      	ldrh	r3, [r1, #12]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	b09d      	sub	sp, #116	; 0x74
 8002814:	4607      	mov	r7, r0
 8002816:	460d      	mov	r5, r1
 8002818:	4614      	mov	r4, r2
 800281a:	d50e      	bpl.n	800283a <_svfiprintf_r+0x32>
 800281c:	690b      	ldr	r3, [r1, #16]
 800281e:	b963      	cbnz	r3, 800283a <_svfiprintf_r+0x32>
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	f000 fb19 	bl	8002e58 <_malloc_r>
 8002826:	6028      	str	r0, [r5, #0]
 8002828:	6128      	str	r0, [r5, #16]
 800282a:	b920      	cbnz	r0, 8002836 <_svfiprintf_r+0x2e>
 800282c:	230c      	movs	r3, #12
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002834:	e0d1      	b.n	80029da <_svfiprintf_r+0x1d2>
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	616b      	str	r3, [r5, #20]
 800283a:	2300      	movs	r3, #0
 800283c:	9309      	str	r3, [sp, #36]	; 0x24
 800283e:	2320      	movs	r3, #32
 8002840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002844:	f8cd 800c 	str.w	r8, [sp, #12]
 8002848:	2330      	movs	r3, #48	; 0x30
 800284a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80029f4 <_svfiprintf_r+0x1ec>
 800284e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002852:	f04f 0901 	mov.w	r9, #1
 8002856:	4623      	mov	r3, r4
 8002858:	469a      	mov	sl, r3
 800285a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800285e:	b10a      	cbz	r2, 8002864 <_svfiprintf_r+0x5c>
 8002860:	2a25      	cmp	r2, #37	; 0x25
 8002862:	d1f9      	bne.n	8002858 <_svfiprintf_r+0x50>
 8002864:	ebba 0b04 	subs.w	fp, sl, r4
 8002868:	d00b      	beq.n	8002882 <_svfiprintf_r+0x7a>
 800286a:	465b      	mov	r3, fp
 800286c:	4622      	mov	r2, r4
 800286e:	4629      	mov	r1, r5
 8002870:	4638      	mov	r0, r7
 8002872:	f7ff ff6d 	bl	8002750 <__ssputs_r>
 8002876:	3001      	adds	r0, #1
 8002878:	f000 80aa 	beq.w	80029d0 <_svfiprintf_r+0x1c8>
 800287c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800287e:	445a      	add	r2, fp
 8002880:	9209      	str	r2, [sp, #36]	; 0x24
 8002882:	f89a 3000 	ldrb.w	r3, [sl]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a2 	beq.w	80029d0 <_svfiprintf_r+0x1c8>
 800288c:	2300      	movs	r3, #0
 800288e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002896:	f10a 0a01 	add.w	sl, sl, #1
 800289a:	9304      	str	r3, [sp, #16]
 800289c:	9307      	str	r3, [sp, #28]
 800289e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028a2:	931a      	str	r3, [sp, #104]	; 0x68
 80028a4:	4654      	mov	r4, sl
 80028a6:	2205      	movs	r2, #5
 80028a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ac:	4851      	ldr	r0, [pc, #324]	; (80029f4 <_svfiprintf_r+0x1ec>)
 80028ae:	f7fd fcaf 	bl	8000210 <memchr>
 80028b2:	9a04      	ldr	r2, [sp, #16]
 80028b4:	b9d8      	cbnz	r0, 80028ee <_svfiprintf_r+0xe6>
 80028b6:	06d0      	lsls	r0, r2, #27
 80028b8:	bf44      	itt	mi
 80028ba:	2320      	movmi	r3, #32
 80028bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028c0:	0711      	lsls	r1, r2, #28
 80028c2:	bf44      	itt	mi
 80028c4:	232b      	movmi	r3, #43	; 0x2b
 80028c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028ca:	f89a 3000 	ldrb.w	r3, [sl]
 80028ce:	2b2a      	cmp	r3, #42	; 0x2a
 80028d0:	d015      	beq.n	80028fe <_svfiprintf_r+0xf6>
 80028d2:	9a07      	ldr	r2, [sp, #28]
 80028d4:	4654      	mov	r4, sl
 80028d6:	2000      	movs	r0, #0
 80028d8:	f04f 0c0a 	mov.w	ip, #10
 80028dc:	4621      	mov	r1, r4
 80028de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028e2:	3b30      	subs	r3, #48	; 0x30
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	d94e      	bls.n	8002986 <_svfiprintf_r+0x17e>
 80028e8:	b1b0      	cbz	r0, 8002918 <_svfiprintf_r+0x110>
 80028ea:	9207      	str	r2, [sp, #28]
 80028ec:	e014      	b.n	8002918 <_svfiprintf_r+0x110>
 80028ee:	eba0 0308 	sub.w	r3, r0, r8
 80028f2:	fa09 f303 	lsl.w	r3, r9, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	46a2      	mov	sl, r4
 80028fc:	e7d2      	b.n	80028a4 <_svfiprintf_r+0x9c>
 80028fe:	9b03      	ldr	r3, [sp, #12]
 8002900:	1d19      	adds	r1, r3, #4
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	9103      	str	r1, [sp, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	bfbb      	ittet	lt
 800290a:	425b      	neglt	r3, r3
 800290c:	f042 0202 	orrlt.w	r2, r2, #2
 8002910:	9307      	strge	r3, [sp, #28]
 8002912:	9307      	strlt	r3, [sp, #28]
 8002914:	bfb8      	it	lt
 8002916:	9204      	strlt	r2, [sp, #16]
 8002918:	7823      	ldrb	r3, [r4, #0]
 800291a:	2b2e      	cmp	r3, #46	; 0x2e
 800291c:	d10c      	bne.n	8002938 <_svfiprintf_r+0x130>
 800291e:	7863      	ldrb	r3, [r4, #1]
 8002920:	2b2a      	cmp	r3, #42	; 0x2a
 8002922:	d135      	bne.n	8002990 <_svfiprintf_r+0x188>
 8002924:	9b03      	ldr	r3, [sp, #12]
 8002926:	1d1a      	adds	r2, r3, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	9203      	str	r2, [sp, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	bfb8      	it	lt
 8002930:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002934:	3402      	adds	r4, #2
 8002936:	9305      	str	r3, [sp, #20]
 8002938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a04 <_svfiprintf_r+0x1fc>
 800293c:	7821      	ldrb	r1, [r4, #0]
 800293e:	2203      	movs	r2, #3
 8002940:	4650      	mov	r0, sl
 8002942:	f7fd fc65 	bl	8000210 <memchr>
 8002946:	b140      	cbz	r0, 800295a <_svfiprintf_r+0x152>
 8002948:	2340      	movs	r3, #64	; 0x40
 800294a:	eba0 000a 	sub.w	r0, r0, sl
 800294e:	fa03 f000 	lsl.w	r0, r3, r0
 8002952:	9b04      	ldr	r3, [sp, #16]
 8002954:	4303      	orrs	r3, r0
 8002956:	3401      	adds	r4, #1
 8002958:	9304      	str	r3, [sp, #16]
 800295a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295e:	4826      	ldr	r0, [pc, #152]	; (80029f8 <_svfiprintf_r+0x1f0>)
 8002960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002964:	2206      	movs	r2, #6
 8002966:	f7fd fc53 	bl	8000210 <memchr>
 800296a:	2800      	cmp	r0, #0
 800296c:	d038      	beq.n	80029e0 <_svfiprintf_r+0x1d8>
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <_svfiprintf_r+0x1f4>)
 8002970:	bb1b      	cbnz	r3, 80029ba <_svfiprintf_r+0x1b2>
 8002972:	9b03      	ldr	r3, [sp, #12]
 8002974:	3307      	adds	r3, #7
 8002976:	f023 0307 	bic.w	r3, r3, #7
 800297a:	3308      	adds	r3, #8
 800297c:	9303      	str	r3, [sp, #12]
 800297e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002980:	4433      	add	r3, r6
 8002982:	9309      	str	r3, [sp, #36]	; 0x24
 8002984:	e767      	b.n	8002856 <_svfiprintf_r+0x4e>
 8002986:	fb0c 3202 	mla	r2, ip, r2, r3
 800298a:	460c      	mov	r4, r1
 800298c:	2001      	movs	r0, #1
 800298e:	e7a5      	b.n	80028dc <_svfiprintf_r+0xd4>
 8002990:	2300      	movs	r3, #0
 8002992:	3401      	adds	r4, #1
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 0c0a 	mov.w	ip, #10
 800299c:	4620      	mov	r0, r4
 800299e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029a2:	3a30      	subs	r2, #48	; 0x30
 80029a4:	2a09      	cmp	r2, #9
 80029a6:	d903      	bls.n	80029b0 <_svfiprintf_r+0x1a8>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0c5      	beq.n	8002938 <_svfiprintf_r+0x130>
 80029ac:	9105      	str	r1, [sp, #20]
 80029ae:	e7c3      	b.n	8002938 <_svfiprintf_r+0x130>
 80029b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80029b4:	4604      	mov	r4, r0
 80029b6:	2301      	movs	r3, #1
 80029b8:	e7f0      	b.n	800299c <_svfiprintf_r+0x194>
 80029ba:	ab03      	add	r3, sp, #12
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	462a      	mov	r2, r5
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <_svfiprintf_r+0x1f8>)
 80029c2:	a904      	add	r1, sp, #16
 80029c4:	4638      	mov	r0, r7
 80029c6:	f3af 8000 	nop.w
 80029ca:	1c42      	adds	r2, r0, #1
 80029cc:	4606      	mov	r6, r0
 80029ce:	d1d6      	bne.n	800297e <_svfiprintf_r+0x176>
 80029d0:	89ab      	ldrh	r3, [r5, #12]
 80029d2:	065b      	lsls	r3, r3, #25
 80029d4:	f53f af2c 	bmi.w	8002830 <_svfiprintf_r+0x28>
 80029d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029da:	b01d      	add	sp, #116	; 0x74
 80029dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e0:	ab03      	add	r3, sp, #12
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	462a      	mov	r2, r5
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <_svfiprintf_r+0x1f8>)
 80029e8:	a904      	add	r1, sp, #16
 80029ea:	4638      	mov	r0, r7
 80029ec:	f000 f87a 	bl	8002ae4 <_printf_i>
 80029f0:	e7eb      	b.n	80029ca <_svfiprintf_r+0x1c2>
 80029f2:	bf00      	nop
 80029f4:	08003086 	.word	0x08003086
 80029f8:	08003090 	.word	0x08003090
 80029fc:	00000000 	.word	0x00000000
 8002a00:	08002751 	.word	0x08002751
 8002a04:	0800308c 	.word	0x0800308c

08002a08 <_printf_common>:
 8002a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	4616      	mov	r6, r2
 8002a0e:	4699      	mov	r9, r3
 8002a10:	688a      	ldr	r2, [r1, #8]
 8002a12:	690b      	ldr	r3, [r1, #16]
 8002a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bfb8      	it	lt
 8002a1c:	4613      	movlt	r3, r2
 8002a1e:	6033      	str	r3, [r6, #0]
 8002a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a24:	4607      	mov	r7, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	b10a      	cbz	r2, 8002a2e <_printf_common+0x26>
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	6033      	str	r3, [r6, #0]
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	0699      	lsls	r1, r3, #26
 8002a32:	bf42      	ittt	mi
 8002a34:	6833      	ldrmi	r3, [r6, #0]
 8002a36:	3302      	addmi	r3, #2
 8002a38:	6033      	strmi	r3, [r6, #0]
 8002a3a:	6825      	ldr	r5, [r4, #0]
 8002a3c:	f015 0506 	ands.w	r5, r5, #6
 8002a40:	d106      	bne.n	8002a50 <_printf_common+0x48>
 8002a42:	f104 0a19 	add.w	sl, r4, #25
 8002a46:	68e3      	ldr	r3, [r4, #12]
 8002a48:	6832      	ldr	r2, [r6, #0]
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	42ab      	cmp	r3, r5
 8002a4e:	dc26      	bgt.n	8002a9e <_printf_common+0x96>
 8002a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a54:	1e13      	subs	r3, r2, #0
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	bf18      	it	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	0692      	lsls	r2, r2, #26
 8002a5e:	d42b      	bmi.n	8002ab8 <_printf_common+0xb0>
 8002a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a64:	4649      	mov	r1, r9
 8002a66:	4638      	mov	r0, r7
 8002a68:	47c0      	blx	r8
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d01e      	beq.n	8002aac <_printf_common+0xa4>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	68e5      	ldr	r5, [r4, #12]
 8002a72:	6832      	ldr	r2, [r6, #0]
 8002a74:	f003 0306 	and.w	r3, r3, #6
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	bf08      	it	eq
 8002a7c:	1aad      	subeq	r5, r5, r2
 8002a7e:	68a3      	ldr	r3, [r4, #8]
 8002a80:	6922      	ldr	r2, [r4, #16]
 8002a82:	bf0c      	ite	eq
 8002a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a88:	2500      	movne	r5, #0
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	bfc4      	itt	gt
 8002a8e:	1a9b      	subgt	r3, r3, r2
 8002a90:	18ed      	addgt	r5, r5, r3
 8002a92:	2600      	movs	r6, #0
 8002a94:	341a      	adds	r4, #26
 8002a96:	42b5      	cmp	r5, r6
 8002a98:	d11a      	bne.n	8002ad0 <_printf_common+0xc8>
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	e008      	b.n	8002ab0 <_printf_common+0xa8>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	4652      	mov	r2, sl
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	47c0      	blx	r8
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	d103      	bne.n	8002ab4 <_printf_common+0xac>
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab4:	3501      	adds	r5, #1
 8002ab6:	e7c6      	b.n	8002a46 <_printf_common+0x3e>
 8002ab8:	18e1      	adds	r1, r4, r3
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	2030      	movs	r0, #48	; 0x30
 8002abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ac2:	4422      	add	r2, r4
 8002ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002acc:	3302      	adds	r3, #2
 8002ace:	e7c7      	b.n	8002a60 <_printf_common+0x58>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	47c0      	blx	r8
 8002ada:	3001      	adds	r0, #1
 8002adc:	d0e6      	beq.n	8002aac <_printf_common+0xa4>
 8002ade:	3601      	adds	r6, #1
 8002ae0:	e7d9      	b.n	8002a96 <_printf_common+0x8e>
	...

08002ae4 <_printf_i>:
 8002ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	7e0f      	ldrb	r7, [r1, #24]
 8002aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002aec:	2f78      	cmp	r7, #120	; 0x78
 8002aee:	4691      	mov	r9, r2
 8002af0:	4680      	mov	r8, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	469a      	mov	sl, r3
 8002af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002afa:	d807      	bhi.n	8002b0c <_printf_i+0x28>
 8002afc:	2f62      	cmp	r7, #98	; 0x62
 8002afe:	d80a      	bhi.n	8002b16 <_printf_i+0x32>
 8002b00:	2f00      	cmp	r7, #0
 8002b02:	f000 80d8 	beq.w	8002cb6 <_printf_i+0x1d2>
 8002b06:	2f58      	cmp	r7, #88	; 0x58
 8002b08:	f000 80a3 	beq.w	8002c52 <_printf_i+0x16e>
 8002b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b14:	e03a      	b.n	8002b8c <_printf_i+0xa8>
 8002b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b1a:	2b15      	cmp	r3, #21
 8002b1c:	d8f6      	bhi.n	8002b0c <_printf_i+0x28>
 8002b1e:	a101      	add	r1, pc, #4	; (adr r1, 8002b24 <_printf_i+0x40>)
 8002b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b24:	08002b7d 	.word	0x08002b7d
 8002b28:	08002b91 	.word	0x08002b91
 8002b2c:	08002b0d 	.word	0x08002b0d
 8002b30:	08002b0d 	.word	0x08002b0d
 8002b34:	08002b0d 	.word	0x08002b0d
 8002b38:	08002b0d 	.word	0x08002b0d
 8002b3c:	08002b91 	.word	0x08002b91
 8002b40:	08002b0d 	.word	0x08002b0d
 8002b44:	08002b0d 	.word	0x08002b0d
 8002b48:	08002b0d 	.word	0x08002b0d
 8002b4c:	08002b0d 	.word	0x08002b0d
 8002b50:	08002c9d 	.word	0x08002c9d
 8002b54:	08002bc1 	.word	0x08002bc1
 8002b58:	08002c7f 	.word	0x08002c7f
 8002b5c:	08002b0d 	.word	0x08002b0d
 8002b60:	08002b0d 	.word	0x08002b0d
 8002b64:	08002cbf 	.word	0x08002cbf
 8002b68:	08002b0d 	.word	0x08002b0d
 8002b6c:	08002bc1 	.word	0x08002bc1
 8002b70:	08002b0d 	.word	0x08002b0d
 8002b74:	08002b0d 	.word	0x08002b0d
 8002b78:	08002c87 	.word	0x08002c87
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	602a      	str	r2, [r5, #0]
 8002b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0a3      	b.n	8002cd8 <_printf_i+0x1f4>
 8002b90:	6820      	ldr	r0, [r4, #0]
 8002b92:	6829      	ldr	r1, [r5, #0]
 8002b94:	0606      	lsls	r6, r0, #24
 8002b96:	f101 0304 	add.w	r3, r1, #4
 8002b9a:	d50a      	bpl.n	8002bb2 <_printf_i+0xce>
 8002b9c:	680e      	ldr	r6, [r1, #0]
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	2e00      	cmp	r6, #0
 8002ba2:	da03      	bge.n	8002bac <_printf_i+0xc8>
 8002ba4:	232d      	movs	r3, #45	; 0x2d
 8002ba6:	4276      	negs	r6, r6
 8002ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bac:	485e      	ldr	r0, [pc, #376]	; (8002d28 <_printf_i+0x244>)
 8002bae:	230a      	movs	r3, #10
 8002bb0:	e019      	b.n	8002be6 <_printf_i+0x102>
 8002bb2:	680e      	ldr	r6, [r1, #0]
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bba:	bf18      	it	ne
 8002bbc:	b236      	sxthne	r6, r6
 8002bbe:	e7ef      	b.n	8002ba0 <_printf_i+0xbc>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	1d19      	adds	r1, r3, #4
 8002bc6:	6029      	str	r1, [r5, #0]
 8002bc8:	0601      	lsls	r1, r0, #24
 8002bca:	d501      	bpl.n	8002bd0 <_printf_i+0xec>
 8002bcc:	681e      	ldr	r6, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <_printf_i+0xf2>
 8002bd0:	0646      	lsls	r6, r0, #25
 8002bd2:	d5fb      	bpl.n	8002bcc <_printf_i+0xe8>
 8002bd4:	881e      	ldrh	r6, [r3, #0]
 8002bd6:	4854      	ldr	r0, [pc, #336]	; (8002d28 <_printf_i+0x244>)
 8002bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8002bda:	bf0c      	ite	eq
 8002bdc:	2308      	moveq	r3, #8
 8002bde:	230a      	movne	r3, #10
 8002be0:	2100      	movs	r1, #0
 8002be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002be6:	6865      	ldr	r5, [r4, #4]
 8002be8:	60a5      	str	r5, [r4, #8]
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	bfa2      	ittt	ge
 8002bee:	6821      	ldrge	r1, [r4, #0]
 8002bf0:	f021 0104 	bicge.w	r1, r1, #4
 8002bf4:	6021      	strge	r1, [r4, #0]
 8002bf6:	b90e      	cbnz	r6, 8002bfc <_printf_i+0x118>
 8002bf8:	2d00      	cmp	r5, #0
 8002bfa:	d04d      	beq.n	8002c98 <_printf_i+0x1b4>
 8002bfc:	4615      	mov	r5, r2
 8002bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c02:	fb03 6711 	mls	r7, r3, r1, r6
 8002c06:	5dc7      	ldrb	r7, [r0, r7]
 8002c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c0c:	4637      	mov	r7, r6
 8002c0e:	42bb      	cmp	r3, r7
 8002c10:	460e      	mov	r6, r1
 8002c12:	d9f4      	bls.n	8002bfe <_printf_i+0x11a>
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d10b      	bne.n	8002c30 <_printf_i+0x14c>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	07de      	lsls	r6, r3, #31
 8002c1c:	d508      	bpl.n	8002c30 <_printf_i+0x14c>
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	6861      	ldr	r1, [r4, #4]
 8002c22:	4299      	cmp	r1, r3
 8002c24:	bfde      	ittt	le
 8002c26:	2330      	movle	r3, #48	; 0x30
 8002c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c30:	1b52      	subs	r2, r2, r5
 8002c32:	6122      	str	r2, [r4, #16]
 8002c34:	f8cd a000 	str.w	sl, [sp]
 8002c38:	464b      	mov	r3, r9
 8002c3a:	aa03      	add	r2, sp, #12
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f7ff fee2 	bl	8002a08 <_printf_common>
 8002c44:	3001      	adds	r0, #1
 8002c46:	d14c      	bne.n	8002ce2 <_printf_i+0x1fe>
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c4c:	b004      	add	sp, #16
 8002c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c52:	4835      	ldr	r0, [pc, #212]	; (8002d28 <_printf_i+0x244>)
 8002c54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c58:	6829      	ldr	r1, [r5, #0]
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c60:	6029      	str	r1, [r5, #0]
 8002c62:	061d      	lsls	r5, r3, #24
 8002c64:	d514      	bpl.n	8002c90 <_printf_i+0x1ac>
 8002c66:	07df      	lsls	r7, r3, #31
 8002c68:	bf44      	itt	mi
 8002c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c6e:	6023      	strmi	r3, [r4, #0]
 8002c70:	b91e      	cbnz	r6, 8002c7a <_printf_i+0x196>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f023 0320 	bic.w	r3, r3, #32
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	2310      	movs	r3, #16
 8002c7c:	e7b0      	b.n	8002be0 <_printf_i+0xfc>
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	2378      	movs	r3, #120	; 0x78
 8002c88:	4828      	ldr	r0, [pc, #160]	; (8002d2c <_printf_i+0x248>)
 8002c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c8e:	e7e3      	b.n	8002c58 <_printf_i+0x174>
 8002c90:	0659      	lsls	r1, r3, #25
 8002c92:	bf48      	it	mi
 8002c94:	b2b6      	uxthmi	r6, r6
 8002c96:	e7e6      	b.n	8002c66 <_printf_i+0x182>
 8002c98:	4615      	mov	r5, r2
 8002c9a:	e7bb      	b.n	8002c14 <_printf_i+0x130>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	6826      	ldr	r6, [r4, #0]
 8002ca0:	6961      	ldr	r1, [r4, #20]
 8002ca2:	1d18      	adds	r0, r3, #4
 8002ca4:	6028      	str	r0, [r5, #0]
 8002ca6:	0635      	lsls	r5, r6, #24
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	d501      	bpl.n	8002cb0 <_printf_i+0x1cc>
 8002cac:	6019      	str	r1, [r3, #0]
 8002cae:	e002      	b.n	8002cb6 <_printf_i+0x1d2>
 8002cb0:	0670      	lsls	r0, r6, #25
 8002cb2:	d5fb      	bpl.n	8002cac <_printf_i+0x1c8>
 8002cb4:	8019      	strh	r1, [r3, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	4615      	mov	r5, r2
 8002cbc:	e7ba      	b.n	8002c34 <_printf_i+0x150>
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	1d1a      	adds	r2, r3, #4
 8002cc2:	602a      	str	r2, [r5, #0]
 8002cc4:	681d      	ldr	r5, [r3, #0]
 8002cc6:	6862      	ldr	r2, [r4, #4]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f7fd faa0 	bl	8000210 <memchr>
 8002cd0:	b108      	cbz	r0, 8002cd6 <_printf_i+0x1f2>
 8002cd2:	1b40      	subs	r0, r0, r5
 8002cd4:	6060      	str	r0, [r4, #4]
 8002cd6:	6863      	ldr	r3, [r4, #4]
 8002cd8:	6123      	str	r3, [r4, #16]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce0:	e7a8      	b.n	8002c34 <_printf_i+0x150>
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	462a      	mov	r2, r5
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4640      	mov	r0, r8
 8002cea:	47d0      	blx	sl
 8002cec:	3001      	adds	r0, #1
 8002cee:	d0ab      	beq.n	8002c48 <_printf_i+0x164>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	079b      	lsls	r3, r3, #30
 8002cf4:	d413      	bmi.n	8002d1e <_printf_i+0x23a>
 8002cf6:	68e0      	ldr	r0, [r4, #12]
 8002cf8:	9b03      	ldr	r3, [sp, #12]
 8002cfa:	4298      	cmp	r0, r3
 8002cfc:	bfb8      	it	lt
 8002cfe:	4618      	movlt	r0, r3
 8002d00:	e7a4      	b.n	8002c4c <_printf_i+0x168>
 8002d02:	2301      	movs	r3, #1
 8002d04:	4632      	mov	r2, r6
 8002d06:	4649      	mov	r1, r9
 8002d08:	4640      	mov	r0, r8
 8002d0a:	47d0      	blx	sl
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d09b      	beq.n	8002c48 <_printf_i+0x164>
 8002d10:	3501      	adds	r5, #1
 8002d12:	68e3      	ldr	r3, [r4, #12]
 8002d14:	9903      	ldr	r1, [sp, #12]
 8002d16:	1a5b      	subs	r3, r3, r1
 8002d18:	42ab      	cmp	r3, r5
 8002d1a:	dcf2      	bgt.n	8002d02 <_printf_i+0x21e>
 8002d1c:	e7eb      	b.n	8002cf6 <_printf_i+0x212>
 8002d1e:	2500      	movs	r5, #0
 8002d20:	f104 0619 	add.w	r6, r4, #25
 8002d24:	e7f5      	b.n	8002d12 <_printf_i+0x22e>
 8002d26:	bf00      	nop
 8002d28:	08003097 	.word	0x08003097
 8002d2c:	080030a8 	.word	0x080030a8

08002d30 <memcpy>:
 8002d30:	440a      	add	r2, r1
 8002d32:	4291      	cmp	r1, r2
 8002d34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002d38:	d100      	bne.n	8002d3c <memcpy+0xc>
 8002d3a:	4770      	bx	lr
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d46:	4291      	cmp	r1, r2
 8002d48:	d1f9      	bne.n	8002d3e <memcpy+0xe>
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <memmove>:
 8002d4c:	4288      	cmp	r0, r1
 8002d4e:	b510      	push	{r4, lr}
 8002d50:	eb01 0402 	add.w	r4, r1, r2
 8002d54:	d902      	bls.n	8002d5c <memmove+0x10>
 8002d56:	4284      	cmp	r4, r0
 8002d58:	4623      	mov	r3, r4
 8002d5a:	d807      	bhi.n	8002d6c <memmove+0x20>
 8002d5c:	1e43      	subs	r3, r0, #1
 8002d5e:	42a1      	cmp	r1, r4
 8002d60:	d008      	beq.n	8002d74 <memmove+0x28>
 8002d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d6a:	e7f8      	b.n	8002d5e <memmove+0x12>
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4601      	mov	r1, r0
 8002d70:	428a      	cmp	r2, r1
 8002d72:	d100      	bne.n	8002d76 <memmove+0x2a>
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d7e:	e7f7      	b.n	8002d70 <memmove+0x24>

08002d80 <_free_r>:
 8002d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d82:	2900      	cmp	r1, #0
 8002d84:	d044      	beq.n	8002e10 <_free_r+0x90>
 8002d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d8a:	9001      	str	r0, [sp, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8002d92:	bfb8      	it	lt
 8002d94:	18e4      	addlt	r4, r4, r3
 8002d96:	f000 f913 	bl	8002fc0 <__malloc_lock>
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <_free_r+0x94>)
 8002d9c:	9801      	ldr	r0, [sp, #4]
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	b933      	cbnz	r3, 8002db0 <_free_r+0x30>
 8002da2:	6063      	str	r3, [r4, #4]
 8002da4:	6014      	str	r4, [r2, #0]
 8002da6:	b003      	add	sp, #12
 8002da8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dac:	f000 b90e 	b.w	8002fcc <__malloc_unlock>
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	d908      	bls.n	8002dc6 <_free_r+0x46>
 8002db4:	6825      	ldr	r5, [r4, #0]
 8002db6:	1961      	adds	r1, r4, r5
 8002db8:	428b      	cmp	r3, r1
 8002dba:	bf01      	itttt	eq
 8002dbc:	6819      	ldreq	r1, [r3, #0]
 8002dbe:	685b      	ldreq	r3, [r3, #4]
 8002dc0:	1949      	addeq	r1, r1, r5
 8002dc2:	6021      	streq	r1, [r4, #0]
 8002dc4:	e7ed      	b.n	8002da2 <_free_r+0x22>
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b10b      	cbz	r3, 8002dd0 <_free_r+0x50>
 8002dcc:	42a3      	cmp	r3, r4
 8002dce:	d9fa      	bls.n	8002dc6 <_free_r+0x46>
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	1855      	adds	r5, r2, r1
 8002dd4:	42a5      	cmp	r5, r4
 8002dd6:	d10b      	bne.n	8002df0 <_free_r+0x70>
 8002dd8:	6824      	ldr	r4, [r4, #0]
 8002dda:	4421      	add	r1, r4
 8002ddc:	1854      	adds	r4, r2, r1
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	6011      	str	r1, [r2, #0]
 8002de2:	d1e0      	bne.n	8002da6 <_free_r+0x26>
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	6053      	str	r3, [r2, #4]
 8002dea:	4421      	add	r1, r4
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	e7da      	b.n	8002da6 <_free_r+0x26>
 8002df0:	d902      	bls.n	8002df8 <_free_r+0x78>
 8002df2:	230c      	movs	r3, #12
 8002df4:	6003      	str	r3, [r0, #0]
 8002df6:	e7d6      	b.n	8002da6 <_free_r+0x26>
 8002df8:	6825      	ldr	r5, [r4, #0]
 8002dfa:	1961      	adds	r1, r4, r5
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	bf04      	itt	eq
 8002e00:	6819      	ldreq	r1, [r3, #0]
 8002e02:	685b      	ldreq	r3, [r3, #4]
 8002e04:	6063      	str	r3, [r4, #4]
 8002e06:	bf04      	itt	eq
 8002e08:	1949      	addeq	r1, r1, r5
 8002e0a:	6021      	streq	r1, [r4, #0]
 8002e0c:	6054      	str	r4, [r2, #4]
 8002e0e:	e7ca      	b.n	8002da6 <_free_r+0x26>
 8002e10:	b003      	add	sp, #12
 8002e12:	bd30      	pop	{r4, r5, pc}
 8002e14:	2000011c 	.word	0x2000011c

08002e18 <sbrk_aligned>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	4e0e      	ldr	r6, [pc, #56]	; (8002e54 <sbrk_aligned+0x3c>)
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	6831      	ldr	r1, [r6, #0]
 8002e20:	4605      	mov	r5, r0
 8002e22:	b911      	cbnz	r1, 8002e2a <sbrk_aligned+0x12>
 8002e24:	f000 f8bc 	bl	8002fa0 <_sbrk_r>
 8002e28:	6030      	str	r0, [r6, #0]
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f000 f8b7 	bl	8002fa0 <_sbrk_r>
 8002e32:	1c43      	adds	r3, r0, #1
 8002e34:	d00a      	beq.n	8002e4c <sbrk_aligned+0x34>
 8002e36:	1cc4      	adds	r4, r0, #3
 8002e38:	f024 0403 	bic.w	r4, r4, #3
 8002e3c:	42a0      	cmp	r0, r4
 8002e3e:	d007      	beq.n	8002e50 <sbrk_aligned+0x38>
 8002e40:	1a21      	subs	r1, r4, r0
 8002e42:	4628      	mov	r0, r5
 8002e44:	f000 f8ac 	bl	8002fa0 <_sbrk_r>
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d101      	bne.n	8002e50 <sbrk_aligned+0x38>
 8002e4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e50:	4620      	mov	r0, r4
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	20000120 	.word	0x20000120

08002e58 <_malloc_r>:
 8002e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e5c:	1ccd      	adds	r5, r1, #3
 8002e5e:	f025 0503 	bic.w	r5, r5, #3
 8002e62:	3508      	adds	r5, #8
 8002e64:	2d0c      	cmp	r5, #12
 8002e66:	bf38      	it	cc
 8002e68:	250c      	movcc	r5, #12
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	db01      	blt.n	8002e74 <_malloc_r+0x1c>
 8002e70:	42a9      	cmp	r1, r5
 8002e72:	d905      	bls.n	8002e80 <_malloc_r+0x28>
 8002e74:	230c      	movs	r3, #12
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	2600      	movs	r6, #0
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e80:	4e2e      	ldr	r6, [pc, #184]	; (8002f3c <_malloc_r+0xe4>)
 8002e82:	f000 f89d 	bl	8002fc0 <__malloc_lock>
 8002e86:	6833      	ldr	r3, [r6, #0]
 8002e88:	461c      	mov	r4, r3
 8002e8a:	bb34      	cbnz	r4, 8002eda <_malloc_r+0x82>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f7ff ffc2 	bl	8002e18 <sbrk_aligned>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	4604      	mov	r4, r0
 8002e98:	d14d      	bne.n	8002f36 <_malloc_r+0xde>
 8002e9a:	6834      	ldr	r4, [r6, #0]
 8002e9c:	4626      	mov	r6, r4
 8002e9e:	2e00      	cmp	r6, #0
 8002ea0:	d140      	bne.n	8002f24 <_malloc_r+0xcc>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	eb04 0803 	add.w	r8, r4, r3
 8002eac:	f000 f878 	bl	8002fa0 <_sbrk_r>
 8002eb0:	4580      	cmp	r8, r0
 8002eb2:	d13a      	bne.n	8002f2a <_malloc_r+0xd2>
 8002eb4:	6821      	ldr	r1, [r4, #0]
 8002eb6:	3503      	adds	r5, #3
 8002eb8:	1a6d      	subs	r5, r5, r1
 8002eba:	f025 0503 	bic.w	r5, r5, #3
 8002ebe:	3508      	adds	r5, #8
 8002ec0:	2d0c      	cmp	r5, #12
 8002ec2:	bf38      	it	cc
 8002ec4:	250c      	movcc	r5, #12
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4638      	mov	r0, r7
 8002eca:	f7ff ffa5 	bl	8002e18 <sbrk_aligned>
 8002ece:	3001      	adds	r0, #1
 8002ed0:	d02b      	beq.n	8002f2a <_malloc_r+0xd2>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	442b      	add	r3, r5
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	e00e      	b.n	8002ef8 <_malloc_r+0xa0>
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	1b52      	subs	r2, r2, r5
 8002ede:	d41e      	bmi.n	8002f1e <_malloc_r+0xc6>
 8002ee0:	2a0b      	cmp	r2, #11
 8002ee2:	d916      	bls.n	8002f12 <_malloc_r+0xba>
 8002ee4:	1961      	adds	r1, r4, r5
 8002ee6:	42a3      	cmp	r3, r4
 8002ee8:	6025      	str	r5, [r4, #0]
 8002eea:	bf18      	it	ne
 8002eec:	6059      	strne	r1, [r3, #4]
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	bf08      	it	eq
 8002ef2:	6031      	streq	r1, [r6, #0]
 8002ef4:	5162      	str	r2, [r4, r5]
 8002ef6:	604b      	str	r3, [r1, #4]
 8002ef8:	4638      	mov	r0, r7
 8002efa:	f104 060b 	add.w	r6, r4, #11
 8002efe:	f000 f865 	bl	8002fcc <__malloc_unlock>
 8002f02:	f026 0607 	bic.w	r6, r6, #7
 8002f06:	1d23      	adds	r3, r4, #4
 8002f08:	1af2      	subs	r2, r6, r3
 8002f0a:	d0b6      	beq.n	8002e7a <_malloc_r+0x22>
 8002f0c:	1b9b      	subs	r3, r3, r6
 8002f0e:	50a3      	str	r3, [r4, r2]
 8002f10:	e7b3      	b.n	8002e7a <_malloc_r+0x22>
 8002f12:	6862      	ldr	r2, [r4, #4]
 8002f14:	42a3      	cmp	r3, r4
 8002f16:	bf0c      	ite	eq
 8002f18:	6032      	streq	r2, [r6, #0]
 8002f1a:	605a      	strne	r2, [r3, #4]
 8002f1c:	e7ec      	b.n	8002ef8 <_malloc_r+0xa0>
 8002f1e:	4623      	mov	r3, r4
 8002f20:	6864      	ldr	r4, [r4, #4]
 8002f22:	e7b2      	b.n	8002e8a <_malloc_r+0x32>
 8002f24:	4634      	mov	r4, r6
 8002f26:	6876      	ldr	r6, [r6, #4]
 8002f28:	e7b9      	b.n	8002e9e <_malloc_r+0x46>
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f000 f84c 	bl	8002fcc <__malloc_unlock>
 8002f34:	e7a1      	b.n	8002e7a <_malloc_r+0x22>
 8002f36:	6025      	str	r5, [r4, #0]
 8002f38:	e7de      	b.n	8002ef8 <_malloc_r+0xa0>
 8002f3a:	bf00      	nop
 8002f3c:	2000011c 	.word	0x2000011c

08002f40 <_realloc_r>:
 8002f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f44:	4680      	mov	r8, r0
 8002f46:	4614      	mov	r4, r2
 8002f48:	460e      	mov	r6, r1
 8002f4a:	b921      	cbnz	r1, 8002f56 <_realloc_r+0x16>
 8002f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f50:	4611      	mov	r1, r2
 8002f52:	f7ff bf81 	b.w	8002e58 <_malloc_r>
 8002f56:	b92a      	cbnz	r2, 8002f64 <_realloc_r+0x24>
 8002f58:	f7ff ff12 	bl	8002d80 <_free_r>
 8002f5c:	4625      	mov	r5, r4
 8002f5e:	4628      	mov	r0, r5
 8002f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f64:	f000 f838 	bl	8002fd8 <_malloc_usable_size_r>
 8002f68:	4284      	cmp	r4, r0
 8002f6a:	4607      	mov	r7, r0
 8002f6c:	d802      	bhi.n	8002f74 <_realloc_r+0x34>
 8002f6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f72:	d812      	bhi.n	8002f9a <_realloc_r+0x5a>
 8002f74:	4621      	mov	r1, r4
 8002f76:	4640      	mov	r0, r8
 8002f78:	f7ff ff6e 	bl	8002e58 <_malloc_r>
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d0ed      	beq.n	8002f5e <_realloc_r+0x1e>
 8002f82:	42bc      	cmp	r4, r7
 8002f84:	4622      	mov	r2, r4
 8002f86:	4631      	mov	r1, r6
 8002f88:	bf28      	it	cs
 8002f8a:	463a      	movcs	r2, r7
 8002f8c:	f7ff fed0 	bl	8002d30 <memcpy>
 8002f90:	4631      	mov	r1, r6
 8002f92:	4640      	mov	r0, r8
 8002f94:	f7ff fef4 	bl	8002d80 <_free_r>
 8002f98:	e7e1      	b.n	8002f5e <_realloc_r+0x1e>
 8002f9a:	4635      	mov	r5, r6
 8002f9c:	e7df      	b.n	8002f5e <_realloc_r+0x1e>
	...

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4d06      	ldr	r5, [pc, #24]	; (8002fbc <_sbrk_r+0x1c>)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	f000 f81e 	bl	8002fec <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	20000124 	.word	0x20000124

08002fc0 <__malloc_lock>:
 8002fc0:	4801      	ldr	r0, [pc, #4]	; (8002fc8 <__malloc_lock+0x8>)
 8002fc2:	f000 b811 	b.w	8002fe8 <__retarget_lock_acquire_recursive>
 8002fc6:	bf00      	nop
 8002fc8:	20000128 	.word	0x20000128

08002fcc <__malloc_unlock>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	; (8002fd4 <__malloc_unlock+0x8>)
 8002fce:	f000 b80c 	b.w	8002fea <__retarget_lock_release_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	20000128 	.word	0x20000128

08002fd8 <_malloc_usable_size_r>:
 8002fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fdc:	1f18      	subs	r0, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bfbc      	itt	lt
 8002fe2:	580b      	ldrlt	r3, [r1, r0]
 8002fe4:	18c0      	addlt	r0, r0, r3
 8002fe6:	4770      	bx	lr

08002fe8 <__retarget_lock_acquire_recursive>:
 8002fe8:	4770      	bx	lr

08002fea <__retarget_lock_release_recursive>:
 8002fea:	4770      	bx	lr

08002fec <_sbrk>:
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <_sbrk+0x14>)
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	b909      	cbnz	r1, 8002ff8 <_sbrk+0xc>
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <_sbrk+0x18>)
 8002ff6:	6011      	str	r1, [r2, #0]
 8002ff8:	6810      	ldr	r0, [r2, #0]
 8002ffa:	4403      	add	r3, r0
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4770      	bx	lr
 8003000:	2000012c 	.word	0x2000012c
 8003004:	20000130 	.word	0x20000130

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
