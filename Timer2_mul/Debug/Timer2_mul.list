
Timer2_mul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  080003fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  080003fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000404  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000408  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000408  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000159a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000565  00000000  00000000  000215ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140be  00000000  00000000  00021eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002521  00000000  00000000  00035f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080513  00000000  00000000  0003848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b89a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  000b89f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003e4 	.word	0x080003e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080003e4 	.word	0x080003e4

080001d8 <main>:
#include"tim2.h"


int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	tim2_1hz_init();
 80001dc:	f000 f848 	bl	8000270 <tim2_1hz_init>

	while(1)
	{

		GPIOA->ODR ^= LED_PIN;
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <main+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a03      	ldr	r2, [pc, #12]	; (80001f4 <main+0x1c>)
 80001e6:	f083 0320 	eor.w	r3, r3, #32
 80001ea:	6153      	str	r3, [r2, #20]
		tim_delay();
 80001ec:	f000 f880 	bl	80002f0 <tim_delay>
		GPIOA->ODR ^= LED_PIN;
 80001f0:	e7f6      	b.n	80001e0 <main+0x8>
 80001f2:	bf00      	nop
 80001f4:	40020000 	.word	0x40020000

080001f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <NMI_Handler+0x4>

080001fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001fe:	b480      	push	{r7}
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000202:	e7fe      	b.n	8000202 <HardFault_Handler+0x4>

08000204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000208:	e7fe      	b.n	8000208 <MemManage_Handler+0x4>

0800020a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800020a:	b480      	push	{r7}
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800020e:	e7fe      	b.n	800020e <BusFault_Handler+0x4>

08000210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000214:	e7fe      	b.n	8000214 <UsageFault_Handler+0x4>

08000216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000216:	b480      	push	{r7}
 8000218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800021a:	bf00      	nop
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr

08000232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000232:	b480      	push	{r7}
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr

08000240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000244:	f000 f896 	bl	8000374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}

0800024c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <SystemInit+0x20>)
 8000252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <SystemInit+0x20>)
 8000258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800025c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000ed00 	.word	0xe000ed00

08000270 <tim2_1hz_init>:
#include"tim2.h"

void tim2_1hz_init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/*Enable clock access to tim2*/
	RCC->APB1ENR |= TIM2EN;
 8000274:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <tim2_1hz_init+0x78>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a1b      	ldr	r2, [pc, #108]	; (80002e8 <tim2_1hz_init+0x78>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = 16000-1;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000284:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000288:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR = 10000-1;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000292:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Clear counter*/
	TIM2->CNT = 0;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 |= CR1_CEN;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]

	/*.Enable clock access to GPIOA*/
				RCC->AHB1ENR |= GPIOAEN;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <tim2_1hz_init+0x78>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <tim2_1hz_init+0x78>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PA5 as output pin*/
						GPIOA->MODER |= (1U<<10);
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <tim2_1hz_init+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <tim2_1hz_init+0x7c>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6013      	str	r3, [r2, #0]
						tim_delay();
 80002c4:	f000 f814 	bl	80002f0 <tim_delay>
						GPIOA->MODER &= ~(1U<<11);
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <tim2_1hz_init+0x7c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a07      	ldr	r2, [pc, #28]	; (80002ec <tim2_1hz_init+0x7c>)
 80002ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002d2:	6013      	str	r3, [r2, #0]
						tim_delay();
 80002d4:	f000 f80c 	bl	80002f0 <tim_delay>

						GPIOA->ODR ^= LED_PIN;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <tim2_1hz_init+0x7c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <tim2_1hz_init+0x7c>)
 80002de:	f083 0320 	eor.w	r3, r3, #32
 80002e2:	6153      	str	r3, [r2, #20]

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020000 	.word	0x40020000

080002f0 <tim_delay>:

void tim_delay(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

       /*Wait for UIF */
	while(!(TIM2->SR & SR_UIF)){}
 80002f4:	bf00      	nop
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f8      	beq.n	80002f6 <tim_delay+0x6>

	/*Clear UIF*/
	TIM2->SR &=~SR_UIF;
 8000304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030e:	f023 0301 	bic.w	r3, r3, #1
 8000312:	6113      	str	r3, [r2, #16]

}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000326:	490e      	ldr	r1, [pc, #56]	; (8000360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800033c:	4c0b      	ldr	r4, [pc, #44]	; (800036c <LoopFillZerobss+0x26>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800034a:	f7ff ff7f 	bl	800024c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800034e:	f000 f825 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000352:	f7ff ff41 	bl	80001d8 <main>
  bx  lr    
 8000356:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000364:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000368:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800036c:	20000024 	.word	0x20000024

08000370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC_IRQHandler>
	...

08000374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_IncTick+0x20>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_IncTick+0x24>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4413      	add	r3, r2
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_IncTick+0x24>)
 8000386:	6013      	str	r3, [r2, #0]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	20000020 	.word	0x20000020

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
