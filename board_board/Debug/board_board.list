
board_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800064c  0800064c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800064c  0800064c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800064c  0800064c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000658  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000658  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001143  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000418  00000000  00000000  00021177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00021590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d0  00000000  00000000  00021698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000144e0  00000000  00000000  00021768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017cc  00000000  00000000  00035c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082db0  00000000  00000000  00037414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b8  00000000  00000000  000ba214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000614 	.word	0x08000614

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000614 	.word	0x08000614

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3b01      	subs	r3, #1
 8000248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800024c:	d301      	bcc.n	8000252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800024e:	2301      	movs	r3, #1
 8000250:	e00f      	b.n	8000272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <SysTick_Config+0x40>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3b01      	subs	r3, #1
 8000258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800025a:	210f      	movs	r1, #15
 800025c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000260:	f7ff ffc2 	bl	80001e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <SysTick_Config+0x40>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <SysTick_Config+0x40>)
 800026c:	2207      	movs	r2, #7
 800026e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010

08000280 <SysTick_Handler>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void SysTick_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	msTicks++; // Increment msTicks variable on every SysTick interrupt
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Handler+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a03      	ldr	r2, [pc, #12]	; (8000298 <SysTick_Handler+0x18>)
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	20000020 	.word	0x20000020

0800029c <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	uint32_t startTicks = msTicks;
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <Delay_ms+0x2c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	60fb      	str	r3, [r7, #12]
	while ((msTicks - startTicks) < ms) {} // Wait until desired delay is achieved
 80002aa:	bf00      	nop
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <Delay_ms+0x2c>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d8f8      	bhi.n	80002ac <Delay_ms+0x10>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	20000020 	.word	0x20000020

080002cc <main>:

int main()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80002d0:	f000 f8d2 	bl	8000478 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000); // Configure SysTick for 1ms interval
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0x30>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a09      	ldr	r2, [pc, #36]	; (8000300 <main+0x34>)
 80002da:	fba2 2303 	umull	r2, r3, r2, r3
 80002de:	099b      	lsrs	r3, r3, #6
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ffab 	bl	800023c <SysTick_Config>
	uart1_init();
 80002e6:	f000 f80f 	bl	8000308 <uart1_init>
	while(1)
	{
		uart1_write("hello world\r\n");
 80002ea:	4806      	ldr	r0, [pc, #24]	; (8000304 <main+0x38>)
 80002ec:	f000 f866 	bl	80003bc <uart1_write>
		Delay_ms(500); // Delay using custom Delay_ms function
 80002f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f4:	f7ff ffd2 	bl	800029c <Delay_ms>
		uart1_write("hello world\r\n");
 80002f8:	e7f7      	b.n	80002ea <main+0x1e>
 80002fa:	bf00      	nop
 80002fc:	20000000 	.word	0x20000000
 8000300:	10624dd3 	.word	0x10624dd3
 8000304:	0800062c 	.word	0x0800062c

08000308 <uart1_init>:
	}
	return 0;
}

void uart1_init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0

	/*****Configure uart gpio pin******/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <uart1_init+0x58>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <uart1_init+0x58>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA9 mode to alternate function mode*/
	GPIOA->MODER  |= PA9MOD;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <uart1_init+0x5c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a11      	ldr	r2, [pc, #68]	; (8000364 <uart1_init+0x5c>)
 800031e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000322:	6013      	str	r3, [r2, #0]

	/*Set PA9 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[1] |= PA9AF;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <uart1_init+0x5c>)
 8000326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000328:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <uart1_init+0x5c>)
 800032a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800032e:	6253      	str	r3, [r2, #36]	; 0x24

	/*****Configure uart module ******/
	/*Enable clock access to uart1 */
	RCC->APB2ENR |= APB2EN;
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <uart1_init+0x58>)
 8000332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <uart1_init+0x58>)
 8000336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	4909      	ldr	r1, [pc, #36]	; (8000368 <uart1_init+0x60>)
 8000342:	480a      	ldr	r0, [pc, #40]	; (800036c <uart1_init+0x64>)
 8000344:	f000 f814 	bl	8000370 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART1->CR1 = USART1_TX;
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <uart1_init+0x64>)
 800034a:	2208      	movs	r2, #8
 800034c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART1->CR1 |= USART1EN;
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <uart1_init+0x64>)
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	4a06      	ldr	r2, [pc, #24]	; (800036c <uart1_init+0x64>)
 8000354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000358:	60d3      	str	r3, [r2, #12]
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000
 8000368:	00f42400 	.word	0x00f42400
 800036c:	40011000 	.word	0x40011000

08000370 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	68b8      	ldr	r0, [r7, #8]
 8000380:	f000 f808 	bl	8000394 <compute_uart_bd>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	609a      	str	r2, [r3, #8]
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	085a      	lsrs	r2, r3, #1
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	441a      	add	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ac:	b29b      	uxth	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <uart1_write>:

void uart1_write(const char* str)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ff07 	bl	80001d8 <strlen>
 80003ca:	4603      	mov	r3, r0
 80003cc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < len; i++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e00f      	b.n	80003f4 <uart1_write+0x38>
		/*Make sure the transmit data register is empty*/
		while(!(USART1->SR & SR_TXE)){}
 80003d4:	bf00      	nop
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <uart1_write+0x4c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <uart1_write+0x1a>

		/*Write to transmit data register*/
		USART1->DR = str[i];
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	4b07      	ldr	r3, [pc, #28]	; (8000408 <uart1_write+0x4c>)
 80003ec:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++) {
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbeb      	blt.n	80003d4 <uart1_write+0x18>
	}
}
 80003fc:	bf00      	nop
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40011000 	.word	0x40011000

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler+0x4>

08000412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <SystemInit+0x20>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <SystemInit+0x20>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	2302      	movs	r3, #2
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	2302      	movs	r3, #2
 8000490:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000492:	4b34      	ldr	r3, [pc, #208]	; (8000564 <SystemCoreClockUpdate+0xec>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	f003 030c 	and.w	r3, r3, #12
 800049a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d011      	beq.n	80004c6 <SystemCoreClockUpdate+0x4e>
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	2b08      	cmp	r3, #8
 80004a6:	d844      	bhi.n	8000532 <SystemCoreClockUpdate+0xba>
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d003      	beq.n	80004b6 <SystemCoreClockUpdate+0x3e>
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d004      	beq.n	80004be <SystemCoreClockUpdate+0x46>
 80004b4:	e03d      	b.n	8000532 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 80004b8:	4a2c      	ldr	r2, [pc, #176]	; (800056c <SystemCoreClockUpdate+0xf4>)
 80004ba:	601a      	str	r2, [r3, #0]
      break;
 80004bc:	e03d      	b.n	800053a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 80004c0:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <SystemCoreClockUpdate+0xf8>)
 80004c2:	601a      	str	r2, [r3, #0]
      break;
 80004c4:	e039      	b.n	800053a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <SystemCoreClockUpdate+0xec>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	0d9b      	lsrs	r3, r3, #22
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <SystemCoreClockUpdate+0xec>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004da:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d00c      	beq.n	80004fc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004e2:	4a23      	ldr	r2, [pc, #140]	; (8000570 <SystemCoreClockUpdate+0xf8>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ea:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <SystemCoreClockUpdate+0xec>)
 80004ec:	6852      	ldr	r2, [r2, #4]
 80004ee:	0992      	lsrs	r2, r2, #6
 80004f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004f4:	fb02 f303 	mul.w	r3, r2, r3
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e00b      	b.n	8000514 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004fc:	4a1b      	ldr	r2, [pc, #108]	; (800056c <SystemCoreClockUpdate+0xf4>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	fbb2 f3f3 	udiv	r3, r2, r3
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <SystemCoreClockUpdate+0xec>)
 8000506:	6852      	ldr	r2, [r2, #4]
 8000508:	0992      	lsrs	r2, r2, #6
 800050a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <SystemCoreClockUpdate+0xec>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	0c1b      	lsrs	r3, r3, #16
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	3301      	adds	r3, #1
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000524:	697a      	ldr	r2, [r7, #20]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 800052e:	6013      	str	r3, [r2, #0]
      break;
 8000530:	e003      	b.n	800053a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <SystemCoreClockUpdate+0xf4>)
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <SystemCoreClockUpdate+0xec>)
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	091b      	lsrs	r3, r3, #4
 8000540:	f003 030f 	and.w	r3, r3, #15
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <SystemCoreClockUpdate+0xfc>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	fa22 f303 	lsr.w	r3, r2, r3
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <SystemCoreClockUpdate+0xf0>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	371c      	adds	r7, #28
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800
 8000568:	20000000 	.word	0x20000000
 800056c:	00f42400 	.word	0x00f42400
 8000570:	007a1200 	.word	0x007a1200
 8000574:	0800063c 	.word	0x0800063c

08000578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800057e:	490e      	ldr	r1, [pc, #56]	; (80005b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000594:	4c0b      	ldr	r4, [pc, #44]	; (80005c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005a2:	f7ff ff57 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f000 f811 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005aa:	f7ff fe8f 	bl	80002cc <main>
  bx  lr    
 80005ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005bc:	08000654 	.word	0x08000654
  ldr r2, =_sbss
 80005c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005c4:	20000024 	.word	0x20000024

080005c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>
	...

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4d0d      	ldr	r5, [pc, #52]	; (8000604 <__libc_init_array+0x38>)
 80005d0:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	2600      	movs	r6, #0
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	4d0b      	ldr	r5, [pc, #44]	; (800060c <__libc_init_array+0x40>)
 80005de:	4c0c      	ldr	r4, [pc, #48]	; (8000610 <__libc_init_array+0x44>)
 80005e0:	f000 f818 	bl	8000614 <_init>
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	2600      	movs	r6, #0
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f4:	4798      	blx	r3
 80005f6:	3601      	adds	r6, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fe:	4798      	blx	r3
 8000600:	3601      	adds	r6, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	0800064c 	.word	0x0800064c
 8000608:	0800064c 	.word	0x0800064c
 800060c:	0800064c 	.word	0x0800064c
 8000610:	08000650 	.word	0x08000650

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
